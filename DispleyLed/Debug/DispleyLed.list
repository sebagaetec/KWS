
DispleyLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009618  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000998  080097c0  080097c0  0000a7c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a158  0800a158  0000c888  2**0
                  CONTENTS
  4 .ARM          00000008  0800a158  0800a158  0000b158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a160  0800a160  0000c888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a160  0800a160  0000b160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a164  0800a164  0000b164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000888  20000000  0800a168  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000888  0800a9f0  0000c888  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20000b5c  0800a9f0  0000cb5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c888  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e59  00000000  00000000  0000c8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002530  00000000  00000000  0001e711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00020c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc0  00000000  00000000  00021b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d4f  00000000  00000000  00022730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012836  00000000  00000000  0004b47f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff672  00000000  00000000  0005dcb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0015d327  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005198  00000000  00000000  0015d3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00162548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000888 	.word	0x20000888
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009790 	.word	0x08009790

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000088c 	.word	0x2000088c
 80001cc:	08009790 	.word	0x08009790

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <mapPWM>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int mapPWM(float y_value) {
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (y_value < -1.0f) y_value = -1.0f;
 8000ea2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ea6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8000eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb2:	d501      	bpl.n	8000eb8 <mapPWM+0x20>
 8000eb4:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <mapPWM+0x60>)
 8000eb6:	607b      	str	r3, [r7, #4]
	if (y_value > 1.0f) y_value = 1.0f;
 8000eb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ebc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec8:	dd02      	ble.n	8000ed0 <mapPWM+0x38>
 8000eca:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000ece:	607b      	str	r3, [r7, #4]
	return (int)((y_value + 1.0f) * 127.5f); // -1a1 to 0a255
 8000ed0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ed4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ed8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000edc:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000efc <mapPWM+0x64>
 8000ee0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee8:	ee17 3a90 	vmov	r3, s15
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	bf800000 	.word	0xbf800000
 8000efc:	42ff0000 	.word	0x42ff0000

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b5b0      	push	{r4, r5, r7, lr}
 8000f02:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8000f06:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	static ai_handle network = AI_HANDLE_NULL;
	ai_buffer ai_input[AI_SINE_MODEL_IN_NUM];
	ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM];

	ai_float x_val = 0.0f;
 8000f08:	f04f 0300 	mov.w	r3, #0
 8000f0c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
	const float x_step = 0.1f;
 8000f10:	4b8c      	ldr	r3, [pc, #560]	@ (8001144 <main+0x244>)
 8000f12:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	const float x_max = 6.28f; // 2*pi
 8000f16:	4b8c      	ldr	r3, [pc, #560]	@ (8001148 <main+0x248>)
 8000f18:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1c:	f000 fc0e 	bl	800173c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f20:	f000 f928 	bl	8001174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f24:	f000 fa00 	bl	8001328 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f28:	f000 f9ce 	bl	80012c8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000f2c:	f000 f974 	bl	8001218 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f30:	2100      	movs	r1, #0
 8000f32:	4886      	ldr	r0, [pc, #536]	@ (800114c <main+0x24c>)
 8000f34:	f002 faee 	bl	8003514 <HAL_TIM_PWM_Start>

  // Inicializa la red neuronal
  ai_error err;
  // Crea la instancia del modelo
  err = ai_sine_model_create(&network, AI_SINE_MODEL_DATA_CONFIG);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4885      	ldr	r0, [pc, #532]	@ (8001150 <main+0x250>)
 8000f3c:	f004 f91e 	bl	800517c <ai_sine_model_create>
 8000f40:	4603      	mov	r3, r0
 8000f42:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
  if (err.type != AI_ERROR_NONE) {
 8000f46:	f897 31c4 	ldrb.w	r3, [r7, #452]	@ 0x1c4
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d01f      	beq.n	8000f8e <main+0x8e>
      // Error al crear red
	  char test_msg[] = "error al crear el modelo\r\n";
 8000f4e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000f52:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000f56:	4a7f      	ldr	r2, [pc, #508]	@ (8001154 <main+0x254>)
 8000f58:	461c      	mov	r4, r3
 8000f5a:	4615      	mov	r5, r2
 8000f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f64:	c403      	stmia	r4!, {r0, r1}
 8000f66:	8022      	strh	r2, [r4, #0]
 8000f68:	3402      	adds	r4, #2
 8000f6a:	0c13      	lsrs	r3, r2, #16
 8000f6c:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)test_msg, strlen(test_msg), HAL_MAX_DELAY);
 8000f6e:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff f97c 	bl	8000270 <strlen>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8000f80:	f04f 33ff 	mov.w	r3, #4294967295
 8000f84:	4874      	ldr	r0, [pc, #464]	@ (8001158 <main+0x258>)
 8000f86:	f003 faaf 	bl	80044e8 <HAL_UART_Transmit>
      Error_Handler();
 8000f8a:	f000 fa4d 	bl	8001428 <Error_Handler>
  }

  //activations and weights
  AI_ALIGNED(4) ai_u8 activations[AI_SINE_MODEL_DATA_ACTIVATIONS_SIZE];
  const ai_handle weights = ai_sine_model_data_weights_get();
 8000f8e:	f004 f9bf 	bl	8005310 <ai_sine_model_data_weights_get>
 8000f92:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c

  ai_network_params ai_params = {
      AI_SINE_MODEL_DATA_WEIGHTS(weights),
 8000f96:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000f9a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f9e:	f8d7 120c 	ldr.w	r1, [r7, #524]	@ 0x20c
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f004 f980 	bl	80052a8 <ai_sine_model_data_weights_buffer_get>
      AI_SINE_MODEL_DATA_ACTIVATIONS(activations)
 8000fa8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000fac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000fb0:	331c      	adds	r3, #28
 8000fb2:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f004 f941 	bl	8005240 <ai_sine_model_data_activations_buffer_get>
  };

  // Inicializa el modelo con los parametros
  if (!ai_sine_model_init(network, &ai_params)) {
 8000fbe:	4b64      	ldr	r3, [pc, #400]	@ (8001150 <main+0x250>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f004 f8ed 	bl	80051a8 <ai_sine_model_init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f083 0301 	eor.w	r3, r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d01e      	beq.n	8001018 <main+0x118>
	  // notificar error
	  char test_msg[] = "error model init\r\n";
 8000fda:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000fde:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000fe2:	4a5e      	ldr	r2, [pc, #376]	@ (800115c <main+0x25c>)
 8000fe4:	461c      	mov	r4, r3
 8000fe6:	4615      	mov	r5, r2
 8000fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fec:	682b      	ldr	r3, [r5, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	8022      	strh	r2, [r4, #0]
 8000ff2:	3402      	adds	r4, #2
 8000ff4:	0c1b      	lsrs	r3, r3, #16
 8000ff6:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)test_msg, strlen(test_msg), HAL_MAX_DELAY);
 8000ff8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff f937 	bl	8000270 <strlen>
 8001002:	4603      	mov	r3, r0
 8001004:	b29a      	uxth	r2, r3
 8001006:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	4852      	ldr	r0, [pc, #328]	@ (8001158 <main+0x258>)
 8001010:	f003 fa6a 	bl	80044e8 <HAL_UART_Transmit>
      Error_Handler();
 8001014:	f000 fa08 	bl	8001428 <Error_Handler>
  // Configuracion de buffers de entrada y salida
  static ai_shape_dimension input_shape_dims[4] = {1, 1, 1, 1};
  static ai_shape_dimension output_shape_dims[4] = {1, 1, 1, 1};

  // Setup input buffer
  ai_input[0].format = AI_BUFFER_FORMAT_FLOAT;
 8001018:	4b51      	ldr	r3, [pc, #324]	@ (8001160 <main+0x260>)
 800101a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
  ai_input[0].data = AI_HANDLE_PTR(&x_val);
 800101e:	f507 73e6 	add.w	r3, r7, #460	@ 0x1cc
 8001022:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  ai_input[0].meta_info = NULL;
 8001026:	2300      	movs	r3, #0
 8001028:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  ai_input[0].flags = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
  ai_input[0].size = 1;
 8001032:	2301      	movs	r3, #1
 8001034:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
  ai_input[0].shape = (ai_buffer_shape) {
 8001038:	4a4a      	ldr	r2, [pc, #296]	@ (8001164 <main+0x264>)
 800103a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800103e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001042:	e883 0003 	stmia.w	r3, {r0, r1}
      .size = 4,
      .data = input_shape_dims
  };

  // Setup output buffer
  ai_output[0].format = AI_BUFFER_FORMAT_FLOAT;
 8001046:	4b46      	ldr	r3, [pc, #280]	@ (8001160 <main+0x260>)
 8001048:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  ai_output[0].data = AI_HANDLE_PTR(&y_val);
 800104c:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8001050:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
  ai_output[0].meta_info = NULL;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
  ai_output[0].flags = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
  ai_output[0].size = 1;
 8001060:	2301      	movs	r3, #1
 8001062:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
  ai_output[0].shape = (ai_buffer_shape) {
 8001066:	4a40      	ldr	r2, [pc, #256]	@ (8001168 <main+0x268>)
 8001068:	f507 73f2 	add.w	r3, r7, #484	@ 0x1e4
 800106c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001070:	e883 0003 	stmia.w	r3, {r0, r1}
  while (1)
  {
		// 1. ya se inicializó ai_float x_val = 0.0f;

		// 2. Ejecutar la inferencia
		ai_sine_model_run(network, ai_input, ai_output);
 8001074:	4b36      	ldr	r3, [pc, #216]	@ (8001150 <main+0x250>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f507 72e8 	add.w	r2, r7, #464	@ 0x1d0
 800107c:	f507 71f6 	add.w	r1, r7, #492	@ 0x1ec
 8001080:	4618      	mov	r0, r3
 8001082:	f004 f8cd 	bl	8005220 <ai_sine_model_run>
		// 3. Lee resultado
		//y = ((ai_float*) ai_output[0].data)[0];
		//ya esta el valor en y_val
		// debuggeo de valores de x e y por uart.
		char msg_debug[100];
		snprintf(msg_debug, sizeof(msg_debug), "x_val: %.3f, y_val: %.3f\r\n", x_val, y_val);
 8001086:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fa5c 	bl	8000548 <__aeabi_f2d>
 8001090:	4604      	mov	r4, r0
 8001092:	460d      	mov	r5, r1
 8001094:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fa55 	bl	8000548 <__aeabi_f2d>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	1d38      	adds	r0, r7, #4
 80010a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010a8:	e9cd 4500 	strd	r4, r5, [sp]
 80010ac:	4a2f      	ldr	r2, [pc, #188]	@ (800116c <main+0x26c>)
 80010ae:	2164      	movs	r1, #100	@ 0x64
 80010b0:	f006 fad0 	bl	8007654 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f8da 	bl	8000270 <strlen>
 80010bc:	4603      	mov	r3, r0
 80010be:	b29a      	uxth	r2, r3
 80010c0:	1d39      	adds	r1, r7, #4
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	4824      	ldr	r0, [pc, #144]	@ (8001158 <main+0x258>)
 80010c8:	f003 fa0e 	bl	80044e8 <HAL_UART_Transmit>

		// 4. Adapatar la señal para la PWM
		int pwm_val = mapPWM(y_val);
 80010cc:	edd7 7a72 	vldr	s15, [r7, #456]	@ 0x1c8
 80010d0:	eeb0 0a67 	vmov.f32	s0, s15
 80010d4:	f7ff fee0 	bl	8000e98 <mapPWM>
 80010d8:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208

		// debuggeao de valores de la PWM por uart
		char msg_debug2[100];
		snprintf(msg_debug2, sizeof(msg_debug2), "pwm_val: %d\r\n", pwm_val);
 80010dc:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80010e0:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80010e4:	4a22      	ldr	r2, [pc, #136]	@ (8001170 <main+0x270>)
 80010e6:	2164      	movs	r1, #100	@ 0x64
 80010e8:	f006 fab4 	bl	8007654 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg_debug2, strlen(msg_debug2), HAL_MAX_DELAY);
 80010ec:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff f8bd 	bl	8000270 <strlen>
 80010f6:	4603      	mov	r3, r0
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001102:	4815      	ldr	r0, [pc, #84]	@ (8001158 <main+0x258>)
 8001104:	f003 f9f0 	bl	80044e8 <HAL_UART_Transmit>

		// 4. Aplicar al LED
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_val);
 8001108:	4b10      	ldr	r3, [pc, #64]	@ (800114c <main+0x24c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8001110:	635a      	str	r2, [r3, #52]	@ 0x34

		// 5. Avanzar el input
		x_val += x_step;
 8001112:	ed97 7a73 	vldr	s14, [r7, #460]	@ 0x1cc
 8001116:	edd7 7a85 	vldr	s15, [r7, #532]	@ 0x214
 800111a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800111e:	edc7 7a73 	vstr	s15, [r7, #460]	@ 0x1cc
		if (x_val > x_max)
 8001122:	edd7 7a73 	vldr	s15, [r7, #460]	@ 0x1cc
 8001126:	ed97 7a84 	vldr	s14, [r7, #528]	@ 0x210
 800112a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800112e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001132:	d503      	bpl.n	800113c <main+0x23c>
			x_val = 0.0f;
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc

		HAL_Delay(100);
 800113c:	2064      	movs	r0, #100	@ 0x64
 800113e:	f000 fb79 	bl	8001834 <HAL_Delay>
  {
 8001142:	e797      	b.n	8001074 <main+0x174>
 8001144:	3dcccccd 	.word	0x3dcccccd
 8001148:	40c8f5c3 	.word	0x40c8f5c3
 800114c:	200008a4 	.word	0x200008a4
 8001150:	20000978 	.word	0x20000978
 8001154:	080097ec 	.word	0x080097ec
 8001158:	200008f0 	.word	0x200008f0
 800115c:	08009808 	.word	0x08009808
 8001160:	00821040 	.word	0x00821040
 8001164:	0800981c 	.word	0x0800981c
 8001168:	08009824 	.word	0x08009824
 800116c:	080097c0 	.word	0x080097c0
 8001170:	080097dc 	.word	0x080097dc

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b096      	sub	sp, #88	@ 0x58
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	2244      	movs	r2, #68	@ 0x44
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f006 fadd 	bl	8007742 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	463b      	mov	r3, r7
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001196:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800119a:	f000 fe51 	bl	8001e40 <HAL_PWREx_ControlVoltageScaling>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011a4:	f000 f940 	bl	8001428 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a8:	2302      	movs	r3, #2
 80011aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b2:	2310      	movs	r3, #16
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b6:	2302      	movs	r3, #2
 80011b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ba:	2302      	movs	r3, #2
 80011bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011be:	2301      	movs	r3, #1
 80011c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011c2:	230a      	movs	r3, #10
 80011c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011c6:	2307      	movs	r3, #7
 80011c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011ca:	2302      	movs	r3, #2
 80011cc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 fe88 	bl	8001eec <HAL_RCC_OscConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011e2:	f000 f921 	bl	8001428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e6:	230f      	movs	r3, #15
 80011e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ea:	2303      	movs	r3, #3
 80011ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011fa:	463b      	mov	r3, r7
 80011fc:	2104      	movs	r1, #4
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fa50 	bl	80026a4 <HAL_RCC_ClockConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800120a:	f000 f90d 	bl	8001428 <Error_Handler>
  }
}
 800120e:	bf00      	nop
 8001210:	3758      	adds	r7, #88	@ 0x58
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	@ 0x28
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800122a:	463b      	mov	r3, r7
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
 8001238:	615a      	str	r2, [r3, #20]
 800123a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800123c:	4b21      	ldr	r3, [pc, #132]	@ (80012c4 <MX_TIM2_Init+0xac>)
 800123e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001242:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001244:	4b1f      	ldr	r3, [pc, #124]	@ (80012c4 <MX_TIM2_Init+0xac>)
 8001246:	2200      	movs	r2, #0
 8001248:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b1e      	ldr	r3, [pc, #120]	@ (80012c4 <MX_TIM2_Init+0xac>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001250:	4b1c      	ldr	r3, [pc, #112]	@ (80012c4 <MX_TIM2_Init+0xac>)
 8001252:	22ff      	movs	r2, #255	@ 0xff
 8001254:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001256:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <MX_TIM2_Init+0xac>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125c:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <MX_TIM2_Init+0xac>)
 800125e:	2200      	movs	r2, #0
 8001260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001262:	4818      	ldr	r0, [pc, #96]	@ (80012c4 <MX_TIM2_Init+0xac>)
 8001264:	f002 f8fe 	bl	8003464 <HAL_TIM_PWM_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800126e:	f000 f8db 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800127a:	f107 031c 	add.w	r3, r7, #28
 800127e:	4619      	mov	r1, r3
 8001280:	4810      	ldr	r0, [pc, #64]	@ (80012c4 <MX_TIM2_Init+0xac>)
 8001282:	f003 f83d 	bl	8004300 <HAL_TIMEx_MasterConfigSynchronization>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800128c:	f000 f8cc 	bl	8001428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001290:	2360      	movs	r3, #96	@ 0x60
 8001292:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a0:	463b      	mov	r3, r7
 80012a2:	2200      	movs	r2, #0
 80012a4:	4619      	mov	r1, r3
 80012a6:	4807      	ldr	r0, [pc, #28]	@ (80012c4 <MX_TIM2_Init+0xac>)
 80012a8:	f002 fb42 	bl	8003930 <HAL_TIM_PWM_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80012b2:	f000 f8b9 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012b6:	4803      	ldr	r0, [pc, #12]	@ (80012c4 <MX_TIM2_Init+0xac>)
 80012b8:	f000 f904 	bl	80014c4 <HAL_TIM_MspPostInit>

}
 80012bc:	bf00      	nop
 80012be:	3728      	adds	r7, #40	@ 0x28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200008a4 	.word	0x200008a4

080012c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012cc:	4b14      	ldr	r3, [pc, #80]	@ (8001320 <MX_USART2_UART_Init+0x58>)
 80012ce:	4a15      	ldr	r2, [pc, #84]	@ (8001324 <MX_USART2_UART_Init+0x5c>)
 80012d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012d2:	4b13      	ldr	r3, [pc, #76]	@ (8001320 <MX_USART2_UART_Init+0x58>)
 80012d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012da:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <MX_USART2_UART_Init+0x58>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <MX_USART2_UART_Init+0x58>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <MX_USART2_UART_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <MX_USART2_UART_Init+0x58>)
 80012ee:	220c      	movs	r2, #12
 80012f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <MX_USART2_UART_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f8:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <MX_USART2_UART_Init+0x58>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <MX_USART2_UART_Init+0x58>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <MX_USART2_UART_Init+0x58>)
 8001306:	2200      	movs	r2, #0
 8001308:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	@ (8001320 <MX_USART2_UART_Init+0x58>)
 800130c:	f003 f89e 	bl	800444c <HAL_UART_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001316:	f000 f887 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200008f0 	.word	0x200008f0
 8001324:	40004400 	.word	0x40004400

08001328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	@ 0x28
 800132c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133e:	4b37      	ldr	r3, [pc, #220]	@ (800141c <MX_GPIO_Init+0xf4>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	4a36      	ldr	r2, [pc, #216]	@ (800141c <MX_GPIO_Init+0xf4>)
 8001344:	f043 0304 	orr.w	r3, r3, #4
 8001348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134a:	4b34      	ldr	r3, [pc, #208]	@ (800141c <MX_GPIO_Init+0xf4>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	f003 0304 	and.w	r3, r3, #4
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001356:	4b31      	ldr	r3, [pc, #196]	@ (800141c <MX_GPIO_Init+0xf4>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135a:	4a30      	ldr	r2, [pc, #192]	@ (800141c <MX_GPIO_Init+0xf4>)
 800135c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001360:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001362:	4b2e      	ldr	r3, [pc, #184]	@ (800141c <MX_GPIO_Init+0xf4>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	4b2b      	ldr	r3, [pc, #172]	@ (800141c <MX_GPIO_Init+0xf4>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	4a2a      	ldr	r2, [pc, #168]	@ (800141c <MX_GPIO_Init+0xf4>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137a:	4b28      	ldr	r3, [pc, #160]	@ (800141c <MX_GPIO_Init+0xf4>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	4b25      	ldr	r3, [pc, #148]	@ (800141c <MX_GPIO_Init+0xf4>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	4a24      	ldr	r2, [pc, #144]	@ (800141c <MX_GPIO_Init+0xf4>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001392:	4b22      	ldr	r3, [pc, #136]	@ (800141c <MX_GPIO_Init+0xf4>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, F1_Pin|F2_Pin|F3_Pin|F5_Pin
 800139e:	2200      	movs	r2, #0
 80013a0:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 80013a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a8:	f000 fd24 	bl	8001df4 <HAL_GPIO_WritePin>
                          |F4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C2_Pin|C3_Pin|C1_Pin, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80013b2:	481b      	ldr	r0, [pc, #108]	@ (8001420 <MX_GPIO_Init+0xf8>)
 80013b4:	f000 fd1e 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4619      	mov	r1, r3
 80013ce:	4815      	ldr	r0, [pc, #84]	@ (8001424 <MX_GPIO_Init+0xfc>)
 80013d0:	f000 fb66 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : F1_Pin F2_Pin F3_Pin F5_Pin
                           F4_Pin */
  GPIO_InitStruct.Pin = F1_Pin|F2_Pin|F3_Pin|F5_Pin
 80013d4:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80013d8:	617b      	str	r3, [r7, #20]
                          |F4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f0:	f000 fb56 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_Pin C3_Pin C1_Pin */
  GPIO_InitStruct.Pin = C2_Pin|C3_Pin|C1_Pin;
 80013f4:	f44f 638a 	mov.w	r3, #1104	@ 0x450
 80013f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fa:	2301      	movs	r3, #1
 80013fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4619      	mov	r1, r3
 800140c:	4804      	ldr	r0, [pc, #16]	@ (8001420 <MX_GPIO_Init+0xf8>)
 800140e:	f000 fb47 	bl	8001aa0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001412:	bf00      	nop
 8001414:	3728      	adds	r7, #40	@ 0x28
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000
 8001420:	48000400 	.word	0x48000400
 8001424:	48000800 	.word	0x48000800

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <Error_Handler+0x8>

08001434 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <HAL_MspInit+0x44>)
 800143c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800143e:	4a0e      	ldr	r2, [pc, #56]	@ (8001478 <HAL_MspInit+0x44>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6613      	str	r3, [r2, #96]	@ 0x60
 8001446:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <HAL_MspInit+0x44>)
 8001448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <HAL_MspInit+0x44>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001456:	4a08      	ldr	r2, [pc, #32]	@ (8001478 <HAL_MspInit+0x44>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800145c:	6593      	str	r3, [r2, #88]	@ 0x58
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_MspInit+0x44>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000

0800147c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800148c:	d113      	bne.n	80014b6 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800148e:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <HAL_TIM_PWM_MspInit+0x44>)
 8001490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001492:	4a0b      	ldr	r2, [pc, #44]	@ (80014c0 <HAL_TIM_PWM_MspInit+0x44>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6593      	str	r3, [r2, #88]	@ 0x58
 800149a:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <HAL_TIM_PWM_MspInit+0x44>)
 800149c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	201c      	movs	r0, #28
 80014ac:	f000 fac1 	bl	8001a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014b0:	201c      	movs	r0, #28
 80014b2:	f000 fada 	bl	8001a6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000

080014c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014e4:	d11c      	bne.n	8001520 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <HAL_TIM_MspPostInit+0x64>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001528 <HAL_TIM_MspPostInit+0x64>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <HAL_TIM_MspPostInit+0x64>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014fe:	2320      	movs	r3, #32
 8001500:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800150e:	2301      	movs	r3, #1
 8001510:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	4619      	mov	r1, r3
 8001518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800151c:	f000 fac0 	bl	8001aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001520:	bf00      	nop
 8001522:	3720      	adds	r7, #32
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40021000 	.word	0x40021000

0800152c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b0ac      	sub	sp, #176	@ 0xb0
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2288      	movs	r2, #136	@ 0x88
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f006 f8f8 	bl	8007742 <memset>
  if(huart->Instance==USART2)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a21      	ldr	r2, [pc, #132]	@ (80015dc <HAL_UART_MspInit+0xb0>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d13b      	bne.n	80015d4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800155c:	2302      	movs	r3, #2
 800155e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001560:	2300      	movs	r3, #0
 8001562:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4618      	mov	r0, r3
 800156a:	f001 fabf 	bl	8002aec <HAL_RCCEx_PeriphCLKConfig>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001574:	f7ff ff58 	bl	8001428 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001578:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <HAL_UART_MspInit+0xb4>)
 800157a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157c:	4a18      	ldr	r2, [pc, #96]	@ (80015e0 <HAL_UART_MspInit+0xb4>)
 800157e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001582:	6593      	str	r3, [r2, #88]	@ 0x58
 8001584:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <HAL_UART_MspInit+0xb4>)
 8001586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001590:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <HAL_UART_MspInit+0xb4>)
 8001592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001594:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <HAL_UART_MspInit+0xb4>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159c:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <HAL_UART_MspInit+0xb4>)
 800159e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015a8:	230c      	movs	r3, #12
 80015aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015c0:	2307      	movs	r3, #7
 80015c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015ca:	4619      	mov	r1, r3
 80015cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015d0:	f000 fa66 	bl	8001aa0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80015d4:	bf00      	nop
 80015d6:	37b0      	adds	r7, #176	@ 0xb0
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40004400 	.word	0x40004400
 80015e0:	40021000 	.word	0x40021000

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <NMI_Handler+0x4>

080015ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <HardFault_Handler+0x4>

080015f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <MemManage_Handler+0x4>

080015fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <BusFault_Handler+0x4>

08001604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <UsageFault_Handler+0x4>

0800160c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163a:	f000 f8db 	bl	80017f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001648:	4802      	ldr	r0, [pc, #8]	@ (8001654 <TIM2_IRQHandler+0x10>)
 800164a:	f002 f869 	bl	8003720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200008a4 	.word	0x200008a4

08001658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001660:	4a14      	ldr	r2, [pc, #80]	@ (80016b4 <_sbrk+0x5c>)
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <_sbrk+0x60>)
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800166c:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <_sbrk+0x64>)
 8001676:	4a12      	ldr	r2, [pc, #72]	@ (80016c0 <_sbrk+0x68>)
 8001678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167a:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	429a      	cmp	r2, r3
 8001686:	d207      	bcs.n	8001698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001688:	f006 f8be 	bl	8007808 <__errno>
 800168c:	4603      	mov	r3, r0
 800168e:	220c      	movs	r2, #12
 8001690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	e009      	b.n	80016ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001698:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169e:	4b07      	ldr	r3, [pc, #28]	@ (80016bc <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	4a05      	ldr	r2, [pc, #20]	@ (80016bc <_sbrk+0x64>)
 80016a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016aa:	68fb      	ldr	r3, [r7, #12]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20018000 	.word	0x20018000
 80016b8:	00000800 	.word	0x00000800
 80016bc:	2000097c 	.word	0x2000097c
 80016c0:	20000b60 	.word	0x20000b60

080016c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016c8:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <SystemInit+0x20>)
 80016ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ce:	4a05      	ldr	r2, [pc, #20]	@ (80016e4 <SystemInit+0x20>)
 80016d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001720 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016ec:	f7ff ffea 	bl	80016c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f0:	480c      	ldr	r0, [pc, #48]	@ (8001724 <LoopForever+0x6>)
  ldr r1, =_edata
 80016f2:	490d      	ldr	r1, [pc, #52]	@ (8001728 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016f4:	4a0d      	ldr	r2, [pc, #52]	@ (800172c <LoopForever+0xe>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f8:	e002      	b.n	8001700 <LoopCopyDataInit>

080016fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fe:	3304      	adds	r3, #4

08001700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001704:	d3f9      	bcc.n	80016fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001706:	4a0a      	ldr	r2, [pc, #40]	@ (8001730 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001708:	4c0a      	ldr	r4, [pc, #40]	@ (8001734 <LoopForever+0x16>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800170c:	e001      	b.n	8001712 <LoopFillZerobss>

0800170e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001710:	3204      	adds	r2, #4

08001712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001714:	d3fb      	bcc.n	800170e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001716:	f006 f87d 	bl	8007814 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800171a:	f7ff fbf1 	bl	8000f00 <main>

0800171e <LoopForever>:

LoopForever:
    b LoopForever
 800171e:	e7fe      	b.n	800171e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001720:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001728:	20000888 	.word	0x20000888
  ldr r2, =_sidata
 800172c:	0800a168 	.word	0x0800a168
  ldr r2, =_sbss
 8001730:	20000888 	.word	0x20000888
  ldr r4, =_ebss
 8001734:	20000b5c 	.word	0x20000b5c

08001738 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001738:	e7fe      	b.n	8001738 <ADC1_2_IRQHandler>
	...

0800173c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001742:	2300      	movs	r3, #0
 8001744:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001746:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <HAL_Init+0x3c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a0b      	ldr	r2, [pc, #44]	@ (8001778 <HAL_Init+0x3c>)
 800174c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001750:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001752:	2003      	movs	r0, #3
 8001754:	f000 f962 	bl	8001a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001758:	2000      	movs	r0, #0
 800175a:	f000 f80f 	bl	800177c <HAL_InitTick>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d002      	beq.n	800176a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	71fb      	strb	r3, [r7, #7]
 8001768:	e001      	b.n	800176e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800176a:	f7ff fe63 	bl	8001434 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800176e:	79fb      	ldrb	r3, [r7, #7]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40022000 	.word	0x40022000

0800177c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001788:	4b17      	ldr	r3, [pc, #92]	@ (80017e8 <HAL_InitTick+0x6c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d023      	beq.n	80017d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001790:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <HAL_InitTick+0x70>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <HAL_InitTick+0x6c>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800179e:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 f96d 	bl	8001a86 <HAL_SYSTICK_Config>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10f      	bne.n	80017d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b0f      	cmp	r3, #15
 80017b6:	d809      	bhi.n	80017cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b8:	2200      	movs	r2, #0
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	f000 f937 	bl	8001a32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c4:	4a0a      	ldr	r2, [pc, #40]	@ (80017f0 <HAL_InitTick+0x74>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e007      	b.n	80017dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
 80017d0:	e004      	b.n	80017dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	73fb      	strb	r3, [r7, #15]
 80017d6:	e001      	b.n	80017dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000028 	.word	0x20000028
 80017ec:	20000020 	.word	0x20000020
 80017f0:	20000024 	.word	0x20000024

080017f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <HAL_IncTick+0x20>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <HAL_IncTick+0x24>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4413      	add	r3, r2
 8001804:	4a04      	ldr	r2, [pc, #16]	@ (8001818 <HAL_IncTick+0x24>)
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000028 	.word	0x20000028
 8001818:	20000980 	.word	0x20000980

0800181c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return uwTick;
 8001820:	4b03      	ldr	r3, [pc, #12]	@ (8001830 <HAL_GetTick+0x14>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000980 	.word	0x20000980

08001834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800183c:	f7ff ffee 	bl	800181c <HAL_GetTick>
 8001840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184c:	d005      	beq.n	800185a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800184e:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <HAL_Delay+0x44>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800185a:	bf00      	nop
 800185c:	f7ff ffde 	bl	800181c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	429a      	cmp	r2, r3
 800186a:	d8f7      	bhi.n	800185c <HAL_Delay+0x28>
  {
  }
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000028 	.word	0x20000028

0800187c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800188c:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001898:	4013      	ands	r3, r2
 800189a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ae:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	60d3      	str	r3, [r2, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c8:	4b04      	ldr	r3, [pc, #16]	@ (80018dc <__NVIC_GetPriorityGrouping+0x18>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	f003 0307 	and.w	r3, r3, #7
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	db0b      	blt.n	800190a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	f003 021f 	and.w	r2, r3, #31
 80018f8:	4907      	ldr	r1, [pc, #28]	@ (8001918 <__NVIC_EnableIRQ+0x38>)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	095b      	lsrs	r3, r3, #5
 8001900:	2001      	movs	r0, #1
 8001902:	fa00 f202 	lsl.w	r2, r0, r2
 8001906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000e100 	.word	0xe000e100

0800191c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	6039      	str	r1, [r7, #0]
 8001926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192c:	2b00      	cmp	r3, #0
 800192e:	db0a      	blt.n	8001946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	b2da      	uxtb	r2, r3
 8001934:	490c      	ldr	r1, [pc, #48]	@ (8001968 <__NVIC_SetPriority+0x4c>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	0112      	lsls	r2, r2, #4
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	440b      	add	r3, r1
 8001940:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001944:	e00a      	b.n	800195c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4908      	ldr	r1, [pc, #32]	@ (800196c <__NVIC_SetPriority+0x50>)
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	3b04      	subs	r3, #4
 8001954:	0112      	lsls	r2, r2, #4
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	440b      	add	r3, r1
 800195a:	761a      	strb	r2, [r3, #24]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000e100 	.word	0xe000e100
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001970:	b480      	push	{r7}
 8001972:	b089      	sub	sp, #36	@ 0x24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f1c3 0307 	rsb	r3, r3, #7
 800198a:	2b04      	cmp	r3, #4
 800198c:	bf28      	it	cs
 800198e:	2304      	movcs	r3, #4
 8001990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3304      	adds	r3, #4
 8001996:	2b06      	cmp	r3, #6
 8001998:	d902      	bls.n	80019a0 <NVIC_EncodePriority+0x30>
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3b03      	subs	r3, #3
 800199e:	e000      	b.n	80019a2 <NVIC_EncodePriority+0x32>
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	f04f 32ff 	mov.w	r2, #4294967295
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43da      	mvns	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	401a      	ands	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b8:	f04f 31ff 	mov.w	r1, #4294967295
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa01 f303 	lsl.w	r3, r1, r3
 80019c2:	43d9      	mvns	r1, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	4313      	orrs	r3, r2
         );
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3724      	adds	r7, #36	@ 0x24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019e8:	d301      	bcc.n	80019ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00f      	b.n	8001a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001a18 <SysTick_Config+0x40>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f6:	210f      	movs	r1, #15
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f7ff ff8e 	bl	800191c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a00:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <SysTick_Config+0x40>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a06:	4b04      	ldr	r3, [pc, #16]	@ (8001a18 <SysTick_Config+0x40>)
 8001a08:	2207      	movs	r2, #7
 8001a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	e000e010 	.word	0xe000e010

08001a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff29 	bl	800187c <__NVIC_SetPriorityGrouping>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a44:	f7ff ff3e 	bl	80018c4 <__NVIC_GetPriorityGrouping>
 8001a48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	6978      	ldr	r0, [r7, #20]
 8001a50:	f7ff ff8e 	bl	8001970 <NVIC_EncodePriority>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff5d 	bl	800191c <__NVIC_SetPriority>
}
 8001a62:	bf00      	nop
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff31 	bl	80018e0 <__NVIC_EnableIRQ>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ffa2 	bl	80019d8 <SysTick_Config>
 8001a94:	4603      	mov	r3, r0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aae:	e17f      	b.n	8001db0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	4013      	ands	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 8171 	beq.w	8001daa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d005      	beq.n	8001ae0 <HAL_GPIO_Init+0x40>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d130      	bne.n	8001b42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b16:	2201      	movs	r2, #1
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	f003 0201 	and.w	r2, r3, #1
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d118      	bne.n	8001b80 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b54:	2201      	movs	r2, #1
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	08db      	lsrs	r3, r3, #3
 8001b6a:	f003 0201 	and.w	r2, r3, #1
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d017      	beq.n	8001bbc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d123      	bne.n	8001c10 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	08da      	lsrs	r2, r3, #3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3208      	adds	r2, #8
 8001bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	220f      	movs	r2, #15
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	08da      	lsrs	r2, r3, #3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3208      	adds	r2, #8
 8001c0a:	6939      	ldr	r1, [r7, #16]
 8001c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0203 	and.w	r2, r3, #3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80ac 	beq.w	8001daa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c52:	4b5f      	ldr	r3, [pc, #380]	@ (8001dd0 <HAL_GPIO_Init+0x330>)
 8001c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c56:	4a5e      	ldr	r2, [pc, #376]	@ (8001dd0 <HAL_GPIO_Init+0x330>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c5e:	4b5c      	ldr	r3, [pc, #368]	@ (8001dd0 <HAL_GPIO_Init+0x330>)
 8001c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c6a:	4a5a      	ldr	r2, [pc, #360]	@ (8001dd4 <HAL_GPIO_Init+0x334>)
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	3302      	adds	r3, #2
 8001c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c76:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	220f      	movs	r2, #15
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c94:	d025      	beq.n	8001ce2 <HAL_GPIO_Init+0x242>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4f      	ldr	r2, [pc, #316]	@ (8001dd8 <HAL_GPIO_Init+0x338>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d01f      	beq.n	8001cde <HAL_GPIO_Init+0x23e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4e      	ldr	r2, [pc, #312]	@ (8001ddc <HAL_GPIO_Init+0x33c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d019      	beq.n	8001cda <HAL_GPIO_Init+0x23a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4d      	ldr	r2, [pc, #308]	@ (8001de0 <HAL_GPIO_Init+0x340>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d013      	beq.n	8001cd6 <HAL_GPIO_Init+0x236>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a4c      	ldr	r2, [pc, #304]	@ (8001de4 <HAL_GPIO_Init+0x344>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d00d      	beq.n	8001cd2 <HAL_GPIO_Init+0x232>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4b      	ldr	r2, [pc, #300]	@ (8001de8 <HAL_GPIO_Init+0x348>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d007      	beq.n	8001cce <HAL_GPIO_Init+0x22e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4a      	ldr	r2, [pc, #296]	@ (8001dec <HAL_GPIO_Init+0x34c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d101      	bne.n	8001cca <HAL_GPIO_Init+0x22a>
 8001cc6:	2306      	movs	r3, #6
 8001cc8:	e00c      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cca:	2307      	movs	r3, #7
 8001ccc:	e00a      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cce:	2305      	movs	r3, #5
 8001cd0:	e008      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	e006      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e004      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e002      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	f002 0203 	and.w	r2, r2, #3
 8001cea:	0092      	lsls	r2, r2, #2
 8001cec:	4093      	lsls	r3, r2
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cf4:	4937      	ldr	r1, [pc, #220]	@ (8001dd4 <HAL_GPIO_Init+0x334>)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	089b      	lsrs	r3, r3, #2
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d02:	4b3b      	ldr	r3, [pc, #236]	@ (8001df0 <HAL_GPIO_Init+0x350>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d26:	4a32      	ldr	r2, [pc, #200]	@ (8001df0 <HAL_GPIO_Init+0x350>)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d2c:	4b30      	ldr	r3, [pc, #192]	@ (8001df0 <HAL_GPIO_Init+0x350>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d50:	4a27      	ldr	r2, [pc, #156]	@ (8001df0 <HAL_GPIO_Init+0x350>)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d56:	4b26      	ldr	r3, [pc, #152]	@ (8001df0 <HAL_GPIO_Init+0x350>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8001df0 <HAL_GPIO_Init+0x350>)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d80:	4b1b      	ldr	r3, [pc, #108]	@ (8001df0 <HAL_GPIO_Init+0x350>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001da4:	4a12      	ldr	r2, [pc, #72]	@ (8001df0 <HAL_GPIO_Init+0x350>)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	3301      	adds	r3, #1
 8001dae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f47f ae78 	bne.w	8001ab0 <HAL_GPIO_Init+0x10>
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	371c      	adds	r7, #28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40010000 	.word	0x40010000
 8001dd8:	48000400 	.word	0x48000400
 8001ddc:	48000800 	.word	0x48000800
 8001de0:	48000c00 	.word	0x48000c00
 8001de4:	48001000 	.word	0x48001000
 8001de8:	48001400 	.word	0x48001400
 8001dec:	48001800 	.word	0x48001800
 8001df0:	40010400 	.word	0x40010400

08001df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
 8001e00:	4613      	mov	r3, r2
 8001e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e04:	787b      	ldrb	r3, [r7, #1]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e0a:	887a      	ldrh	r2, [r7, #2]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e10:	e002      	b.n	8001e18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e12:	887a      	ldrh	r2, [r7, #2]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e28:	4b04      	ldr	r3, [pc, #16]	@ (8001e3c <HAL_PWREx_GetVoltageRange+0x18>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40007000 	.word	0x40007000

08001e40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e4e:	d130      	bne.n	8001eb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e50:	4b23      	ldr	r3, [pc, #140]	@ (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e5c:	d038      	beq.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e66:	4a1e      	ldr	r2, [pc, #120]	@ (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2232      	movs	r2, #50	@ 0x32
 8001e74:	fb02 f303 	mul.w	r3, r2, r3
 8001e78:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	0c9b      	lsrs	r3, r3, #18
 8001e80:	3301      	adds	r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e84:	e002      	b.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e98:	d102      	bne.n	8001ea0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f2      	bne.n	8001e86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eac:	d110      	bne.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e00f      	b.n	8001ed2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ebe:	d007      	beq.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ec0:	4b07      	ldr	r3, [pc, #28]	@ (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ec8:	4a05      	ldr	r2, [pc, #20]	@ (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ece:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	20000020 	.word	0x20000020
 8001ee8:	431bde83 	.word	0x431bde83

08001eec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e3ca      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001efe:	4b97      	ldr	r3, [pc, #604]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f08:	4b94      	ldr	r3, [pc, #592]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 80e4 	beq.w	80020e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d007      	beq.n	8001f36 <HAL_RCC_OscConfig+0x4a>
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	2b0c      	cmp	r3, #12
 8001f2a:	f040 808b 	bne.w	8002044 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	f040 8087 	bne.w	8002044 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f36:	4b89      	ldr	r3, [pc, #548]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d005      	beq.n	8001f4e <HAL_RCC_OscConfig+0x62>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e3a2      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1a      	ldr	r2, [r3, #32]
 8001f52:	4b82      	ldr	r3, [pc, #520]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d004      	beq.n	8001f68 <HAL_RCC_OscConfig+0x7c>
 8001f5e:	4b7f      	ldr	r3, [pc, #508]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f66:	e005      	b.n	8001f74 <HAL_RCC_OscConfig+0x88>
 8001f68:	4b7c      	ldr	r3, [pc, #496]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f6e:	091b      	lsrs	r3, r3, #4
 8001f70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d223      	bcs.n	8001fc0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fd55 	bl	8002a2c <RCC_SetFlashLatencyFromMSIRange>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e383      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f8c:	4b73      	ldr	r3, [pc, #460]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a72      	ldr	r2, [pc, #456]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001f92:	f043 0308 	orr.w	r3, r3, #8
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	4b70      	ldr	r3, [pc, #448]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	496d      	ldr	r1, [pc, #436]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001faa:	4b6c      	ldr	r3, [pc, #432]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	4968      	ldr	r1, [pc, #416]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	604b      	str	r3, [r1, #4]
 8001fbe:	e025      	b.n	800200c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc0:	4b66      	ldr	r3, [pc, #408]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a65      	ldr	r2, [pc, #404]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001fc6:	f043 0308 	orr.w	r3, r3, #8
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	4b63      	ldr	r3, [pc, #396]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	4960      	ldr	r1, [pc, #384]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fde:	4b5f      	ldr	r3, [pc, #380]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	021b      	lsls	r3, r3, #8
 8001fec:	495b      	ldr	r1, [pc, #364]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d109      	bne.n	800200c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 fd15 	bl	8002a2c <RCC_SetFlashLatencyFromMSIRange>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e343      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800200c:	f000 fc4a 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 8002010:	4602      	mov	r2, r0
 8002012:	4b52      	ldr	r3, [pc, #328]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	f003 030f 	and.w	r3, r3, #15
 800201c:	4950      	ldr	r1, [pc, #320]	@ (8002160 <HAL_RCC_OscConfig+0x274>)
 800201e:	5ccb      	ldrb	r3, [r1, r3]
 8002020:	f003 031f 	and.w	r3, r3, #31
 8002024:	fa22 f303 	lsr.w	r3, r2, r3
 8002028:	4a4e      	ldr	r2, [pc, #312]	@ (8002164 <HAL_RCC_OscConfig+0x278>)
 800202a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800202c:	4b4e      	ldr	r3, [pc, #312]	@ (8002168 <HAL_RCC_OscConfig+0x27c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fba3 	bl	800177c <HAL_InitTick>
 8002036:	4603      	mov	r3, r0
 8002038:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d052      	beq.n	80020e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	e327      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d032      	beq.n	80020b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800204c:	4b43      	ldr	r3, [pc, #268]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a42      	ldr	r2, [pc, #264]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002058:	f7ff fbe0 	bl	800181c <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002060:	f7ff fbdc 	bl	800181c <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e310      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002072:	4b3a      	ldr	r3, [pc, #232]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800207e:	4b37      	ldr	r3, [pc, #220]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a36      	ldr	r2, [pc, #216]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8002084:	f043 0308 	orr.w	r3, r3, #8
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	4b34      	ldr	r3, [pc, #208]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	4931      	ldr	r1, [pc, #196]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800209c:	4b2f      	ldr	r3, [pc, #188]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	021b      	lsls	r3, r3, #8
 80020aa:	492c      	ldr	r1, [pc, #176]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
 80020b0:	e01a      	b.n	80020e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020b2:	4b2a      	ldr	r3, [pc, #168]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a29      	ldr	r2, [pc, #164]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020be:	f7ff fbad 	bl	800181c <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020c6:	f7ff fba9 	bl	800181c <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e2dd      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020d8:	4b20      	ldr	r3, [pc, #128]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f0      	bne.n	80020c6 <HAL_RCC_OscConfig+0x1da>
 80020e4:	e000      	b.n	80020e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d074      	beq.n	80021de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d005      	beq.n	8002106 <HAL_RCC_OscConfig+0x21a>
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	2b0c      	cmp	r3, #12
 80020fe:	d10e      	bne.n	800211e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	2b03      	cmp	r3, #3
 8002104:	d10b      	bne.n	800211e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002106:	4b15      	ldr	r3, [pc, #84]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d064      	beq.n	80021dc <HAL_RCC_OscConfig+0x2f0>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d160      	bne.n	80021dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e2ba      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002126:	d106      	bne.n	8002136 <HAL_RCC_OscConfig+0x24a>
 8002128:	4b0c      	ldr	r3, [pc, #48]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0b      	ldr	r2, [pc, #44]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 800212e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	e026      	b.n	8002184 <HAL_RCC_OscConfig+0x298>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800213e:	d115      	bne.n	800216c <HAL_RCC_OscConfig+0x280>
 8002140:	4b06      	ldr	r3, [pc, #24]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a05      	ldr	r2, [pc, #20]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8002146:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	4b03      	ldr	r3, [pc, #12]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a02      	ldr	r2, [pc, #8]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8002152:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	e014      	b.n	8002184 <HAL_RCC_OscConfig+0x298>
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000
 8002160:	0800985c 	.word	0x0800985c
 8002164:	20000020 	.word	0x20000020
 8002168:	20000024 	.word	0x20000024
 800216c:	4ba0      	ldr	r3, [pc, #640]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a9f      	ldr	r2, [pc, #636]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4b9d      	ldr	r3, [pc, #628]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a9c      	ldr	r2, [pc, #624]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 800217e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d013      	beq.n	80021b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff fb46 	bl	800181c <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002194:	f7ff fb42 	bl	800181c <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	@ 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e276      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a6:	4b92      	ldr	r3, [pc, #584]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x2a8>
 80021b2:	e014      	b.n	80021de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7ff fb32 	bl	800181c <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021bc:	f7ff fb2e 	bl	800181c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	@ 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e262      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ce:	4b88      	ldr	r3, [pc, #544]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x2d0>
 80021da:	e000      	b.n	80021de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d060      	beq.n	80022ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_OscConfig+0x310>
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	2b0c      	cmp	r3, #12
 80021f4:	d119      	bne.n	800222a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d116      	bne.n	800222a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021fc:	4b7c      	ldr	r3, [pc, #496]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_RCC_OscConfig+0x328>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e23f      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002214:	4b76      	ldr	r3, [pc, #472]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	061b      	lsls	r3, r3, #24
 8002222:	4973      	ldr	r1, [pc, #460]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002228:	e040      	b.n	80022ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d023      	beq.n	800227a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002232:	4b6f      	ldr	r3, [pc, #444]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a6e      	ldr	r2, [pc, #440]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800223c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223e:	f7ff faed 	bl	800181c <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002246:	f7ff fae9 	bl	800181c <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e21d      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002258:	4b65      	ldr	r3, [pc, #404]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002264:	4b62      	ldr	r3, [pc, #392]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	061b      	lsls	r3, r3, #24
 8002272:	495f      	ldr	r1, [pc, #380]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
 8002278:	e018      	b.n	80022ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800227a:	4b5d      	ldr	r3, [pc, #372]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a5c      	ldr	r2, [pc, #368]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002286:	f7ff fac9 	bl	800181c <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228e:	f7ff fac5 	bl	800181c <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e1f9      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022a0:	4b53      	ldr	r3, [pc, #332]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1f0      	bne.n	800228e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d03c      	beq.n	8002332 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d01c      	beq.n	80022fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c0:	4b4b      	ldr	r3, [pc, #300]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80022c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022c6:	4a4a      	ldr	r2, [pc, #296]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d0:	f7ff faa4 	bl	800181c <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d8:	f7ff faa0 	bl	800181c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e1d4      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022ea:	4b41      	ldr	r3, [pc, #260]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80022ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0ef      	beq.n	80022d8 <HAL_RCC_OscConfig+0x3ec>
 80022f8:	e01b      	b.n	8002332 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fa:	4b3d      	ldr	r3, [pc, #244]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80022fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002300:	4a3b      	ldr	r2, [pc, #236]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002302:	f023 0301 	bic.w	r3, r3, #1
 8002306:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230a:	f7ff fa87 	bl	800181c <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002312:	f7ff fa83 	bl	800181c <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e1b7      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002324:	4b32      	ldr	r3, [pc, #200]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002326:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1ef      	bne.n	8002312 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 80a6 	beq.w	800248c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002340:	2300      	movs	r3, #0
 8002342:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002344:	4b2a      	ldr	r3, [pc, #168]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10d      	bne.n	800236c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002350:	4b27      	ldr	r3, [pc, #156]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002354:	4a26      	ldr	r2, [pc, #152]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002356:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800235a:	6593      	str	r3, [r2, #88]	@ 0x58
 800235c:	4b24      	ldr	r3, [pc, #144]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 800235e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002368:	2301      	movs	r3, #1
 800236a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800236c:	4b21      	ldr	r3, [pc, #132]	@ (80023f4 <HAL_RCC_OscConfig+0x508>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d118      	bne.n	80023aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002378:	4b1e      	ldr	r3, [pc, #120]	@ (80023f4 <HAL_RCC_OscConfig+0x508>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a1d      	ldr	r2, [pc, #116]	@ (80023f4 <HAL_RCC_OscConfig+0x508>)
 800237e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002382:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002384:	f7ff fa4a 	bl	800181c <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238c:	f7ff fa46 	bl	800181c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e17a      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239e:	4b15      	ldr	r3, [pc, #84]	@ (80023f4 <HAL_RCC_OscConfig+0x508>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d108      	bne.n	80023c4 <HAL_RCC_OscConfig+0x4d8>
 80023b2:	4b0f      	ldr	r3, [pc, #60]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b8:	4a0d      	ldr	r2, [pc, #52]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023c2:	e029      	b.n	8002418 <HAL_RCC_OscConfig+0x52c>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b05      	cmp	r3, #5
 80023ca:	d115      	bne.n	80023f8 <HAL_RCC_OscConfig+0x50c>
 80023cc:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d2:	4a07      	ldr	r2, [pc, #28]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023dc:	4b04      	ldr	r3, [pc, #16]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e2:	4a03      	ldr	r2, [pc, #12]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023ec:	e014      	b.n	8002418 <HAL_RCC_OscConfig+0x52c>
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40007000 	.word	0x40007000
 80023f8:	4b9c      	ldr	r3, [pc, #624]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 80023fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023fe:	4a9b      	ldr	r2, [pc, #620]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002408:	4b98      	ldr	r3, [pc, #608]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800240e:	4a97      	ldr	r2, [pc, #604]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 8002410:	f023 0304 	bic.w	r3, r3, #4
 8002414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d016      	beq.n	800244e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002420:	f7ff f9fc 	bl	800181c <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002426:	e00a      	b.n	800243e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002428:	f7ff f9f8 	bl	800181c <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e12a      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243e:	4b8b      	ldr	r3, [pc, #556]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 8002440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ed      	beq.n	8002428 <HAL_RCC_OscConfig+0x53c>
 800244c:	e015      	b.n	800247a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244e:	f7ff f9e5 	bl	800181c <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002454:	e00a      	b.n	800246c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002456:	f7ff f9e1 	bl	800181c <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002464:	4293      	cmp	r3, r2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e113      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800246c:	4b7f      	ldr	r3, [pc, #508]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1ed      	bne.n	8002456 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800247a:	7ffb      	ldrb	r3, [r7, #31]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d105      	bne.n	800248c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002480:	4b7a      	ldr	r3, [pc, #488]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 8002482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002484:	4a79      	ldr	r2, [pc, #484]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 8002486:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800248a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80fe 	beq.w	8002692 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249a:	2b02      	cmp	r3, #2
 800249c:	f040 80d0 	bne.w	8002640 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024a0:	4b72      	ldr	r3, [pc, #456]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f003 0203 	and.w	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d130      	bne.n	8002516 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	3b01      	subs	r3, #1
 80024c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d127      	bne.n	8002516 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d11f      	bne.n	8002516 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80024e0:	2a07      	cmp	r2, #7
 80024e2:	bf14      	ite	ne
 80024e4:	2201      	movne	r2, #1
 80024e6:	2200      	moveq	r2, #0
 80024e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d113      	bne.n	8002516 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f8:	085b      	lsrs	r3, r3, #1
 80024fa:	3b01      	subs	r3, #1
 80024fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024fe:	429a      	cmp	r2, r3
 8002500:	d109      	bne.n	8002516 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250c:	085b      	lsrs	r3, r3, #1
 800250e:	3b01      	subs	r3, #1
 8002510:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d06e      	beq.n	80025f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	2b0c      	cmp	r3, #12
 800251a:	d069      	beq.n	80025f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800251c:	4b53      	ldr	r3, [pc, #332]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d105      	bne.n	8002534 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002528:	4b50      	ldr	r3, [pc, #320]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0ad      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002538:	4b4c      	ldr	r3, [pc, #304]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a4b      	ldr	r2, [pc, #300]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 800253e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002542:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002544:	f7ff f96a 	bl	800181c <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254c:	f7ff f966 	bl	800181c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e09a      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800255e:	4b43      	ldr	r3, [pc, #268]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800256a:	4b40      	ldr	r3, [pc, #256]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	4b40      	ldr	r3, [pc, #256]	@ (8002670 <HAL_RCC_OscConfig+0x784>)
 8002570:	4013      	ands	r3, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800257a:	3a01      	subs	r2, #1
 800257c:	0112      	lsls	r2, r2, #4
 800257e:	4311      	orrs	r1, r2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002584:	0212      	lsls	r2, r2, #8
 8002586:	4311      	orrs	r1, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800258c:	0852      	lsrs	r2, r2, #1
 800258e:	3a01      	subs	r2, #1
 8002590:	0552      	lsls	r2, r2, #21
 8002592:	4311      	orrs	r1, r2
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002598:	0852      	lsrs	r2, r2, #1
 800259a:	3a01      	subs	r2, #1
 800259c:	0652      	lsls	r2, r2, #25
 800259e:	4311      	orrs	r1, r2
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80025a4:	0912      	lsrs	r2, r2, #4
 80025a6:	0452      	lsls	r2, r2, #17
 80025a8:	430a      	orrs	r2, r1
 80025aa:	4930      	ldr	r1, [pc, #192]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025b0:	4b2e      	ldr	r3, [pc, #184]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a2d      	ldr	r2, [pc, #180]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 80025b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025bc:	4b2b      	ldr	r3, [pc, #172]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	4a2a      	ldr	r2, [pc, #168]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 80025c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025c8:	f7ff f928 	bl	800181c <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d0:	f7ff f924 	bl	800181c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e058      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e2:	4b22      	ldr	r3, [pc, #136]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025ee:	e050      	b.n	8002692 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e04f      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f4:	4b1d      	ldr	r3, [pc, #116]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d148      	bne.n	8002692 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002600:	4b1a      	ldr	r3, [pc, #104]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a19      	ldr	r2, [pc, #100]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 8002606:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800260a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800260c:	4b17      	ldr	r3, [pc, #92]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	4a16      	ldr	r2, [pc, #88]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 8002612:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002616:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002618:	f7ff f900 	bl	800181c <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002620:	f7ff f8fc 	bl	800181c <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e030      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002632:	4b0e      	ldr	r3, [pc, #56]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x734>
 800263e:	e028      	b.n	8002692 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2b0c      	cmp	r3, #12
 8002644:	d023      	beq.n	800268e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002646:	4b09      	ldr	r3, [pc, #36]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a08      	ldr	r2, [pc, #32]	@ (800266c <HAL_RCC_OscConfig+0x780>)
 800264c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002652:	f7ff f8e3 	bl	800181c <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002658:	e00c      	b.n	8002674 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265a:	f7ff f8df 	bl	800181c <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d905      	bls.n	8002674 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e013      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
 800266c:	40021000 	.word	0x40021000
 8002670:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002674:	4b09      	ldr	r3, [pc, #36]	@ (800269c <HAL_RCC_OscConfig+0x7b0>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1ec      	bne.n	800265a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002680:	4b06      	ldr	r3, [pc, #24]	@ (800269c <HAL_RCC_OscConfig+0x7b0>)
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	4905      	ldr	r1, [pc, #20]	@ (800269c <HAL_RCC_OscConfig+0x7b0>)
 8002686:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <HAL_RCC_OscConfig+0x7b4>)
 8002688:	4013      	ands	r3, r2
 800268a:	60cb      	str	r3, [r1, #12]
 800268c:	e001      	b.n	8002692 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3720      	adds	r7, #32
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000
 80026a0:	feeefffc 	.word	0xfeeefffc

080026a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0e7      	b.n	8002888 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026b8:	4b75      	ldr	r3, [pc, #468]	@ (8002890 <HAL_RCC_ClockConfig+0x1ec>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d910      	bls.n	80026e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c6:	4b72      	ldr	r3, [pc, #456]	@ (8002890 <HAL_RCC_ClockConfig+0x1ec>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 0207 	bic.w	r2, r3, #7
 80026ce:	4970      	ldr	r1, [pc, #448]	@ (8002890 <HAL_RCC_ClockConfig+0x1ec>)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	4b6e      	ldr	r3, [pc, #440]	@ (8002890 <HAL_RCC_ClockConfig+0x1ec>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0cf      	b.n	8002888 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d010      	beq.n	8002716 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	4b66      	ldr	r3, [pc, #408]	@ (8002894 <HAL_RCC_ClockConfig+0x1f0>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002700:	429a      	cmp	r2, r3
 8002702:	d908      	bls.n	8002716 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002704:	4b63      	ldr	r3, [pc, #396]	@ (8002894 <HAL_RCC_ClockConfig+0x1f0>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4960      	ldr	r1, [pc, #384]	@ (8002894 <HAL_RCC_ClockConfig+0x1f0>)
 8002712:	4313      	orrs	r3, r2
 8002714:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d04c      	beq.n	80027bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b03      	cmp	r3, #3
 8002728:	d107      	bne.n	800273a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800272a:	4b5a      	ldr	r3, [pc, #360]	@ (8002894 <HAL_RCC_ClockConfig+0x1f0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d121      	bne.n	800277a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e0a6      	b.n	8002888 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d107      	bne.n	8002752 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002742:	4b54      	ldr	r3, [pc, #336]	@ (8002894 <HAL_RCC_ClockConfig+0x1f0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d115      	bne.n	800277a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e09a      	b.n	8002888 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d107      	bne.n	800276a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800275a:	4b4e      	ldr	r3, [pc, #312]	@ (8002894 <HAL_RCC_ClockConfig+0x1f0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d109      	bne.n	800277a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e08e      	b.n	8002888 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800276a:	4b4a      	ldr	r3, [pc, #296]	@ (8002894 <HAL_RCC_ClockConfig+0x1f0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e086      	b.n	8002888 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800277a:	4b46      	ldr	r3, [pc, #280]	@ (8002894 <HAL_RCC_ClockConfig+0x1f0>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f023 0203 	bic.w	r2, r3, #3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	4943      	ldr	r1, [pc, #268]	@ (8002894 <HAL_RCC_ClockConfig+0x1f0>)
 8002788:	4313      	orrs	r3, r2
 800278a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800278c:	f7ff f846 	bl	800181c <HAL_GetTick>
 8002790:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002792:	e00a      	b.n	80027aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002794:	f7ff f842 	bl	800181c <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e06e      	b.n	8002888 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002894 <HAL_RCC_ClockConfig+0x1f0>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 020c 	and.w	r2, r3, #12
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d1eb      	bne.n	8002794 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d010      	beq.n	80027ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	4b31      	ldr	r3, [pc, #196]	@ (8002894 <HAL_RCC_ClockConfig+0x1f0>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d208      	bcs.n	80027ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002894 <HAL_RCC_ClockConfig+0x1f0>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	492b      	ldr	r1, [pc, #172]	@ (8002894 <HAL_RCC_ClockConfig+0x1f0>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027ea:	4b29      	ldr	r3, [pc, #164]	@ (8002890 <HAL_RCC_ClockConfig+0x1ec>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d210      	bcs.n	800281a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f8:	4b25      	ldr	r3, [pc, #148]	@ (8002890 <HAL_RCC_ClockConfig+0x1ec>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f023 0207 	bic.w	r2, r3, #7
 8002800:	4923      	ldr	r1, [pc, #140]	@ (8002890 <HAL_RCC_ClockConfig+0x1ec>)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	4313      	orrs	r3, r2
 8002806:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002808:	4b21      	ldr	r3, [pc, #132]	@ (8002890 <HAL_RCC_ClockConfig+0x1ec>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d001      	beq.n	800281a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e036      	b.n	8002888 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b00      	cmp	r3, #0
 8002824:	d008      	beq.n	8002838 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002826:	4b1b      	ldr	r3, [pc, #108]	@ (8002894 <HAL_RCC_ClockConfig+0x1f0>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	4918      	ldr	r1, [pc, #96]	@ (8002894 <HAL_RCC_ClockConfig+0x1f0>)
 8002834:	4313      	orrs	r3, r2
 8002836:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b00      	cmp	r3, #0
 8002842:	d009      	beq.n	8002858 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002844:	4b13      	ldr	r3, [pc, #76]	@ (8002894 <HAL_RCC_ClockConfig+0x1f0>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4910      	ldr	r1, [pc, #64]	@ (8002894 <HAL_RCC_ClockConfig+0x1f0>)
 8002854:	4313      	orrs	r3, r2
 8002856:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002858:	f000 f824 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 800285c:	4602      	mov	r2, r0
 800285e:	4b0d      	ldr	r3, [pc, #52]	@ (8002894 <HAL_RCC_ClockConfig+0x1f0>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	091b      	lsrs	r3, r3, #4
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	490b      	ldr	r1, [pc, #44]	@ (8002898 <HAL_RCC_ClockConfig+0x1f4>)
 800286a:	5ccb      	ldrb	r3, [r1, r3]
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	fa22 f303 	lsr.w	r3, r2, r3
 8002874:	4a09      	ldr	r2, [pc, #36]	@ (800289c <HAL_RCC_ClockConfig+0x1f8>)
 8002876:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002878:	4b09      	ldr	r3, [pc, #36]	@ (80028a0 <HAL_RCC_ClockConfig+0x1fc>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7fe ff7d 	bl	800177c <HAL_InitTick>
 8002882:	4603      	mov	r3, r0
 8002884:	72fb      	strb	r3, [r7, #11]

  return status;
 8002886:	7afb      	ldrb	r3, [r7, #11]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40022000 	.word	0x40022000
 8002894:	40021000 	.word	0x40021000
 8002898:	0800985c 	.word	0x0800985c
 800289c:	20000020 	.word	0x20000020
 80028a0:	20000024 	.word	0x20000024

080028a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b089      	sub	sp, #36	@ 0x24
 80028a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b2:	4b3e      	ldr	r3, [pc, #248]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x108>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028bc:	4b3b      	ldr	r3, [pc, #236]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x108>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0x34>
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	2b0c      	cmp	r3, #12
 80028d0:	d121      	bne.n	8002916 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d11e      	bne.n	8002916 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028d8:	4b34      	ldr	r3, [pc, #208]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x108>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d107      	bne.n	80028f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028e4:	4b31      	ldr	r3, [pc, #196]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x108>)
 80028e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	61fb      	str	r3, [r7, #28]
 80028f2:	e005      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028f4:	4b2d      	ldr	r3, [pc, #180]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x108>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	091b      	lsrs	r3, r3, #4
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002900:	4a2b      	ldr	r2, [pc, #172]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002908:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10d      	bne.n	800292c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002914:	e00a      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b04      	cmp	r3, #4
 800291a:	d102      	bne.n	8002922 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800291c:	4b25      	ldr	r3, [pc, #148]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800291e:	61bb      	str	r3, [r7, #24]
 8002920:	e004      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	2b08      	cmp	r3, #8
 8002926:	d101      	bne.n	800292c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002928:	4b23      	ldr	r3, [pc, #140]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800292a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	2b0c      	cmp	r3, #12
 8002930:	d134      	bne.n	800299c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002932:	4b1e      	ldr	r3, [pc, #120]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d003      	beq.n	800294a <HAL_RCC_GetSysClockFreq+0xa6>
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b03      	cmp	r3, #3
 8002946:	d003      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0xac>
 8002948:	e005      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800294a:	4b1a      	ldr	r3, [pc, #104]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800294c:	617b      	str	r3, [r7, #20]
      break;
 800294e:	e005      	b.n	800295c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002950:	4b19      	ldr	r3, [pc, #100]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002952:	617b      	str	r3, [r7, #20]
      break;
 8002954:	e002      	b.n	800295c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	617b      	str	r3, [r7, #20]
      break;
 800295a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800295c:	4b13      	ldr	r3, [pc, #76]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x108>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	3301      	adds	r3, #1
 8002968:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800296a:	4b10      	ldr	r3, [pc, #64]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x108>)
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	fb03 f202 	mul.w	r2, r3, r2
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002980:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002982:	4b0a      	ldr	r3, [pc, #40]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	0e5b      	lsrs	r3, r3, #25
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	3301      	adds	r3, #1
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	fbb2 f3f3 	udiv	r3, r2, r3
 800299a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800299c:	69bb      	ldr	r3, [r7, #24]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3724      	adds	r7, #36	@ 0x24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000
 80029b0:	08009874 	.word	0x08009874
 80029b4:	00f42400 	.word	0x00f42400
 80029b8:	007a1200 	.word	0x007a1200

080029bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c0:	4b03      	ldr	r3, [pc, #12]	@ (80029d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	20000020 	.word	0x20000020

080029d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029d8:	f7ff fff0 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 80029dc:	4602      	mov	r2, r0
 80029de:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	0a1b      	lsrs	r3, r3, #8
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	4904      	ldr	r1, [pc, #16]	@ (80029fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80029ea:	5ccb      	ldrb	r3, [r1, r3]
 80029ec:	f003 031f 	and.w	r3, r3, #31
 80029f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40021000 	.word	0x40021000
 80029fc:	0800986c 	.word	0x0800986c

08002a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a04:	f7ff ffda 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	4b06      	ldr	r3, [pc, #24]	@ (8002a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	0adb      	lsrs	r3, r3, #11
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	4904      	ldr	r1, [pc, #16]	@ (8002a28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a16:	5ccb      	ldrb	r3, [r1, r3]
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40021000 	.word	0x40021000
 8002a28:	0800986c 	.word	0x0800986c

08002a2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a34:	2300      	movs	r3, #0
 8002a36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a38:	4b2a      	ldr	r3, [pc, #168]	@ (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a44:	f7ff f9ee 	bl	8001e24 <HAL_PWREx_GetVoltageRange>
 8002a48:	6178      	str	r0, [r7, #20]
 8002a4a:	e014      	b.n	8002a76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a4c:	4b25      	ldr	r3, [pc, #148]	@ (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a50:	4a24      	ldr	r2, [pc, #144]	@ (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a56:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a58:	4b22      	ldr	r3, [pc, #136]	@ (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a64:	f7ff f9de 	bl	8001e24 <HAL_PWREx_GetVoltageRange>
 8002a68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a74:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a7c:	d10b      	bne.n	8002a96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b80      	cmp	r3, #128	@ 0x80
 8002a82:	d919      	bls.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a88:	d902      	bls.n	8002a90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	e013      	b.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a90:	2301      	movs	r3, #1
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	e010      	b.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b80      	cmp	r3, #128	@ 0x80
 8002a9a:	d902      	bls.n	8002aa2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	e00a      	b.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b80      	cmp	r3, #128	@ 0x80
 8002aa6:	d102      	bne.n	8002aae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	e004      	b.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b70      	cmp	r3, #112	@ 0x70
 8002ab2:	d101      	bne.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f023 0207 	bic.w	r2, r3, #7
 8002ac0:	4909      	ldr	r1, [pc, #36]	@ (8002ae8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ac8:	4b07      	ldr	r3, [pc, #28]	@ (8002ae8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d001      	beq.n	8002ada <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40022000 	.word	0x40022000

08002aec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002af4:	2300      	movs	r3, #0
 8002af6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002af8:	2300      	movs	r3, #0
 8002afa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d041      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b0c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002b10:	d02a      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b12:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002b16:	d824      	bhi.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b1c:	d008      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b22:	d81e      	bhi.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00a      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b2c:	d010      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b2e:	e018      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b30:	4b86      	ldr	r3, [pc, #536]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4a85      	ldr	r2, [pc, #532]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b3a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b3c:	e015      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3304      	adds	r3, #4
 8002b42:	2100      	movs	r1, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 fabb 	bl	80030c0 <RCCEx_PLLSAI1_Config>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b4e:	e00c      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3320      	adds	r3, #32
 8002b54:	2100      	movs	r1, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fba6 	bl	80032a8 <RCCEx_PLLSAI2_Config>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b60:	e003      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	74fb      	strb	r3, [r7, #19]
      break;
 8002b66:	e000      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b6a:	7cfb      	ldrb	r3, [r7, #19]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10b      	bne.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b70:	4b76      	ldr	r3, [pc, #472]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b76:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b7e:	4973      	ldr	r1, [pc, #460]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002b86:	e001      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b88:	7cfb      	ldrb	r3, [r7, #19]
 8002b8a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d041      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ba0:	d02a      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002ba2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ba6:	d824      	bhi.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ba8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002bac:	d008      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002bae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002bb2:	d81e      	bhi.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002bb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bbc:	d010      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bbe:	e018      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bc0:	4b62      	ldr	r3, [pc, #392]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	4a61      	ldr	r2, [pc, #388]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bcc:	e015      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 fa73 	bl	80030c0 <RCCEx_PLLSAI1_Config>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bde:	e00c      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3320      	adds	r3, #32
 8002be4:	2100      	movs	r1, #0
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 fb5e 	bl	80032a8 <RCCEx_PLLSAI2_Config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bf0:	e003      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	74fb      	strb	r3, [r7, #19]
      break;
 8002bf6:	e000      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002bf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bfa:	7cfb      	ldrb	r3, [r7, #19]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10b      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c00:	4b52      	ldr	r3, [pc, #328]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c06:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c0e:	494f      	ldr	r1, [pc, #316]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002c16:	e001      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c18:	7cfb      	ldrb	r3, [r7, #19]
 8002c1a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80a0 	beq.w	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c2e:	4b47      	ldr	r3, [pc, #284]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00d      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c44:	4b41      	ldr	r3, [pc, #260]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c48:	4a40      	ldr	r2, [pc, #256]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c50:	4b3e      	ldr	r3, [pc, #248]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c60:	4b3b      	ldr	r3, [pc, #236]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a3a      	ldr	r2, [pc, #232]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c6c:	f7fe fdd6 	bl	800181c <HAL_GetTick>
 8002c70:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c72:	e009      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c74:	f7fe fdd2 	bl	800181c <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d902      	bls.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	74fb      	strb	r3, [r7, #19]
        break;
 8002c86:	e005      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c88:	4b31      	ldr	r3, [pc, #196]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0ef      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002c94:	7cfb      	ldrb	r3, [r7, #19]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d15c      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ca4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01f      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d019      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cb8:	4b24      	ldr	r3, [pc, #144]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cc4:	4b21      	ldr	r3, [pc, #132]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cca:	4a20      	ldr	r2, [pc, #128]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cda:	4a1c      	ldr	r2, [pc, #112]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ce0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ce4:	4a19      	ldr	r2, [pc, #100]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d016      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf6:	f7fe fd91 	bl	800181c <HAL_GetTick>
 8002cfa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cfc:	e00b      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfe:	f7fe fd8d 	bl	800181c <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d902      	bls.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	74fb      	strb	r3, [r7, #19]
            break;
 8002d14:	e006      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d16:	4b0d      	ldr	r3, [pc, #52]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0ec      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d24:	7cfb      	ldrb	r3, [r7, #19]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10c      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d2a:	4b08      	ldr	r3, [pc, #32]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d3a:	4904      	ldr	r1, [pc, #16]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d42:	e009      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d44:	7cfb      	ldrb	r3, [r7, #19]
 8002d46:	74bb      	strb	r3, [r7, #18]
 8002d48:	e006      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d4a:	bf00      	nop
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d54:	7cfb      	ldrb	r3, [r7, #19]
 8002d56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d58:	7c7b      	ldrb	r3, [r7, #17]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d105      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d5e:	4b9e      	ldr	r3, [pc, #632]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d62:	4a9d      	ldr	r2, [pc, #628]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d68:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d76:	4b98      	ldr	r3, [pc, #608]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7c:	f023 0203 	bic.w	r2, r3, #3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d84:	4994      	ldr	r1, [pc, #592]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d98:	4b8f      	ldr	r3, [pc, #572]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9e:	f023 020c 	bic.w	r2, r3, #12
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da6:	498c      	ldr	r1, [pc, #560]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dba:	4b87      	ldr	r3, [pc, #540]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc8:	4983      	ldr	r1, [pc, #524]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ddc:	4b7e      	ldr	r3, [pc, #504]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dea:	497b      	ldr	r1, [pc, #492]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dfe:	4b76      	ldr	r3, [pc, #472]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e0c:	4972      	ldr	r1, [pc, #456]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0320 	and.w	r3, r3, #32
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e20:	4b6d      	ldr	r3, [pc, #436]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e26:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2e:	496a      	ldr	r1, [pc, #424]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e42:	4b65      	ldr	r3, [pc, #404]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e50:	4961      	ldr	r1, [pc, #388]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e64:	4b5c      	ldr	r3, [pc, #368]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e72:	4959      	ldr	r1, [pc, #356]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e86:	4b54      	ldr	r3, [pc, #336]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e8c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e94:	4950      	ldr	r1, [pc, #320]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00a      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ea8:	4b4b      	ldr	r3, [pc, #300]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb6:	4948      	ldr	r1, [pc, #288]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eca:	4b43      	ldr	r3, [pc, #268]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed8:	493f      	ldr	r1, [pc, #252]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d028      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002eec:	4b3a      	ldr	r3, [pc, #232]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002efa:	4937      	ldr	r1, [pc, #220]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f0a:	d106      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f0c:	4b32      	ldr	r3, [pc, #200]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4a31      	ldr	r2, [pc, #196]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f16:	60d3      	str	r3, [r2, #12]
 8002f18:	e011      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f22:	d10c      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3304      	adds	r3, #4
 8002f28:	2101      	movs	r1, #1
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 f8c8 	bl	80030c0 <RCCEx_PLLSAI1_Config>
 8002f30:	4603      	mov	r3, r0
 8002f32:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f34:	7cfb      	ldrb	r3, [r7, #19]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f3a:	7cfb      	ldrb	r3, [r7, #19]
 8002f3c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d028      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f4a:	4b23      	ldr	r3, [pc, #140]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f50:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f58:	491f      	ldr	r1, [pc, #124]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f68:	d106      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f74:	60d3      	str	r3, [r2, #12]
 8002f76:	e011      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3304      	adds	r3, #4
 8002f86:	2101      	movs	r1, #1
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 f899 	bl	80030c0 <RCCEx_PLLSAI1_Config>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f92:	7cfb      	ldrb	r3, [r7, #19]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002f98:	7cfb      	ldrb	r3, [r7, #19]
 8002f9a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d02b      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fb6:	4908      	ldr	r1, [pc, #32]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fc6:	d109      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fc8:	4b03      	ldr	r3, [pc, #12]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4a02      	ldr	r2, [pc, #8]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fd2:	60d3      	str	r3, [r2, #12]
 8002fd4:	e014      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002fd6:	bf00      	nop
 8002fd8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fe0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	2101      	movs	r1, #1
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 f867 	bl	80030c0 <RCCEx_PLLSAI1_Config>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ff6:	7cfb      	ldrb	r3, [r7, #19]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ffc:	7cfb      	ldrb	r3, [r7, #19]
 8002ffe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d02f      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800300c:	4b2b      	ldr	r3, [pc, #172]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800300e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003012:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800301a:	4928      	ldr	r1, [pc, #160]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003026:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800302a:	d10d      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3304      	adds	r3, #4
 8003030:	2102      	movs	r1, #2
 8003032:	4618      	mov	r0, r3
 8003034:	f000 f844 	bl	80030c0 <RCCEx_PLLSAI1_Config>
 8003038:	4603      	mov	r3, r0
 800303a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800303c:	7cfb      	ldrb	r3, [r7, #19]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d014      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003042:	7cfb      	ldrb	r3, [r7, #19]
 8003044:	74bb      	strb	r3, [r7, #18]
 8003046:	e011      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800304c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003050:	d10c      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3320      	adds	r3, #32
 8003056:	2102      	movs	r1, #2
 8003058:	4618      	mov	r0, r3
 800305a:	f000 f925 	bl	80032a8 <RCCEx_PLLSAI2_Config>
 800305e:	4603      	mov	r3, r0
 8003060:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003062:	7cfb      	ldrb	r3, [r7, #19]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003068:	7cfb      	ldrb	r3, [r7, #19]
 800306a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003078:	4b10      	ldr	r3, [pc, #64]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003086:	490d      	ldr	r1, [pc, #52]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00b      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800309a:	4b08      	ldr	r3, [pc, #32]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800309c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030aa:	4904      	ldr	r1, [pc, #16]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40021000 	.word	0x40021000

080030c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030ce:	4b75      	ldr	r3, [pc, #468]	@ (80032a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d018      	beq.n	800310c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030da:	4b72      	ldr	r3, [pc, #456]	@ (80032a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f003 0203 	and.w	r2, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d10d      	bne.n	8003106 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
       ||
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030f2:	4b6c      	ldr	r3, [pc, #432]	@ (80032a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	091b      	lsrs	r3, r3, #4
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
       ||
 8003102:	429a      	cmp	r2, r3
 8003104:	d047      	beq.n	8003196 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	73fb      	strb	r3, [r7, #15]
 800310a:	e044      	b.n	8003196 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b03      	cmp	r3, #3
 8003112:	d018      	beq.n	8003146 <RCCEx_PLLSAI1_Config+0x86>
 8003114:	2b03      	cmp	r3, #3
 8003116:	d825      	bhi.n	8003164 <RCCEx_PLLSAI1_Config+0xa4>
 8003118:	2b01      	cmp	r3, #1
 800311a:	d002      	beq.n	8003122 <RCCEx_PLLSAI1_Config+0x62>
 800311c:	2b02      	cmp	r3, #2
 800311e:	d009      	beq.n	8003134 <RCCEx_PLLSAI1_Config+0x74>
 8003120:	e020      	b.n	8003164 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003122:	4b60      	ldr	r3, [pc, #384]	@ (80032a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d11d      	bne.n	800316a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003132:	e01a      	b.n	800316a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003134:	4b5b      	ldr	r3, [pc, #364]	@ (80032a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800313c:	2b00      	cmp	r3, #0
 800313e:	d116      	bne.n	800316e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003144:	e013      	b.n	800316e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003146:	4b57      	ldr	r3, [pc, #348]	@ (80032a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10f      	bne.n	8003172 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003152:	4b54      	ldr	r3, [pc, #336]	@ (80032a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d109      	bne.n	8003172 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003162:	e006      	b.n	8003172 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
      break;
 8003168:	e004      	b.n	8003174 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800316a:	bf00      	nop
 800316c:	e002      	b.n	8003174 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800316e:	bf00      	nop
 8003170:	e000      	b.n	8003174 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003172:	bf00      	nop
    }

    if(status == HAL_OK)
 8003174:	7bfb      	ldrb	r3, [r7, #15]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10d      	bne.n	8003196 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800317a:	4b4a      	ldr	r3, [pc, #296]	@ (80032a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6819      	ldr	r1, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	3b01      	subs	r3, #1
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	430b      	orrs	r3, r1
 8003190:	4944      	ldr	r1, [pc, #272]	@ (80032a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003192:	4313      	orrs	r3, r2
 8003194:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d17d      	bne.n	8003298 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800319c:	4b41      	ldr	r3, [pc, #260]	@ (80032a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a40      	ldr	r2, [pc, #256]	@ (80032a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80031a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031a8:	f7fe fb38 	bl	800181c <HAL_GetTick>
 80031ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031ae:	e009      	b.n	80031c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031b0:	f7fe fb34 	bl	800181c <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d902      	bls.n	80031c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	73fb      	strb	r3, [r7, #15]
        break;
 80031c2:	e005      	b.n	80031d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031c4:	4b37      	ldr	r3, [pc, #220]	@ (80032a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1ef      	bne.n	80031b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d160      	bne.n	8003298 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d111      	bne.n	8003200 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031dc:	4b31      	ldr	r3, [pc, #196]	@ (80032a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80031e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6892      	ldr	r2, [r2, #8]
 80031ec:	0211      	lsls	r1, r2, #8
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68d2      	ldr	r2, [r2, #12]
 80031f2:	0912      	lsrs	r2, r2, #4
 80031f4:	0452      	lsls	r2, r2, #17
 80031f6:	430a      	orrs	r2, r1
 80031f8:	492a      	ldr	r1, [pc, #168]	@ (80032a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	610b      	str	r3, [r1, #16]
 80031fe:	e027      	b.n	8003250 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d112      	bne.n	800322c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003206:	4b27      	ldr	r3, [pc, #156]	@ (80032a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800320e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6892      	ldr	r2, [r2, #8]
 8003216:	0211      	lsls	r1, r2, #8
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6912      	ldr	r2, [r2, #16]
 800321c:	0852      	lsrs	r2, r2, #1
 800321e:	3a01      	subs	r2, #1
 8003220:	0552      	lsls	r2, r2, #21
 8003222:	430a      	orrs	r2, r1
 8003224:	491f      	ldr	r1, [pc, #124]	@ (80032a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003226:	4313      	orrs	r3, r2
 8003228:	610b      	str	r3, [r1, #16]
 800322a:	e011      	b.n	8003250 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800322c:	4b1d      	ldr	r3, [pc, #116]	@ (80032a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003234:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6892      	ldr	r2, [r2, #8]
 800323c:	0211      	lsls	r1, r2, #8
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6952      	ldr	r2, [r2, #20]
 8003242:	0852      	lsrs	r2, r2, #1
 8003244:	3a01      	subs	r2, #1
 8003246:	0652      	lsls	r2, r2, #25
 8003248:	430a      	orrs	r2, r1
 800324a:	4916      	ldr	r1, [pc, #88]	@ (80032a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800324c:	4313      	orrs	r3, r2
 800324e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003250:	4b14      	ldr	r3, [pc, #80]	@ (80032a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a13      	ldr	r2, [pc, #76]	@ (80032a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003256:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800325a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325c:	f7fe fade 	bl	800181c <HAL_GetTick>
 8003260:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003262:	e009      	b.n	8003278 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003264:	f7fe fada 	bl	800181c <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d902      	bls.n	8003278 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	73fb      	strb	r3, [r7, #15]
          break;
 8003276:	e005      	b.n	8003284 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003278:	4b0a      	ldr	r3, [pc, #40]	@ (80032a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0ef      	beq.n	8003264 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d106      	bne.n	8003298 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800328a:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800328c:	691a      	ldr	r2, [r3, #16]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	4904      	ldr	r1, [pc, #16]	@ (80032a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003294:	4313      	orrs	r3, r2
 8003296:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003298:	7bfb      	ldrb	r3, [r7, #15]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000

080032a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003460 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d018      	beq.n	80032f4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80032c2:	4b67      	ldr	r3, [pc, #412]	@ (8003460 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f003 0203 	and.w	r2, r3, #3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d10d      	bne.n	80032ee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
       ||
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d009      	beq.n	80032ee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80032da:	4b61      	ldr	r3, [pc, #388]	@ (8003460 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	091b      	lsrs	r3, r3, #4
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
       ||
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d047      	beq.n	800337e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	73fb      	strb	r3, [r7, #15]
 80032f2:	e044      	b.n	800337e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d018      	beq.n	800332e <RCCEx_PLLSAI2_Config+0x86>
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d825      	bhi.n	800334c <RCCEx_PLLSAI2_Config+0xa4>
 8003300:	2b01      	cmp	r3, #1
 8003302:	d002      	beq.n	800330a <RCCEx_PLLSAI2_Config+0x62>
 8003304:	2b02      	cmp	r3, #2
 8003306:	d009      	beq.n	800331c <RCCEx_PLLSAI2_Config+0x74>
 8003308:	e020      	b.n	800334c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800330a:	4b55      	ldr	r3, [pc, #340]	@ (8003460 <RCCEx_PLLSAI2_Config+0x1b8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d11d      	bne.n	8003352 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800331a:	e01a      	b.n	8003352 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800331c:	4b50      	ldr	r3, [pc, #320]	@ (8003460 <RCCEx_PLLSAI2_Config+0x1b8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003324:	2b00      	cmp	r3, #0
 8003326:	d116      	bne.n	8003356 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800332c:	e013      	b.n	8003356 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800332e:	4b4c      	ldr	r3, [pc, #304]	@ (8003460 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10f      	bne.n	800335a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800333a:	4b49      	ldr	r3, [pc, #292]	@ (8003460 <RCCEx_PLLSAI2_Config+0x1b8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d109      	bne.n	800335a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800334a:	e006      	b.n	800335a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
      break;
 8003350:	e004      	b.n	800335c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003352:	bf00      	nop
 8003354:	e002      	b.n	800335c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003356:	bf00      	nop
 8003358:	e000      	b.n	800335c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800335a:	bf00      	nop
    }

    if(status == HAL_OK)
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10d      	bne.n	800337e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003362:	4b3f      	ldr	r3, [pc, #252]	@ (8003460 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6819      	ldr	r1, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	3b01      	subs	r3, #1
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	430b      	orrs	r3, r1
 8003378:	4939      	ldr	r1, [pc, #228]	@ (8003460 <RCCEx_PLLSAI2_Config+0x1b8>)
 800337a:	4313      	orrs	r3, r2
 800337c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800337e:	7bfb      	ldrb	r3, [r7, #15]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d167      	bne.n	8003454 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003384:	4b36      	ldr	r3, [pc, #216]	@ (8003460 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a35      	ldr	r2, [pc, #212]	@ (8003460 <RCCEx_PLLSAI2_Config+0x1b8>)
 800338a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800338e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003390:	f7fe fa44 	bl	800181c <HAL_GetTick>
 8003394:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003396:	e009      	b.n	80033ac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003398:	f7fe fa40 	bl	800181c <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d902      	bls.n	80033ac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	73fb      	strb	r3, [r7, #15]
        break;
 80033aa:	e005      	b.n	80033b8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003460 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1ef      	bne.n	8003398 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d14a      	bne.n	8003454 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d111      	bne.n	80033e8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033c4:	4b26      	ldr	r3, [pc, #152]	@ (8003460 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80033cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6892      	ldr	r2, [r2, #8]
 80033d4:	0211      	lsls	r1, r2, #8
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	68d2      	ldr	r2, [r2, #12]
 80033da:	0912      	lsrs	r2, r2, #4
 80033dc:	0452      	lsls	r2, r2, #17
 80033de:	430a      	orrs	r2, r1
 80033e0:	491f      	ldr	r1, [pc, #124]	@ (8003460 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	614b      	str	r3, [r1, #20]
 80033e6:	e011      	b.n	800340c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003460 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80033f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6892      	ldr	r2, [r2, #8]
 80033f8:	0211      	lsls	r1, r2, #8
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6912      	ldr	r2, [r2, #16]
 80033fe:	0852      	lsrs	r2, r2, #1
 8003400:	3a01      	subs	r2, #1
 8003402:	0652      	lsls	r2, r2, #25
 8003404:	430a      	orrs	r2, r1
 8003406:	4916      	ldr	r1, [pc, #88]	@ (8003460 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003408:	4313      	orrs	r3, r2
 800340a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800340c:	4b14      	ldr	r3, [pc, #80]	@ (8003460 <RCCEx_PLLSAI2_Config+0x1b8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a13      	ldr	r2, [pc, #76]	@ (8003460 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003412:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003416:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003418:	f7fe fa00 	bl	800181c <HAL_GetTick>
 800341c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800341e:	e009      	b.n	8003434 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003420:	f7fe f9fc 	bl	800181c <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d902      	bls.n	8003434 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	73fb      	strb	r3, [r7, #15]
          break;
 8003432:	e005      	b.n	8003440 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003434:	4b0a      	ldr	r3, [pc, #40]	@ (8003460 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0ef      	beq.n	8003420 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d106      	bne.n	8003454 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003446:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003448:	695a      	ldr	r2, [r3, #20]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	4904      	ldr	r1, [pc, #16]	@ (8003460 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003450:	4313      	orrs	r3, r2
 8003452:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003454:	7bfb      	ldrb	r3, [r7, #15]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40021000 	.word	0x40021000

08003464 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e049      	b.n	800350a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fd fff6 	bl	800147c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3304      	adds	r3, #4
 80034a0:	4619      	mov	r1, r3
 80034a2:	4610      	mov	r0, r2
 80034a4:	f000 fb8a 	bl	8003bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d109      	bne.n	8003538 <HAL_TIM_PWM_Start+0x24>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	bf14      	ite	ne
 8003530:	2301      	movne	r3, #1
 8003532:	2300      	moveq	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	e03c      	b.n	80035b2 <HAL_TIM_PWM_Start+0x9e>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2b04      	cmp	r3, #4
 800353c:	d109      	bne.n	8003552 <HAL_TIM_PWM_Start+0x3e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b01      	cmp	r3, #1
 8003548:	bf14      	ite	ne
 800354a:	2301      	movne	r3, #1
 800354c:	2300      	moveq	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	e02f      	b.n	80035b2 <HAL_TIM_PWM_Start+0x9e>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b08      	cmp	r3, #8
 8003556:	d109      	bne.n	800356c <HAL_TIM_PWM_Start+0x58>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b01      	cmp	r3, #1
 8003562:	bf14      	ite	ne
 8003564:	2301      	movne	r3, #1
 8003566:	2300      	moveq	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	e022      	b.n	80035b2 <HAL_TIM_PWM_Start+0x9e>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2b0c      	cmp	r3, #12
 8003570:	d109      	bne.n	8003586 <HAL_TIM_PWM_Start+0x72>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b01      	cmp	r3, #1
 800357c:	bf14      	ite	ne
 800357e:	2301      	movne	r3, #1
 8003580:	2300      	moveq	r3, #0
 8003582:	b2db      	uxtb	r3, r3
 8003584:	e015      	b.n	80035b2 <HAL_TIM_PWM_Start+0x9e>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b10      	cmp	r3, #16
 800358a:	d109      	bne.n	80035a0 <HAL_TIM_PWM_Start+0x8c>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	bf14      	ite	ne
 8003598:	2301      	movne	r3, #1
 800359a:	2300      	moveq	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	e008      	b.n	80035b2 <HAL_TIM_PWM_Start+0x9e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	bf14      	ite	ne
 80035ac:	2301      	movne	r3, #1
 80035ae:	2300      	moveq	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e09c      	b.n	80036f4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d104      	bne.n	80035ca <HAL_TIM_PWM_Start+0xb6>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035c8:	e023      	b.n	8003612 <HAL_TIM_PWM_Start+0xfe>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d104      	bne.n	80035da <HAL_TIM_PWM_Start+0xc6>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035d8:	e01b      	b.n	8003612 <HAL_TIM_PWM_Start+0xfe>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d104      	bne.n	80035ea <HAL_TIM_PWM_Start+0xd6>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035e8:	e013      	b.n	8003612 <HAL_TIM_PWM_Start+0xfe>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b0c      	cmp	r3, #12
 80035ee:	d104      	bne.n	80035fa <HAL_TIM_PWM_Start+0xe6>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035f8:	e00b      	b.n	8003612 <HAL_TIM_PWM_Start+0xfe>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b10      	cmp	r3, #16
 80035fe:	d104      	bne.n	800360a <HAL_TIM_PWM_Start+0xf6>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003608:	e003      	b.n	8003612 <HAL_TIM_PWM_Start+0xfe>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2202      	movs	r2, #2
 800360e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2201      	movs	r2, #1
 8003618:	6839      	ldr	r1, [r7, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fe4a 	bl	80042b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a35      	ldr	r2, [pc, #212]	@ (80036fc <HAL_TIM_PWM_Start+0x1e8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d013      	beq.n	8003652 <HAL_TIM_PWM_Start+0x13e>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a34      	ldr	r2, [pc, #208]	@ (8003700 <HAL_TIM_PWM_Start+0x1ec>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00e      	beq.n	8003652 <HAL_TIM_PWM_Start+0x13e>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a32      	ldr	r2, [pc, #200]	@ (8003704 <HAL_TIM_PWM_Start+0x1f0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d009      	beq.n	8003652 <HAL_TIM_PWM_Start+0x13e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a31      	ldr	r2, [pc, #196]	@ (8003708 <HAL_TIM_PWM_Start+0x1f4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d004      	beq.n	8003652 <HAL_TIM_PWM_Start+0x13e>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a2f      	ldr	r2, [pc, #188]	@ (800370c <HAL_TIM_PWM_Start+0x1f8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d101      	bne.n	8003656 <HAL_TIM_PWM_Start+0x142>
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <HAL_TIM_PWM_Start+0x144>
 8003656:	2300      	movs	r3, #0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d007      	beq.n	800366c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800366a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a22      	ldr	r2, [pc, #136]	@ (80036fc <HAL_TIM_PWM_Start+0x1e8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d01d      	beq.n	80036b2 <HAL_TIM_PWM_Start+0x19e>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800367e:	d018      	beq.n	80036b2 <HAL_TIM_PWM_Start+0x19e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a22      	ldr	r2, [pc, #136]	@ (8003710 <HAL_TIM_PWM_Start+0x1fc>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_TIM_PWM_Start+0x19e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a21      	ldr	r2, [pc, #132]	@ (8003714 <HAL_TIM_PWM_Start+0x200>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00e      	beq.n	80036b2 <HAL_TIM_PWM_Start+0x19e>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1f      	ldr	r2, [pc, #124]	@ (8003718 <HAL_TIM_PWM_Start+0x204>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d009      	beq.n	80036b2 <HAL_TIM_PWM_Start+0x19e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a17      	ldr	r2, [pc, #92]	@ (8003700 <HAL_TIM_PWM_Start+0x1ec>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_TIM_PWM_Start+0x19e>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a15      	ldr	r2, [pc, #84]	@ (8003704 <HAL_TIM_PWM_Start+0x1f0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d115      	bne.n	80036de <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	4b18      	ldr	r3, [pc, #96]	@ (800371c <HAL_TIM_PWM_Start+0x208>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b06      	cmp	r3, #6
 80036c2:	d015      	beq.n	80036f0 <HAL_TIM_PWM_Start+0x1dc>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036ca:	d011      	beq.n	80036f0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036dc:	e008      	b.n	80036f0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0201 	orr.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	e000      	b.n	80036f2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40012c00 	.word	0x40012c00
 8003700:	40013400 	.word	0x40013400
 8003704:	40014000 	.word	0x40014000
 8003708:	40014400 	.word	0x40014400
 800370c:	40014800 	.word	0x40014800
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800
 8003718:	40000c00 	.word	0x40000c00
 800371c:	00010007 	.word	0x00010007

08003720 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d020      	beq.n	8003784 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d01b      	beq.n	8003784 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0202 	mvn.w	r2, #2
 8003754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fa08 	bl	8003b80 <HAL_TIM_IC_CaptureCallback>
 8003770:	e005      	b.n	800377e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f9fa 	bl	8003b6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fa0b 	bl	8003b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	d020      	beq.n	80037d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01b      	beq.n	80037d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0204 	mvn.w	r2, #4
 80037a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f9e2 	bl	8003b80 <HAL_TIM_IC_CaptureCallback>
 80037bc:	e005      	b.n	80037ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f9d4 	bl	8003b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f9e5 	bl	8003b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d020      	beq.n	800381c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01b      	beq.n	800381c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0208 	mvn.w	r2, #8
 80037ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2204      	movs	r2, #4
 80037f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f9bc 	bl	8003b80 <HAL_TIM_IC_CaptureCallback>
 8003808:	e005      	b.n	8003816 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f9ae 	bl	8003b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f9bf 	bl	8003b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b00      	cmp	r3, #0
 8003824:	d020      	beq.n	8003868 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b00      	cmp	r3, #0
 800382e:	d01b      	beq.n	8003868 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0210 	mvn.w	r2, #16
 8003838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2208      	movs	r2, #8
 800383e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f996 	bl	8003b80 <HAL_TIM_IC_CaptureCallback>
 8003854:	e005      	b.n	8003862 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f988 	bl	8003b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f999 	bl	8003b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00c      	beq.n	800388c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d007      	beq.n	800388c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0201 	mvn.w	r2, #1
 8003884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f966 	bl	8003b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003892:	2b00      	cmp	r3, #0
 8003894:	d104      	bne.n	80038a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00c      	beq.n	80038ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80038b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 fdb5 	bl	8004424 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00c      	beq.n	80038de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d007      	beq.n	80038de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80038d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fdad 	bl	8004438 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00c      	beq.n	8003902 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d007      	beq.n	8003902 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f953 	bl	8003ba8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f003 0320 	and.w	r3, r3, #32
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00c      	beq.n	8003926 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b00      	cmp	r3, #0
 8003914:	d007      	beq.n	8003926 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f06f 0220 	mvn.w	r2, #32
 800391e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fd75 	bl	8004410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003926:	bf00      	nop
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800394a:	2302      	movs	r3, #2
 800394c:	e0ff      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b14      	cmp	r3, #20
 800395a:	f200 80f0 	bhi.w	8003b3e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800395e:	a201      	add	r2, pc, #4	@ (adr r2, 8003964 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003964:	080039b9 	.word	0x080039b9
 8003968:	08003b3f 	.word	0x08003b3f
 800396c:	08003b3f 	.word	0x08003b3f
 8003970:	08003b3f 	.word	0x08003b3f
 8003974:	080039f9 	.word	0x080039f9
 8003978:	08003b3f 	.word	0x08003b3f
 800397c:	08003b3f 	.word	0x08003b3f
 8003980:	08003b3f 	.word	0x08003b3f
 8003984:	08003a3b 	.word	0x08003a3b
 8003988:	08003b3f 	.word	0x08003b3f
 800398c:	08003b3f 	.word	0x08003b3f
 8003990:	08003b3f 	.word	0x08003b3f
 8003994:	08003a7b 	.word	0x08003a7b
 8003998:	08003b3f 	.word	0x08003b3f
 800399c:	08003b3f 	.word	0x08003b3f
 80039a0:	08003b3f 	.word	0x08003b3f
 80039a4:	08003abd 	.word	0x08003abd
 80039a8:	08003b3f 	.word	0x08003b3f
 80039ac:	08003b3f 	.word	0x08003b3f
 80039b0:	08003b3f 	.word	0x08003b3f
 80039b4:	08003afd 	.word	0x08003afd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 f9a2 	bl	8003d08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0208 	orr.w	r2, r2, #8
 80039d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699a      	ldr	r2, [r3, #24]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0204 	bic.w	r2, r2, #4
 80039e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6999      	ldr	r1, [r3, #24]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	691a      	ldr	r2, [r3, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	619a      	str	r2, [r3, #24]
      break;
 80039f6:	e0a5      	b.n	8003b44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fa12 	bl	8003e28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6999      	ldr	r1, [r3, #24]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	021a      	lsls	r2, r3, #8
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	619a      	str	r2, [r3, #24]
      break;
 8003a38:	e084      	b.n	8003b44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68b9      	ldr	r1, [r7, #8]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fa7b 	bl	8003f3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69da      	ldr	r2, [r3, #28]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0208 	orr.w	r2, r2, #8
 8003a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69da      	ldr	r2, [r3, #28]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0204 	bic.w	r2, r2, #4
 8003a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	69d9      	ldr	r1, [r3, #28]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	61da      	str	r2, [r3, #28]
      break;
 8003a78:	e064      	b.n	8003b44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 fae3 	bl	800404c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69da      	ldr	r2, [r3, #28]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69da      	ldr	r2, [r3, #28]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69d9      	ldr	r1, [r3, #28]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	021a      	lsls	r2, r3, #8
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	61da      	str	r2, [r3, #28]
      break;
 8003aba:	e043      	b.n	8003b44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fb2c 	bl	8004120 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0208 	orr.w	r2, r2, #8
 8003ad6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0204 	bic.w	r2, r2, #4
 8003ae6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	691a      	ldr	r2, [r3, #16]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003afa:	e023      	b.n	8003b44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fb70 	bl	80041e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b16:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b26:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	021a      	lsls	r2, r3, #8
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003b3c:	e002      	b.n	8003b44 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	75fb      	strb	r3, [r7, #23]
      break;
 8003b42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop

08003b58 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a46      	ldr	r2, [pc, #280]	@ (8003ce8 <TIM_Base_SetConfig+0x12c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d013      	beq.n	8003bfc <TIM_Base_SetConfig+0x40>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bda:	d00f      	beq.n	8003bfc <TIM_Base_SetConfig+0x40>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a43      	ldr	r2, [pc, #268]	@ (8003cec <TIM_Base_SetConfig+0x130>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00b      	beq.n	8003bfc <TIM_Base_SetConfig+0x40>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a42      	ldr	r2, [pc, #264]	@ (8003cf0 <TIM_Base_SetConfig+0x134>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d007      	beq.n	8003bfc <TIM_Base_SetConfig+0x40>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a41      	ldr	r2, [pc, #260]	@ (8003cf4 <TIM_Base_SetConfig+0x138>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d003      	beq.n	8003bfc <TIM_Base_SetConfig+0x40>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a40      	ldr	r2, [pc, #256]	@ (8003cf8 <TIM_Base_SetConfig+0x13c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d108      	bne.n	8003c0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a35      	ldr	r2, [pc, #212]	@ (8003ce8 <TIM_Base_SetConfig+0x12c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01f      	beq.n	8003c56 <TIM_Base_SetConfig+0x9a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c1c:	d01b      	beq.n	8003c56 <TIM_Base_SetConfig+0x9a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a32      	ldr	r2, [pc, #200]	@ (8003cec <TIM_Base_SetConfig+0x130>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d017      	beq.n	8003c56 <TIM_Base_SetConfig+0x9a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a31      	ldr	r2, [pc, #196]	@ (8003cf0 <TIM_Base_SetConfig+0x134>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d013      	beq.n	8003c56 <TIM_Base_SetConfig+0x9a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a30      	ldr	r2, [pc, #192]	@ (8003cf4 <TIM_Base_SetConfig+0x138>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00f      	beq.n	8003c56 <TIM_Base_SetConfig+0x9a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a2f      	ldr	r2, [pc, #188]	@ (8003cf8 <TIM_Base_SetConfig+0x13c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00b      	beq.n	8003c56 <TIM_Base_SetConfig+0x9a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a2e      	ldr	r2, [pc, #184]	@ (8003cfc <TIM_Base_SetConfig+0x140>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d007      	beq.n	8003c56 <TIM_Base_SetConfig+0x9a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a2d      	ldr	r2, [pc, #180]	@ (8003d00 <TIM_Base_SetConfig+0x144>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d003      	beq.n	8003c56 <TIM_Base_SetConfig+0x9a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a2c      	ldr	r2, [pc, #176]	@ (8003d04 <TIM_Base_SetConfig+0x148>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d108      	bne.n	8003c68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a16      	ldr	r2, [pc, #88]	@ (8003ce8 <TIM_Base_SetConfig+0x12c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00f      	beq.n	8003cb4 <TIM_Base_SetConfig+0xf8>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a18      	ldr	r2, [pc, #96]	@ (8003cf8 <TIM_Base_SetConfig+0x13c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00b      	beq.n	8003cb4 <TIM_Base_SetConfig+0xf8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a17      	ldr	r2, [pc, #92]	@ (8003cfc <TIM_Base_SetConfig+0x140>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d007      	beq.n	8003cb4 <TIM_Base_SetConfig+0xf8>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a16      	ldr	r2, [pc, #88]	@ (8003d00 <TIM_Base_SetConfig+0x144>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d003      	beq.n	8003cb4 <TIM_Base_SetConfig+0xf8>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a15      	ldr	r2, [pc, #84]	@ (8003d04 <TIM_Base_SetConfig+0x148>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d103      	bne.n	8003cbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d105      	bne.n	8003cda <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f023 0201 	bic.w	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	611a      	str	r2, [r3, #16]
  }
}
 8003cda:	bf00      	nop
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40012c00 	.word	0x40012c00
 8003cec:	40000400 	.word	0x40000400
 8003cf0:	40000800 	.word	0x40000800
 8003cf4:	40000c00 	.word	0x40000c00
 8003cf8:	40013400 	.word	0x40013400
 8003cfc:	40014000 	.word	0x40014000
 8003d00:	40014400 	.word	0x40014400
 8003d04:	40014800 	.word	0x40014800

08003d08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	f023 0201 	bic.w	r2, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0303 	bic.w	r3, r3, #3
 8003d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f023 0302 	bic.w	r3, r3, #2
 8003d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a2c      	ldr	r2, [pc, #176]	@ (8003e14 <TIM_OC1_SetConfig+0x10c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00f      	beq.n	8003d88 <TIM_OC1_SetConfig+0x80>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a2b      	ldr	r2, [pc, #172]	@ (8003e18 <TIM_OC1_SetConfig+0x110>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00b      	beq.n	8003d88 <TIM_OC1_SetConfig+0x80>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a2a      	ldr	r2, [pc, #168]	@ (8003e1c <TIM_OC1_SetConfig+0x114>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d007      	beq.n	8003d88 <TIM_OC1_SetConfig+0x80>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a29      	ldr	r2, [pc, #164]	@ (8003e20 <TIM_OC1_SetConfig+0x118>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d003      	beq.n	8003d88 <TIM_OC1_SetConfig+0x80>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a28      	ldr	r2, [pc, #160]	@ (8003e24 <TIM_OC1_SetConfig+0x11c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d10c      	bne.n	8003da2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f023 0308 	bic.w	r3, r3, #8
 8003d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f023 0304 	bic.w	r3, r3, #4
 8003da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1b      	ldr	r2, [pc, #108]	@ (8003e14 <TIM_OC1_SetConfig+0x10c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00f      	beq.n	8003dca <TIM_OC1_SetConfig+0xc2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1a      	ldr	r2, [pc, #104]	@ (8003e18 <TIM_OC1_SetConfig+0x110>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00b      	beq.n	8003dca <TIM_OC1_SetConfig+0xc2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a19      	ldr	r2, [pc, #100]	@ (8003e1c <TIM_OC1_SetConfig+0x114>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d007      	beq.n	8003dca <TIM_OC1_SetConfig+0xc2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a18      	ldr	r2, [pc, #96]	@ (8003e20 <TIM_OC1_SetConfig+0x118>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d003      	beq.n	8003dca <TIM_OC1_SetConfig+0xc2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a17      	ldr	r2, [pc, #92]	@ (8003e24 <TIM_OC1_SetConfig+0x11c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d111      	bne.n	8003dee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	621a      	str	r2, [r3, #32]
}
 8003e08:	bf00      	nop
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	40012c00 	.word	0x40012c00
 8003e18:	40013400 	.word	0x40013400
 8003e1c:	40014000 	.word	0x40014000
 8003e20:	40014400 	.word	0x40014400
 8003e24:	40014800 	.word	0x40014800

08003e28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	f023 0210 	bic.w	r2, r3, #16
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	021b      	lsls	r3, r3, #8
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f023 0320 	bic.w	r3, r3, #32
 8003e76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a28      	ldr	r2, [pc, #160]	@ (8003f28 <TIM_OC2_SetConfig+0x100>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d003      	beq.n	8003e94 <TIM_OC2_SetConfig+0x6c>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a27      	ldr	r2, [pc, #156]	@ (8003f2c <TIM_OC2_SetConfig+0x104>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d10d      	bne.n	8003eb0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003eae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8003f28 <TIM_OC2_SetConfig+0x100>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d00f      	beq.n	8003ed8 <TIM_OC2_SetConfig+0xb0>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a1c      	ldr	r2, [pc, #112]	@ (8003f2c <TIM_OC2_SetConfig+0x104>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00b      	beq.n	8003ed8 <TIM_OC2_SetConfig+0xb0>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f30 <TIM_OC2_SetConfig+0x108>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d007      	beq.n	8003ed8 <TIM_OC2_SetConfig+0xb0>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a1a      	ldr	r2, [pc, #104]	@ (8003f34 <TIM_OC2_SetConfig+0x10c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d003      	beq.n	8003ed8 <TIM_OC2_SetConfig+0xb0>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a19      	ldr	r2, [pc, #100]	@ (8003f38 <TIM_OC2_SetConfig+0x110>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d113      	bne.n	8003f00 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ede:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	621a      	str	r2, [r3, #32]
}
 8003f1a:	bf00      	nop
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40012c00 	.word	0x40012c00
 8003f2c:	40013400 	.word	0x40013400
 8003f30:	40014000 	.word	0x40014000
 8003f34:	40014400 	.word	0x40014400
 8003f38:	40014800 	.word	0x40014800

08003f3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0303 	bic.w	r3, r3, #3
 8003f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	021b      	lsls	r3, r3, #8
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a27      	ldr	r2, [pc, #156]	@ (8004038 <TIM_OC3_SetConfig+0xfc>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d003      	beq.n	8003fa6 <TIM_OC3_SetConfig+0x6a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a26      	ldr	r2, [pc, #152]	@ (800403c <TIM_OC3_SetConfig+0x100>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d10d      	bne.n	8003fc2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	021b      	lsls	r3, r3, #8
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8004038 <TIM_OC3_SetConfig+0xfc>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00f      	beq.n	8003fea <TIM_OC3_SetConfig+0xae>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800403c <TIM_OC3_SetConfig+0x100>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00b      	beq.n	8003fea <TIM_OC3_SetConfig+0xae>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a1a      	ldr	r2, [pc, #104]	@ (8004040 <TIM_OC3_SetConfig+0x104>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d007      	beq.n	8003fea <TIM_OC3_SetConfig+0xae>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a19      	ldr	r2, [pc, #100]	@ (8004044 <TIM_OC3_SetConfig+0x108>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d003      	beq.n	8003fea <TIM_OC3_SetConfig+0xae>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a18      	ldr	r2, [pc, #96]	@ (8004048 <TIM_OC3_SetConfig+0x10c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d113      	bne.n	8004012 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	621a      	str	r2, [r3, #32]
}
 800402c:	bf00      	nop
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	40012c00 	.word	0x40012c00
 800403c:	40013400 	.word	0x40013400
 8004040:	40014000 	.word	0x40014000
 8004044:	40014400 	.word	0x40014400
 8004048:	40014800 	.word	0x40014800

0800404c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800407a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800407e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	021b      	lsls	r3, r3, #8
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800409a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	031b      	lsls	r3, r3, #12
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a18      	ldr	r2, [pc, #96]	@ (800410c <TIM_OC4_SetConfig+0xc0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d00f      	beq.n	80040d0 <TIM_OC4_SetConfig+0x84>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a17      	ldr	r2, [pc, #92]	@ (8004110 <TIM_OC4_SetConfig+0xc4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00b      	beq.n	80040d0 <TIM_OC4_SetConfig+0x84>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a16      	ldr	r2, [pc, #88]	@ (8004114 <TIM_OC4_SetConfig+0xc8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d007      	beq.n	80040d0 <TIM_OC4_SetConfig+0x84>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a15      	ldr	r2, [pc, #84]	@ (8004118 <TIM_OC4_SetConfig+0xcc>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d003      	beq.n	80040d0 <TIM_OC4_SetConfig+0x84>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a14      	ldr	r2, [pc, #80]	@ (800411c <TIM_OC4_SetConfig+0xd0>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d109      	bne.n	80040e4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	019b      	lsls	r3, r3, #6
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	621a      	str	r2, [r3, #32]
}
 80040fe:	bf00      	nop
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40012c00 	.word	0x40012c00
 8004110:	40013400 	.word	0x40013400
 8004114:	40014000 	.word	0x40014000
 8004118:	40014400 	.word	0x40014400
 800411c:	40014800 	.word	0x40014800

08004120 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800414e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004164:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	041b      	lsls	r3, r3, #16
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a17      	ldr	r2, [pc, #92]	@ (80041d4 <TIM_OC5_SetConfig+0xb4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00f      	beq.n	800419a <TIM_OC5_SetConfig+0x7a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a16      	ldr	r2, [pc, #88]	@ (80041d8 <TIM_OC5_SetConfig+0xb8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00b      	beq.n	800419a <TIM_OC5_SetConfig+0x7a>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a15      	ldr	r2, [pc, #84]	@ (80041dc <TIM_OC5_SetConfig+0xbc>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d007      	beq.n	800419a <TIM_OC5_SetConfig+0x7a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a14      	ldr	r2, [pc, #80]	@ (80041e0 <TIM_OC5_SetConfig+0xc0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d003      	beq.n	800419a <TIM_OC5_SetConfig+0x7a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a13      	ldr	r2, [pc, #76]	@ (80041e4 <TIM_OC5_SetConfig+0xc4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d109      	bne.n	80041ae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	021b      	lsls	r3, r3, #8
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	621a      	str	r2, [r3, #32]
}
 80041c8:	bf00      	nop
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	40012c00 	.word	0x40012c00
 80041d8:	40013400 	.word	0x40013400
 80041dc:	40014000 	.word	0x40014000
 80041e0:	40014400 	.word	0x40014400
 80041e4:	40014800 	.word	0x40014800

080041e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800420e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800421a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	021b      	lsls	r3, r3, #8
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	4313      	orrs	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800422e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	051b      	lsls	r3, r3, #20
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a18      	ldr	r2, [pc, #96]	@ (80042a0 <TIM_OC6_SetConfig+0xb8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00f      	beq.n	8004264 <TIM_OC6_SetConfig+0x7c>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a17      	ldr	r2, [pc, #92]	@ (80042a4 <TIM_OC6_SetConfig+0xbc>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00b      	beq.n	8004264 <TIM_OC6_SetConfig+0x7c>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a16      	ldr	r2, [pc, #88]	@ (80042a8 <TIM_OC6_SetConfig+0xc0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d007      	beq.n	8004264 <TIM_OC6_SetConfig+0x7c>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a15      	ldr	r2, [pc, #84]	@ (80042ac <TIM_OC6_SetConfig+0xc4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d003      	beq.n	8004264 <TIM_OC6_SetConfig+0x7c>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a14      	ldr	r2, [pc, #80]	@ (80042b0 <TIM_OC6_SetConfig+0xc8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d109      	bne.n	8004278 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800426a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	029b      	lsls	r3, r3, #10
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4313      	orrs	r3, r2
 8004276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	621a      	str	r2, [r3, #32]
}
 8004292:	bf00      	nop
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	40012c00 	.word	0x40012c00
 80042a4:	40013400 	.word	0x40013400
 80042a8:	40014000 	.word	0x40014000
 80042ac:	40014400 	.word	0x40014400
 80042b0:	40014800 	.word	0x40014800

080042b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	2201      	movs	r2, #1
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a1a      	ldr	r2, [r3, #32]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	43db      	mvns	r3, r3
 80042d6:	401a      	ands	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a1a      	ldr	r2, [r3, #32]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f003 031f 	and.w	r3, r3, #31
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	fa01 f303 	lsl.w	r3, r1, r3
 80042ec:	431a      	orrs	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	621a      	str	r2, [r3, #32]
}
 80042f2:	bf00      	nop
 80042f4:	371c      	adds	r7, #28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004314:	2302      	movs	r3, #2
 8004316:	e068      	b.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a2e      	ldr	r2, [pc, #184]	@ (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d004      	beq.n	800434c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a2d      	ldr	r2, [pc, #180]	@ (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d108      	bne.n	800435e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004352:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004364:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a1e      	ldr	r2, [pc, #120]	@ (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d01d      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800438a:	d018      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a1b      	ldr	r2, [pc, #108]	@ (8004400 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d013      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a1a      	ldr	r2, [pc, #104]	@ (8004404 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d00e      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a18      	ldr	r2, [pc, #96]	@ (8004408 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d009      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a13      	ldr	r2, [pc, #76]	@ (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d004      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a14      	ldr	r2, [pc, #80]	@ (800440c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d10c      	bne.n	80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40012c00 	.word	0x40012c00
 80043fc:	40013400 	.word	0x40013400
 8004400:	40000400 	.word	0x40000400
 8004404:	40000800 	.word	0x40000800
 8004408:	40000c00 	.word	0x40000c00
 800440c:	40014000 	.word	0x40014000

08004410 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e040      	b.n	80044e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fd f85c 	bl	800152c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2224      	movs	r2, #36	@ 0x24
 8004478:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0201 	bic.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fb6a 	bl	8004b6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f8af 	bl	80045fc <UART_SetConfig>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e01b      	b.n	80044e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0201 	orr.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fbe9 	bl	8004cb0 <UART_CheckIdleState>
 80044de:	4603      	mov	r3, r0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08a      	sub	sp, #40	@ 0x28
 80044ec:	af02      	add	r7, sp, #8
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	4613      	mov	r3, r2
 80044f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d177      	bne.n	80045f0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <HAL_UART_Transmit+0x24>
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e070      	b.n	80045f2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2221      	movs	r2, #33	@ 0x21
 800451c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800451e:	f7fd f97d 	bl	800181c <HAL_GetTick>
 8004522:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	88fa      	ldrh	r2, [r7, #6]
 8004528:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	88fa      	ldrh	r2, [r7, #6]
 8004530:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800453c:	d108      	bne.n	8004550 <HAL_UART_Transmit+0x68>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d104      	bne.n	8004550 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004546:	2300      	movs	r3, #0
 8004548:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	61bb      	str	r3, [r7, #24]
 800454e:	e003      	b.n	8004558 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004554:	2300      	movs	r3, #0
 8004556:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004558:	e02f      	b.n	80045ba <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2200      	movs	r2, #0
 8004562:	2180      	movs	r1, #128	@ 0x80
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 fc4b 	bl	8004e00 <UART_WaitOnFlagUntilTimeout>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d004      	beq.n	800457a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2220      	movs	r2, #32
 8004574:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e03b      	b.n	80045f2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10b      	bne.n	8004598 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	881a      	ldrh	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800458c:	b292      	uxth	r2, r2
 800458e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	3302      	adds	r3, #2
 8004594:	61bb      	str	r3, [r7, #24]
 8004596:	e007      	b.n	80045a8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	781a      	ldrb	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3301      	adds	r3, #1
 80045a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1c9      	bne.n	800455a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2200      	movs	r2, #0
 80045ce:	2140      	movs	r1, #64	@ 0x40
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 fc15 	bl	8004e00 <UART_WaitOnFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d004      	beq.n	80045e6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2220      	movs	r2, #32
 80045e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e005      	b.n	80045f2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2220      	movs	r2, #32
 80045ea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	e000      	b.n	80045f2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80045f0:	2302      	movs	r3, #2
  }
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3720      	adds	r7, #32
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004600:	b08a      	sub	sp, #40	@ 0x28
 8004602:	af00      	add	r7, sp, #0
 8004604:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	431a      	orrs	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	431a      	orrs	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	4313      	orrs	r3, r2
 8004622:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	4ba4      	ldr	r3, [pc, #656]	@ (80048bc <UART_SetConfig+0x2c0>)
 800462c:	4013      	ands	r3, r2
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	6812      	ldr	r2, [r2, #0]
 8004632:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004634:	430b      	orrs	r3, r1
 8004636:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a99      	ldr	r2, [pc, #612]	@ (80048c0 <UART_SetConfig+0x2c4>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d004      	beq.n	8004668 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004664:	4313      	orrs	r3, r2
 8004666:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004678:	430a      	orrs	r2, r1
 800467a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a90      	ldr	r2, [pc, #576]	@ (80048c4 <UART_SetConfig+0x2c8>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d126      	bne.n	80046d4 <UART_SetConfig+0xd8>
 8004686:	4b90      	ldr	r3, [pc, #576]	@ (80048c8 <UART_SetConfig+0x2cc>)
 8004688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	2b03      	cmp	r3, #3
 8004692:	d81b      	bhi.n	80046cc <UART_SetConfig+0xd0>
 8004694:	a201      	add	r2, pc, #4	@ (adr r2, 800469c <UART_SetConfig+0xa0>)
 8004696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469a:	bf00      	nop
 800469c:	080046ad 	.word	0x080046ad
 80046a0:	080046bd 	.word	0x080046bd
 80046a4:	080046b5 	.word	0x080046b5
 80046a8:	080046c5 	.word	0x080046c5
 80046ac:	2301      	movs	r3, #1
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046b2:	e116      	b.n	80048e2 <UART_SetConfig+0x2e6>
 80046b4:	2302      	movs	r3, #2
 80046b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ba:	e112      	b.n	80048e2 <UART_SetConfig+0x2e6>
 80046bc:	2304      	movs	r3, #4
 80046be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046c2:	e10e      	b.n	80048e2 <UART_SetConfig+0x2e6>
 80046c4:	2308      	movs	r3, #8
 80046c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ca:	e10a      	b.n	80048e2 <UART_SetConfig+0x2e6>
 80046cc:	2310      	movs	r3, #16
 80046ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046d2:	e106      	b.n	80048e2 <UART_SetConfig+0x2e6>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a7c      	ldr	r2, [pc, #496]	@ (80048cc <UART_SetConfig+0x2d0>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d138      	bne.n	8004750 <UART_SetConfig+0x154>
 80046de:	4b7a      	ldr	r3, [pc, #488]	@ (80048c8 <UART_SetConfig+0x2cc>)
 80046e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e4:	f003 030c 	and.w	r3, r3, #12
 80046e8:	2b0c      	cmp	r3, #12
 80046ea:	d82d      	bhi.n	8004748 <UART_SetConfig+0x14c>
 80046ec:	a201      	add	r2, pc, #4	@ (adr r2, 80046f4 <UART_SetConfig+0xf8>)
 80046ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f2:	bf00      	nop
 80046f4:	08004729 	.word	0x08004729
 80046f8:	08004749 	.word	0x08004749
 80046fc:	08004749 	.word	0x08004749
 8004700:	08004749 	.word	0x08004749
 8004704:	08004739 	.word	0x08004739
 8004708:	08004749 	.word	0x08004749
 800470c:	08004749 	.word	0x08004749
 8004710:	08004749 	.word	0x08004749
 8004714:	08004731 	.word	0x08004731
 8004718:	08004749 	.word	0x08004749
 800471c:	08004749 	.word	0x08004749
 8004720:	08004749 	.word	0x08004749
 8004724:	08004741 	.word	0x08004741
 8004728:	2300      	movs	r3, #0
 800472a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800472e:	e0d8      	b.n	80048e2 <UART_SetConfig+0x2e6>
 8004730:	2302      	movs	r3, #2
 8004732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004736:	e0d4      	b.n	80048e2 <UART_SetConfig+0x2e6>
 8004738:	2304      	movs	r3, #4
 800473a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800473e:	e0d0      	b.n	80048e2 <UART_SetConfig+0x2e6>
 8004740:	2308      	movs	r3, #8
 8004742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004746:	e0cc      	b.n	80048e2 <UART_SetConfig+0x2e6>
 8004748:	2310      	movs	r3, #16
 800474a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800474e:	e0c8      	b.n	80048e2 <UART_SetConfig+0x2e6>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a5e      	ldr	r2, [pc, #376]	@ (80048d0 <UART_SetConfig+0x2d4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d125      	bne.n	80047a6 <UART_SetConfig+0x1aa>
 800475a:	4b5b      	ldr	r3, [pc, #364]	@ (80048c8 <UART_SetConfig+0x2cc>)
 800475c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004760:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004764:	2b30      	cmp	r3, #48	@ 0x30
 8004766:	d016      	beq.n	8004796 <UART_SetConfig+0x19a>
 8004768:	2b30      	cmp	r3, #48	@ 0x30
 800476a:	d818      	bhi.n	800479e <UART_SetConfig+0x1a2>
 800476c:	2b20      	cmp	r3, #32
 800476e:	d00a      	beq.n	8004786 <UART_SetConfig+0x18a>
 8004770:	2b20      	cmp	r3, #32
 8004772:	d814      	bhi.n	800479e <UART_SetConfig+0x1a2>
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <UART_SetConfig+0x182>
 8004778:	2b10      	cmp	r3, #16
 800477a:	d008      	beq.n	800478e <UART_SetConfig+0x192>
 800477c:	e00f      	b.n	800479e <UART_SetConfig+0x1a2>
 800477e:	2300      	movs	r3, #0
 8004780:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004784:	e0ad      	b.n	80048e2 <UART_SetConfig+0x2e6>
 8004786:	2302      	movs	r3, #2
 8004788:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800478c:	e0a9      	b.n	80048e2 <UART_SetConfig+0x2e6>
 800478e:	2304      	movs	r3, #4
 8004790:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004794:	e0a5      	b.n	80048e2 <UART_SetConfig+0x2e6>
 8004796:	2308      	movs	r3, #8
 8004798:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800479c:	e0a1      	b.n	80048e2 <UART_SetConfig+0x2e6>
 800479e:	2310      	movs	r3, #16
 80047a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047a4:	e09d      	b.n	80048e2 <UART_SetConfig+0x2e6>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a4a      	ldr	r2, [pc, #296]	@ (80048d4 <UART_SetConfig+0x2d8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d125      	bne.n	80047fc <UART_SetConfig+0x200>
 80047b0:	4b45      	ldr	r3, [pc, #276]	@ (80048c8 <UART_SetConfig+0x2cc>)
 80047b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80047ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80047bc:	d016      	beq.n	80047ec <UART_SetConfig+0x1f0>
 80047be:	2bc0      	cmp	r3, #192	@ 0xc0
 80047c0:	d818      	bhi.n	80047f4 <UART_SetConfig+0x1f8>
 80047c2:	2b80      	cmp	r3, #128	@ 0x80
 80047c4:	d00a      	beq.n	80047dc <UART_SetConfig+0x1e0>
 80047c6:	2b80      	cmp	r3, #128	@ 0x80
 80047c8:	d814      	bhi.n	80047f4 <UART_SetConfig+0x1f8>
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <UART_SetConfig+0x1d8>
 80047ce:	2b40      	cmp	r3, #64	@ 0x40
 80047d0:	d008      	beq.n	80047e4 <UART_SetConfig+0x1e8>
 80047d2:	e00f      	b.n	80047f4 <UART_SetConfig+0x1f8>
 80047d4:	2300      	movs	r3, #0
 80047d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047da:	e082      	b.n	80048e2 <UART_SetConfig+0x2e6>
 80047dc:	2302      	movs	r3, #2
 80047de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047e2:	e07e      	b.n	80048e2 <UART_SetConfig+0x2e6>
 80047e4:	2304      	movs	r3, #4
 80047e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ea:	e07a      	b.n	80048e2 <UART_SetConfig+0x2e6>
 80047ec:	2308      	movs	r3, #8
 80047ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047f2:	e076      	b.n	80048e2 <UART_SetConfig+0x2e6>
 80047f4:	2310      	movs	r3, #16
 80047f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047fa:	e072      	b.n	80048e2 <UART_SetConfig+0x2e6>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a35      	ldr	r2, [pc, #212]	@ (80048d8 <UART_SetConfig+0x2dc>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d12a      	bne.n	800485c <UART_SetConfig+0x260>
 8004806:	4b30      	ldr	r3, [pc, #192]	@ (80048c8 <UART_SetConfig+0x2cc>)
 8004808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004810:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004814:	d01a      	beq.n	800484c <UART_SetConfig+0x250>
 8004816:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800481a:	d81b      	bhi.n	8004854 <UART_SetConfig+0x258>
 800481c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004820:	d00c      	beq.n	800483c <UART_SetConfig+0x240>
 8004822:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004826:	d815      	bhi.n	8004854 <UART_SetConfig+0x258>
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <UART_SetConfig+0x238>
 800482c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004830:	d008      	beq.n	8004844 <UART_SetConfig+0x248>
 8004832:	e00f      	b.n	8004854 <UART_SetConfig+0x258>
 8004834:	2300      	movs	r3, #0
 8004836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800483a:	e052      	b.n	80048e2 <UART_SetConfig+0x2e6>
 800483c:	2302      	movs	r3, #2
 800483e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004842:	e04e      	b.n	80048e2 <UART_SetConfig+0x2e6>
 8004844:	2304      	movs	r3, #4
 8004846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800484a:	e04a      	b.n	80048e2 <UART_SetConfig+0x2e6>
 800484c:	2308      	movs	r3, #8
 800484e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004852:	e046      	b.n	80048e2 <UART_SetConfig+0x2e6>
 8004854:	2310      	movs	r3, #16
 8004856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800485a:	e042      	b.n	80048e2 <UART_SetConfig+0x2e6>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a17      	ldr	r2, [pc, #92]	@ (80048c0 <UART_SetConfig+0x2c4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d13a      	bne.n	80048dc <UART_SetConfig+0x2e0>
 8004866:	4b18      	ldr	r3, [pc, #96]	@ (80048c8 <UART_SetConfig+0x2cc>)
 8004868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800486c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004870:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004874:	d01a      	beq.n	80048ac <UART_SetConfig+0x2b0>
 8004876:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800487a:	d81b      	bhi.n	80048b4 <UART_SetConfig+0x2b8>
 800487c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004880:	d00c      	beq.n	800489c <UART_SetConfig+0x2a0>
 8004882:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004886:	d815      	bhi.n	80048b4 <UART_SetConfig+0x2b8>
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <UART_SetConfig+0x298>
 800488c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004890:	d008      	beq.n	80048a4 <UART_SetConfig+0x2a8>
 8004892:	e00f      	b.n	80048b4 <UART_SetConfig+0x2b8>
 8004894:	2300      	movs	r3, #0
 8004896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800489a:	e022      	b.n	80048e2 <UART_SetConfig+0x2e6>
 800489c:	2302      	movs	r3, #2
 800489e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048a2:	e01e      	b.n	80048e2 <UART_SetConfig+0x2e6>
 80048a4:	2304      	movs	r3, #4
 80048a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048aa:	e01a      	b.n	80048e2 <UART_SetConfig+0x2e6>
 80048ac:	2308      	movs	r3, #8
 80048ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048b2:	e016      	b.n	80048e2 <UART_SetConfig+0x2e6>
 80048b4:	2310      	movs	r3, #16
 80048b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ba:	e012      	b.n	80048e2 <UART_SetConfig+0x2e6>
 80048bc:	efff69f3 	.word	0xefff69f3
 80048c0:	40008000 	.word	0x40008000
 80048c4:	40013800 	.word	0x40013800
 80048c8:	40021000 	.word	0x40021000
 80048cc:	40004400 	.word	0x40004400
 80048d0:	40004800 	.word	0x40004800
 80048d4:	40004c00 	.word	0x40004c00
 80048d8:	40005000 	.word	0x40005000
 80048dc:	2310      	movs	r3, #16
 80048de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a9f      	ldr	r2, [pc, #636]	@ (8004b64 <UART_SetConfig+0x568>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d17a      	bne.n	80049e2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	d824      	bhi.n	800493e <UART_SetConfig+0x342>
 80048f4:	a201      	add	r2, pc, #4	@ (adr r2, 80048fc <UART_SetConfig+0x300>)
 80048f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fa:	bf00      	nop
 80048fc:	08004921 	.word	0x08004921
 8004900:	0800493f 	.word	0x0800493f
 8004904:	08004929 	.word	0x08004929
 8004908:	0800493f 	.word	0x0800493f
 800490c:	0800492f 	.word	0x0800492f
 8004910:	0800493f 	.word	0x0800493f
 8004914:	0800493f 	.word	0x0800493f
 8004918:	0800493f 	.word	0x0800493f
 800491c:	08004937 	.word	0x08004937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004920:	f7fe f858 	bl	80029d4 <HAL_RCC_GetPCLK1Freq>
 8004924:	61f8      	str	r0, [r7, #28]
        break;
 8004926:	e010      	b.n	800494a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004928:	4b8f      	ldr	r3, [pc, #572]	@ (8004b68 <UART_SetConfig+0x56c>)
 800492a:	61fb      	str	r3, [r7, #28]
        break;
 800492c:	e00d      	b.n	800494a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800492e:	f7fd ffb9 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 8004932:	61f8      	str	r0, [r7, #28]
        break;
 8004934:	e009      	b.n	800494a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004936:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800493a:	61fb      	str	r3, [r7, #28]
        break;
 800493c:	e005      	b.n	800494a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800493e:	2300      	movs	r3, #0
 8004940:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004948:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 80fb 	beq.w	8004b48 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	4613      	mov	r3, r2
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	4413      	add	r3, r2
 800495c:	69fa      	ldr	r2, [r7, #28]
 800495e:	429a      	cmp	r2, r3
 8004960:	d305      	bcc.n	800496e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004968:	69fa      	ldr	r2, [r7, #28]
 800496a:	429a      	cmp	r2, r3
 800496c:	d903      	bls.n	8004976 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004974:	e0e8      	b.n	8004b48 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	2200      	movs	r2, #0
 800497a:	461c      	mov	r4, r3
 800497c:	4615      	mov	r5, r2
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	022b      	lsls	r3, r5, #8
 8004988:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800498c:	0222      	lsls	r2, r4, #8
 800498e:	68f9      	ldr	r1, [r7, #12]
 8004990:	6849      	ldr	r1, [r1, #4]
 8004992:	0849      	lsrs	r1, r1, #1
 8004994:	2000      	movs	r0, #0
 8004996:	4688      	mov	r8, r1
 8004998:	4681      	mov	r9, r0
 800499a:	eb12 0a08 	adds.w	sl, r2, r8
 800499e:	eb43 0b09 	adc.w	fp, r3, r9
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	603b      	str	r3, [r7, #0]
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049b0:	4650      	mov	r0, sl
 80049b2:	4659      	mov	r1, fp
 80049b4:	f7fc f8f8 	bl	8000ba8 <__aeabi_uldivmod>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4613      	mov	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049c6:	d308      	bcc.n	80049da <UART_SetConfig+0x3de>
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049ce:	d204      	bcs.n	80049da <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	60da      	str	r2, [r3, #12]
 80049d8:	e0b6      	b.n	8004b48 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80049e0:	e0b2      	b.n	8004b48 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049ea:	d15e      	bne.n	8004aaa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80049ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d828      	bhi.n	8004a46 <UART_SetConfig+0x44a>
 80049f4:	a201      	add	r2, pc, #4	@ (adr r2, 80049fc <UART_SetConfig+0x400>)
 80049f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fa:	bf00      	nop
 80049fc:	08004a21 	.word	0x08004a21
 8004a00:	08004a29 	.word	0x08004a29
 8004a04:	08004a31 	.word	0x08004a31
 8004a08:	08004a47 	.word	0x08004a47
 8004a0c:	08004a37 	.word	0x08004a37
 8004a10:	08004a47 	.word	0x08004a47
 8004a14:	08004a47 	.word	0x08004a47
 8004a18:	08004a47 	.word	0x08004a47
 8004a1c:	08004a3f 	.word	0x08004a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a20:	f7fd ffd8 	bl	80029d4 <HAL_RCC_GetPCLK1Freq>
 8004a24:	61f8      	str	r0, [r7, #28]
        break;
 8004a26:	e014      	b.n	8004a52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a28:	f7fd ffea 	bl	8002a00 <HAL_RCC_GetPCLK2Freq>
 8004a2c:	61f8      	str	r0, [r7, #28]
        break;
 8004a2e:	e010      	b.n	8004a52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a30:	4b4d      	ldr	r3, [pc, #308]	@ (8004b68 <UART_SetConfig+0x56c>)
 8004a32:	61fb      	str	r3, [r7, #28]
        break;
 8004a34:	e00d      	b.n	8004a52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a36:	f7fd ff35 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 8004a3a:	61f8      	str	r0, [r7, #28]
        break;
 8004a3c:	e009      	b.n	8004a52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a42:	61fb      	str	r3, [r7, #28]
        break;
 8004a44:	e005      	b.n	8004a52 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d077      	beq.n	8004b48 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	005a      	lsls	r2, r3, #1
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	085b      	lsrs	r3, r3, #1
 8004a62:	441a      	add	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	2b0f      	cmp	r3, #15
 8004a72:	d916      	bls.n	8004aa2 <UART_SetConfig+0x4a6>
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a7a:	d212      	bcs.n	8004aa2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	f023 030f 	bic.w	r3, r3, #15
 8004a84:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	085b      	lsrs	r3, r3, #1
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	8afb      	ldrh	r3, [r7, #22]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	8afa      	ldrh	r2, [r7, #22]
 8004a9e:	60da      	str	r2, [r3, #12]
 8004aa0:	e052      	b.n	8004b48 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004aa8:	e04e      	b.n	8004b48 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004aaa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d827      	bhi.n	8004b02 <UART_SetConfig+0x506>
 8004ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab8 <UART_SetConfig+0x4bc>)
 8004ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab8:	08004add 	.word	0x08004add
 8004abc:	08004ae5 	.word	0x08004ae5
 8004ac0:	08004aed 	.word	0x08004aed
 8004ac4:	08004b03 	.word	0x08004b03
 8004ac8:	08004af3 	.word	0x08004af3
 8004acc:	08004b03 	.word	0x08004b03
 8004ad0:	08004b03 	.word	0x08004b03
 8004ad4:	08004b03 	.word	0x08004b03
 8004ad8:	08004afb 	.word	0x08004afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004adc:	f7fd ff7a 	bl	80029d4 <HAL_RCC_GetPCLK1Freq>
 8004ae0:	61f8      	str	r0, [r7, #28]
        break;
 8004ae2:	e014      	b.n	8004b0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ae4:	f7fd ff8c 	bl	8002a00 <HAL_RCC_GetPCLK2Freq>
 8004ae8:	61f8      	str	r0, [r7, #28]
        break;
 8004aea:	e010      	b.n	8004b0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aec:	4b1e      	ldr	r3, [pc, #120]	@ (8004b68 <UART_SetConfig+0x56c>)
 8004aee:	61fb      	str	r3, [r7, #28]
        break;
 8004af0:	e00d      	b.n	8004b0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004af2:	f7fd fed7 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 8004af6:	61f8      	str	r0, [r7, #28]
        break;
 8004af8:	e009      	b.n	8004b0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004afa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004afe:	61fb      	str	r3, [r7, #28]
        break;
 8004b00:	e005      	b.n	8004b0e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b0c:	bf00      	nop
    }

    if (pclk != 0U)
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d019      	beq.n	8004b48 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	085a      	lsrs	r2, r3, #1
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	441a      	add	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b26:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	2b0f      	cmp	r3, #15
 8004b2c:	d909      	bls.n	8004b42 <UART_SetConfig+0x546>
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b34:	d205      	bcs.n	8004b42 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	60da      	str	r2, [r3, #12]
 8004b40:	e002      	b.n	8004b48 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b54:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3728      	adds	r7, #40	@ 0x28
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b62:	bf00      	nop
 8004b64:	40008000 	.word	0x40008000
 8004b68:	00f42400 	.word	0x00f42400

08004b6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00a      	beq.n	8004bda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bde:	f003 0304 	and.w	r3, r3, #4
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c00:	f003 0310 	and.w	r3, r3, #16
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00a      	beq.n	8004c1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c22:	f003 0320 	and.w	r3, r3, #32
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00a      	beq.n	8004c40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d01a      	beq.n	8004c82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c6a:	d10a      	bne.n	8004c82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	605a      	str	r2, [r3, #4]
  }
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b098      	sub	sp, #96	@ 0x60
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cc0:	f7fc fdac 	bl	800181c <HAL_GetTick>
 8004cc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d12e      	bne.n	8004d32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f88c 	bl	8004e00 <UART_WaitOnFlagUntilTimeout>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d021      	beq.n	8004d32 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf6:	e853 3f00 	ldrex	r3, [r3]
 8004cfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d02:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d0e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d14:	e841 2300 	strex	r3, r2, [r1]
 8004d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1e6      	bne.n	8004cee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e062      	b.n	8004df8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d149      	bne.n	8004dd4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f856 	bl	8004e00 <UART_WaitOnFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d03c      	beq.n	8004dd4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	623b      	str	r3, [r7, #32]
   return(result);
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	461a      	mov	r2, r3
 8004d76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d78:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e6      	bne.n	8004d5a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3308      	adds	r3, #8
 8004d92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 0301 	bic.w	r3, r3, #1
 8004da2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3308      	adds	r3, #8
 8004daa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dac:	61fa      	str	r2, [r7, #28]
 8004dae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	69b9      	ldr	r1, [r7, #24]
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	617b      	str	r3, [r7, #20]
   return(result);
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e5      	bne.n	8004d8c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e011      	b.n	8004df8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3758      	adds	r7, #88	@ 0x58
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	603b      	str	r3, [r7, #0]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e10:	e04f      	b.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e18:	d04b      	beq.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e1a:	f7fc fcff 	bl	800181c <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d302      	bcc.n	8004e30 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e04e      	b.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0304 	and.w	r3, r3, #4
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d037      	beq.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b80      	cmp	r3, #128	@ 0x80
 8004e46:	d034      	beq.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b40      	cmp	r3, #64	@ 0x40
 8004e4c:	d031      	beq.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	d110      	bne.n	8004e7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2208      	movs	r2, #8
 8004e62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f838 	bl	8004eda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2208      	movs	r2, #8
 8004e6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e029      	b.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e8c:	d111      	bne.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 f81e 	bl	8004eda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e00f      	b.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	bf0c      	ite	eq
 8004ec2:	2301      	moveq	r3, #1
 8004ec4:	2300      	movne	r3, #0
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	79fb      	ldrb	r3, [r7, #7]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d0a0      	beq.n	8004e12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b095      	sub	sp, #84	@ 0x54
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eea:	e853 3f00 	ldrex	r3, [r3]
 8004eee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	461a      	mov	r2, r3
 8004efe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f00:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f08:	e841 2300 	strex	r3, r2, [r1]
 8004f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1e6      	bne.n	8004ee2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3308      	adds	r3, #8
 8004f1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	e853 3f00 	ldrex	r3, [r3]
 8004f22:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	f023 0301 	bic.w	r3, r3, #1
 8004f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3308      	adds	r3, #8
 8004f32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f3c:	e841 2300 	strex	r3, r2, [r1]
 8004f40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e5      	bne.n	8004f14 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d118      	bne.n	8004f82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	e853 3f00 	ldrex	r3, [r3]
 8004f5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f023 0310 	bic.w	r3, r3, #16
 8004f64:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f6e:	61bb      	str	r3, [r7, #24]
 8004f70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f72:	6979      	ldr	r1, [r7, #20]
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	e841 2300 	strex	r3, r2, [r1]
 8004f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1e6      	bne.n	8004f50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f96:	bf00      	nop
 8004f98:	3754      	adds	r7, #84	@ 0x54
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
	...

08004fa4 <sine_model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sine_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_sine_model_activations_map, 1, params)) {
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	4825      	ldr	r0, [pc, #148]	@ (8005048 <sine_model_configure_activations+0xa4>)
 8004fb4:	f000 fa48 	bl	8005448 <ai_platform_get_activations_map>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d039      	beq.n	8005032 <sine_model_configure_activations+0x8e>
    /* Updating activations (byte) offsets */
    
    serving_default_keras_tensor0_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 60);
 8004fbe:	4b22      	ldr	r3, [pc, #136]	@ (8005048 <sine_model_configure_activations+0xa4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	333c      	adds	r3, #60	@ 0x3c
 8004fc4:	4a21      	ldr	r2, [pc, #132]	@ (800504c <sine_model_configure_activations+0xa8>)
 8004fc6:	6093      	str	r3, [r2, #8]
    serving_default_keras_tensor0_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 60);
 8004fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8005048 <sine_model_configure_activations+0xa4>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	333c      	adds	r3, #60	@ 0x3c
 8004fce:	4a1f      	ldr	r2, [pc, #124]	@ (800504c <sine_model_configure_activations+0xa8>)
 8004fd0:	60d3      	str	r3, [r2, #12]
    gemm_0_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 8004fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8005048 <sine_model_configure_activations+0xa4>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3340      	adds	r3, #64	@ 0x40
 8004fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8005050 <sine_model_configure_activations+0xac>)
 8004fda:	6093      	str	r3, [r2, #8]
    gemm_0_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8004fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8005048 <sine_model_configure_activations+0xa4>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3340      	adds	r3, #64	@ 0x40
 8004fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8005050 <sine_model_configure_activations+0xac>)
 8004fe4:	60d3      	str	r3, [r2, #12]
    nl_0_nl_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 8004fe6:	4b18      	ldr	r3, [pc, #96]	@ (8005048 <sine_model_configure_activations+0xa4>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	3340      	adds	r3, #64	@ 0x40
 8004fec:	4a19      	ldr	r2, [pc, #100]	@ (8005054 <sine_model_configure_activations+0xb0>)
 8004fee:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8004ff0:	4b15      	ldr	r3, [pc, #84]	@ (8005048 <sine_model_configure_activations+0xa4>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3340      	adds	r3, #64	@ 0x40
 8004ff6:	4a17      	ldr	r2, [pc, #92]	@ (8005054 <sine_model_configure_activations+0xb0>)
 8004ff8:	60d3      	str	r3, [r2, #12]
    gemm_1_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 8004ffa:	4b13      	ldr	r3, [pc, #76]	@ (8005048 <sine_model_configure_activations+0xa4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a16      	ldr	r2, [pc, #88]	@ (8005058 <sine_model_configure_activations+0xb4>)
 8005000:	6093      	str	r3, [r2, #8]
    gemm_1_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 8005002:	4b11      	ldr	r3, [pc, #68]	@ (8005048 <sine_model_configure_activations+0xa4>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a14      	ldr	r2, [pc, #80]	@ (8005058 <sine_model_configure_activations+0xb4>)
 8005008:	60d3      	str	r3, [r2, #12]
    nl_1_nl_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 800500a:	4b0f      	ldr	r3, [pc, #60]	@ (8005048 <sine_model_configure_activations+0xa4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3340      	adds	r3, #64	@ 0x40
 8005010:	4a12      	ldr	r2, [pc, #72]	@ (800505c <sine_model_configure_activations+0xb8>)
 8005012:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8005014:	4b0c      	ldr	r3, [pc, #48]	@ (8005048 <sine_model_configure_activations+0xa4>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3340      	adds	r3, #64	@ 0x40
 800501a:	4a10      	ldr	r2, [pc, #64]	@ (800505c <sine_model_configure_activations+0xb8>)
 800501c:	60d3      	str	r3, [r2, #12]
    gemm_2_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 800501e:	4b0a      	ldr	r3, [pc, #40]	@ (8005048 <sine_model_configure_activations+0xa4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a0f      	ldr	r2, [pc, #60]	@ (8005060 <sine_model_configure_activations+0xbc>)
 8005024:	6093      	str	r3, [r2, #8]
    gemm_2_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 8005026:	4b08      	ldr	r3, [pc, #32]	@ (8005048 <sine_model_configure_activations+0xa4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a0d      	ldr	r2, [pc, #52]	@ (8005060 <sine_model_configure_activations+0xbc>)
 800502c:	60d3      	str	r3, [r2, #12]
    return true;
 800502e:	2301      	movs	r3, #1
 8005030:	e005      	b.n	800503e <sine_model_configure_activations+0x9a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8005032:	2213      	movs	r2, #19
 8005034:	2130      	movs	r1, #48	@ 0x30
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fa5a 	bl	80054f0 <ai_platform_network_set_error>
  return false;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20000984 	.word	0x20000984
 800504c:	2000002c 	.word	0x2000002c
 8005050:	2000003c 	.word	0x2000003c
 8005054:	2000004c 	.word	0x2000004c
 8005058:	2000005c 	.word	0x2000005c
 800505c:	2000006c 	.word	0x2000006c
 8005060:	2000007c 	.word	0x2000007c

08005064 <sine_model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sine_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_sine_model_weights_map, 1, params)) {
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	2101      	movs	r1, #1
 8005072:	483b      	ldr	r0, [pc, #236]	@ (8005160 <sine_model_configure_weights+0xfc>)
 8005074:	f000 f994 	bl	80053a0 <ai_platform_get_weights_map>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d065      	beq.n	800514a <sine_model_configure_weights+0xe6>
    /* Updating weights (byte) offsets */
    
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800507e:	4b39      	ldr	r3, [pc, #228]	@ (8005164 <sine_model_configure_weights+0x100>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005086:	4a37      	ldr	r2, [pc, #220]	@ (8005164 <sine_model_configure_weights+0x100>)
 8005088:	6013      	str	r3, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 0);
 800508a:	4b35      	ldr	r3, [pc, #212]	@ (8005160 <sine_model_configure_weights+0xfc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a35      	ldr	r2, [pc, #212]	@ (8005164 <sine_model_configure_weights+0x100>)
 8005090:	6093      	str	r3, [r2, #8]
    gemm_0_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 0);
 8005092:	4b33      	ldr	r3, [pc, #204]	@ (8005160 <sine_model_configure_weights+0xfc>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a33      	ldr	r2, [pc, #204]	@ (8005164 <sine_model_configure_weights+0x100>)
 8005098:	60d3      	str	r3, [r2, #12]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800509a:	4b33      	ldr	r3, [pc, #204]	@ (8005168 <sine_model_configure_weights+0x104>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050a2:	4a31      	ldr	r2, [pc, #196]	@ (8005168 <sine_model_configure_weights+0x104>)
 80050a4:	6013      	str	r3, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 64);
 80050a6:	4b2e      	ldr	r3, [pc, #184]	@ (8005160 <sine_model_configure_weights+0xfc>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3340      	adds	r3, #64	@ 0x40
 80050ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005168 <sine_model_configure_weights+0x104>)
 80050ae:	6093      	str	r3, [r2, #8]
    gemm_0_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 64);
 80050b0:	4b2b      	ldr	r3, [pc, #172]	@ (8005160 <sine_model_configure_weights+0xfc>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	3340      	adds	r3, #64	@ 0x40
 80050b6:	4a2c      	ldr	r2, [pc, #176]	@ (8005168 <sine_model_configure_weights+0x104>)
 80050b8:	60d3      	str	r3, [r2, #12]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80050ba:	4b2c      	ldr	r3, [pc, #176]	@ (800516c <sine_model_configure_weights+0x108>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050c2:	4a2a      	ldr	r2, [pc, #168]	@ (800516c <sine_model_configure_weights+0x108>)
 80050c4:	6013      	str	r3, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 128);
 80050c6:	4b26      	ldr	r3, [pc, #152]	@ (8005160 <sine_model_configure_weights+0xfc>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3380      	adds	r3, #128	@ 0x80
 80050cc:	4a27      	ldr	r2, [pc, #156]	@ (800516c <sine_model_configure_weights+0x108>)
 80050ce:	6093      	str	r3, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 128);
 80050d0:	4b23      	ldr	r3, [pc, #140]	@ (8005160 <sine_model_configure_weights+0xfc>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3380      	adds	r3, #128	@ 0x80
 80050d6:	4a25      	ldr	r2, [pc, #148]	@ (800516c <sine_model_configure_weights+0x108>)
 80050d8:	60d3      	str	r3, [r2, #12]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80050da:	4b25      	ldr	r3, [pc, #148]	@ (8005170 <sine_model_configure_weights+0x10c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050e2:	4a23      	ldr	r2, [pc, #140]	@ (8005170 <sine_model_configure_weights+0x10c>)
 80050e4:	6013      	str	r3, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 1152);
 80050e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005160 <sine_model_configure_weights+0xfc>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80050ee:	4a20      	ldr	r2, [pc, #128]	@ (8005170 <sine_model_configure_weights+0x10c>)
 80050f0:	6093      	str	r3, [r2, #8]
    gemm_1_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1152);
 80050f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005160 <sine_model_configure_weights+0xfc>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80050fa:	4a1d      	ldr	r2, [pc, #116]	@ (8005170 <sine_model_configure_weights+0x10c>)
 80050fc:	60d3      	str	r3, [r2, #12]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80050fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005174 <sine_model_configure_weights+0x110>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005106:	4a1b      	ldr	r2, [pc, #108]	@ (8005174 <sine_model_configure_weights+0x110>)
 8005108:	6013      	str	r3, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 1216);
 800510a:	4b15      	ldr	r3, [pc, #84]	@ (8005160 <sine_model_configure_weights+0xfc>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8005112:	4a18      	ldr	r2, [pc, #96]	@ (8005174 <sine_model_configure_weights+0x110>)
 8005114:	6093      	str	r3, [r2, #8]
    gemm_2_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1216);
 8005116:	4b12      	ldr	r3, [pc, #72]	@ (8005160 <sine_model_configure_weights+0xfc>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800511e:	4a15      	ldr	r2, [pc, #84]	@ (8005174 <sine_model_configure_weights+0x110>)
 8005120:	60d3      	str	r3, [r2, #12]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8005122:	4b15      	ldr	r3, [pc, #84]	@ (8005178 <sine_model_configure_weights+0x114>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800512a:	4a13      	ldr	r2, [pc, #76]	@ (8005178 <sine_model_configure_weights+0x114>)
 800512c:	6013      	str	r3, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 1280);
 800512e:	4b0c      	ldr	r3, [pc, #48]	@ (8005160 <sine_model_configure_weights+0xfc>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005136:	4a10      	ldr	r2, [pc, #64]	@ (8005178 <sine_model_configure_weights+0x114>)
 8005138:	6093      	str	r3, [r2, #8]
    gemm_2_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1280);
 800513a:	4b09      	ldr	r3, [pc, #36]	@ (8005160 <sine_model_configure_weights+0xfc>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005142:	4a0d      	ldr	r2, [pc, #52]	@ (8005178 <sine_model_configure_weights+0x114>)
 8005144:	60d3      	str	r3, [r2, #12]
    return true;
 8005146:	2301      	movs	r3, #1
 8005148:	e005      	b.n	8005156 <sine_model_configure_weights+0xf2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800514a:	2212      	movs	r2, #18
 800514c:	2130      	movs	r1, #48	@ 0x30
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f9ce 	bl	80054f0 <ai_platform_network_set_error>
  return false;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20000988 	.word	0x20000988
 8005164:	2000008c 	.word	0x2000008c
 8005168:	2000009c 	.word	0x2000009c
 800516c:	200000ac 	.word	0x200000ac
 8005170:	200000bc 	.word	0x200000bc
 8005174:	200000cc 	.word	0x200000cc
 8005178:	200000dc 	.word	0x200000dc

0800517c <ai_sine_model_create>:


AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af02      	add	r7, sp, #8
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8005186:	2300      	movs	r3, #0
 8005188:	9301      	str	r3, [sp, #4]
 800518a:	2305      	movs	r3, #5
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	2301      	movs	r3, #1
 8005190:	4a04      	ldr	r2, [pc, #16]	@ (80051a4 <ai_sine_model_create+0x28>)
 8005192:	6839      	ldr	r1, [r7, #0]
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f9b1 	bl	80054fc <ai_platform_network_create>
 800519a:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	20000610 	.word	0x20000610

080051a8 <ai_sine_model_init>:


AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 80051b2:	6839      	ldr	r1, [r7, #0]
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f9e3 	bl	8005580 <ai_platform_network_init>
 80051ba:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 80051bc:	2301      	movs	r3, #1
 80051be:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <ai_sine_model_init+0x22>
 80051c6:	2300      	movs	r3, #0
 80051c8:	e026      	b.n	8005218 <ai_sine_model_init+0x70>
  ok &= sine_model_configure_weights(net_ctx, params);
 80051ca:	6839      	ldr	r1, [r7, #0]
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f7ff ff49 	bl	8005064 <sine_model_configure_weights>
 80051d2:	4603      	mov	r3, r0
 80051d4:	461a      	mov	r2, r3
 80051d6:	7afb      	ldrb	r3, [r7, #11]
 80051d8:	4013      	ands	r3, r2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	bf14      	ite	ne
 80051de:	2301      	movne	r3, #1
 80051e0:	2300      	moveq	r3, #0
 80051e2:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_activations(net_ctx, params);
 80051e4:	6839      	ldr	r1, [r7, #0]
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f7ff fedc 	bl	8004fa4 <sine_model_configure_activations>
 80051ec:	4603      	mov	r3, r0
 80051ee:	461a      	mov	r2, r3
 80051f0:	7afb      	ldrb	r3, [r7, #11]
 80051f2:	4013      	ands	r3, r2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	bf14      	ite	ne
 80051f8:	2301      	movne	r3, #1
 80051fa:	2300      	moveq	r3, #0
 80051fc:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fa8c 	bl	800571c <ai_platform_network_post_init>
 8005204:	4603      	mov	r3, r0
 8005206:	461a      	mov	r2, r3
 8005208:	7afb      	ldrb	r3, [r7, #11]
 800520a:	4013      	ands	r3, r2
 800520c:	2b00      	cmp	r3, #0
 800520e:	bf14      	ite	ne
 8005210:	2301      	movne	r3, #1
 8005212:	2300      	moveq	r3, #0
 8005214:	72fb      	strb	r3, [r7, #11]

  return ok;
 8005216:	7afb      	ldrb	r3, [r7, #11]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <ai_sine_model_run>:


AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	68b9      	ldr	r1, [r7, #8]
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 faa3 	bl	800577c <ai_platform_network_process>
 8005236:	4603      	mov	r3, r0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <ai_sine_model_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_sine_model_data_activations_buffer_get(const ai_handle ptr)
{
 8005240:	b4b0      	push	{r4, r5, r7}
 8005242:	b08f      	sub	sp, #60	@ 0x3c
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800524a:	4b15      	ldr	r3, [pc, #84]	@ (80052a0 <ai_sine_model_data_activations_buffer_get+0x60>)
 800524c:	61fb      	str	r3, [r7, #28]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	623b      	str	r3, [r7, #32]
 8005252:	2300      	movs	r3, #0
 8005254:	627b      	str	r3, [r7, #36]	@ 0x24
 8005256:	2300      	movs	r3, #0
 8005258:	62bb      	str	r3, [r7, #40]	@ 0x28
 800525a:	2380      	movs	r3, #128	@ 0x80
 800525c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800525e:	2301      	movs	r3, #1
 8005260:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8005264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005266:	2204      	movs	r2, #4
 8005268:	f362 231f 	bfi	r3, r2, #8, #24
 800526c:	633b      	str	r3, [r7, #48]	@ 0x30
 800526e:	4b0d      	ldr	r3, [pc, #52]	@ (80052a4 <ai_sine_model_data_activations_buffer_get+0x64>)
 8005270:	f107 040c 	add.w	r4, r7, #12
 8005274:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005276:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800527a:	f107 030c 	add.w	r3, r7, #12
 800527e:	637b      	str	r3, [r7, #52]	@ 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_SINE_MODEL_DATA_ACTIVATIONS_SIZE, 1, AI_SINE_MODEL_DATA_ACTIVATIONS_COUNT),
    AI_SINE_MODEL_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	461d      	mov	r5, r3
 8005284:	f107 041c 	add.w	r4, r7, #28
 8005288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800528a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800528c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005290:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	373c      	adds	r7, #60	@ 0x3c
 8005298:	46bd      	mov	sp, r7
 800529a:	bcb0      	pop	{r4, r5, r7}
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	00040440 	.word	0x00040440
 80052a4:	0800982c 	.word	0x0800982c

080052a8 <ai_sine_model_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_sine_model_data_weights_buffer_get(const ai_handle ptr)
{
 80052a8:	b4b0      	push	{r4, r5, r7}
 80052aa:	b08f      	sub	sp, #60	@ 0x3c
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 80052b2:	4b15      	ldr	r3, [pc, #84]	@ (8005308 <ai_sine_model_data_weights_buffer_get+0x60>)
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	623b      	str	r3, [r7, #32]
 80052ba:	2300      	movs	r3, #0
 80052bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80052be:	2300      	movs	r3, #0
 80052c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052c2:	f240 5304 	movw	r3, #1284	@ 0x504
 80052c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052c8:	2301      	movs	r3, #1
 80052ca:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80052ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d0:	2204      	movs	r2, #4
 80052d2:	f362 231f 	bfi	r3, r2, #8, #24
 80052d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80052d8:	4b0c      	ldr	r3, [pc, #48]	@ (800530c <ai_sine_model_data_weights_buffer_get+0x64>)
 80052da:	f107 040c 	add.w	r4, r7, #12
 80052de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80052e4:	f107 030c 	add.w	r3, r7, #12
 80052e8:	637b      	str	r3, [r7, #52]	@ 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_SINE_MODEL_DATA_WEIGHTS_SIZE, 1, AI_SINE_MODEL_DATA_WEIGHTS_COUNT),
    AI_SINE_MODEL_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	461d      	mov	r5, r3
 80052ee:	f107 041c 	add.w	r4, r7, #28
 80052f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052f6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80052fa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	373c      	adds	r7, #60	@ 0x3c
 8005302:	46bd      	mov	sp, r7
 8005304:	bcb0      	pop	{r4, r5, r7}
 8005306:	4770      	bx	lr
 8005308:	40040440 	.word	0x40040440
 800530c:	0800983c 	.word	0x0800983c

08005310 <ai_sine_model_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_sine_model_data_weights_get(void)
{
 8005310:	b480      	push	{r7}
 8005312:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_sine_model_weights_table);
 8005314:	4b02      	ldr	r3, [pc, #8]	@ (8005320 <ai_sine_model_data_weights_get+0x10>)

}
 8005316:	4618      	mov	r0, r3
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	200006b4 	.word	0x200006b4

08005324 <ai_buffer_get_size>:
 8005324:	b378      	cbz	r0, 8005386 <ai_buffer_get_size+0x62>
 8005326:	b410      	push	{r4}
 8005328:	6803      	ldr	r3, [r0, #0]
 800532a:	4a17      	ldr	r2, [pc, #92]	@ (8005388 <ai_buffer_get_size+0x64>)
 800532c:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8005330:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005334:	4293      	cmp	r3, r2
 8005336:	d01e      	beq.n	8005376 <ai_buffer_get_size+0x52>
 8005338:	6984      	ldr	r4, [r0, #24]
 800533a:	6862      	ldr	r2, [r4, #4]
 800533c:	7d03      	ldrb	r3, [r0, #20]
 800533e:	6941      	ldr	r1, [r0, #20]
 8005340:	f1a3 0301 	sub.w	r3, r3, #1
 8005344:	fab3 f383 	clz	r3, r3
 8005348:	095b      	lsrs	r3, r3, #5
 800534a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800534e:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8005352:	da0b      	bge.n	800536c <ai_buffer_get_size+0x48>
 8005354:	2b01      	cmp	r3, #1
 8005356:	d102      	bne.n	800535e <ai_buffer_get_size+0x3a>
 8005358:	2802      	cmp	r0, #2
 800535a:	d007      	beq.n	800536c <ai_buffer_get_size+0x48>
 800535c:	2302      	movs	r3, #2
 800535e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8005362:	3301      	adds	r3, #1
 8005364:	4298      	cmp	r0, r3
 8005366:	fb01 f202 	mul.w	r2, r1, r2
 800536a:	d1f3      	bne.n	8005354 <ai_buffer_get_size+0x30>
 800536c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8005370:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	2900      	cmp	r1, #0
 8005378:	d0de      	beq.n	8005338 <ai_buffer_get_size+0x14>
 800537a:	6984      	ldr	r4, [r0, #24]
 800537c:	6862      	ldr	r2, [r4, #4]
 800537e:	321f      	adds	r2, #31
 8005380:	f022 021f 	bic.w	r2, r2, #31
 8005384:	e7da      	b.n	800533c <ai_buffer_get_size+0x18>
 8005386:	4770      	bx	lr
 8005388:	000400c0 	.word	0x000400c0

0800538c <ai_buffer_array_sane>:
 800538c:	b138      	cbz	r0, 800539e <ai_buffer_array_sane+0x12>
 800538e:	6843      	ldr	r3, [r0, #4]
 8005390:	b123      	cbz	r3, 800539c <ai_buffer_array_sane+0x10>
 8005392:	8840      	ldrh	r0, [r0, #2]
 8005394:	3800      	subs	r0, #0
 8005396:	bf18      	it	ne
 8005398:	2001      	movne	r0, #1
 800539a:	4770      	bx	lr
 800539c:	4618      	mov	r0, r3
 800539e:	4770      	bx	lr

080053a0 <ai_platform_get_weights_map>:
 80053a0:	2a00      	cmp	r2, #0
 80053a2:	d037      	beq.n	8005414 <ai_platform_get_weights_map+0x74>
 80053a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a6:	4604      	mov	r4, r0
 80053a8:	b1a0      	cbz	r0, 80053d4 <ai_platform_get_weights_map+0x34>
 80053aa:	460f      	mov	r7, r1
 80053ac:	b191      	cbz	r1, 80053d4 <ai_platform_get_weights_map+0x34>
 80053ae:	4b25      	ldr	r3, [pc, #148]	@ (8005444 <ai_platform_get_weights_map+0xa4>)
 80053b0:	6810      	ldr	r0, [r2, #0]
 80053b2:	4298      	cmp	r0, r3
 80053b4:	4615      	mov	r5, r2
 80053b6:	d00f      	beq.n	80053d8 <ai_platform_get_weights_map+0x38>
 80053b8:	6855      	ldr	r5, [r2, #4]
 80053ba:	b15d      	cbz	r5, 80053d4 <ai_platform_get_weights_map+0x34>
 80053bc:	682e      	ldr	r6, [r5, #0]
 80053be:	429e      	cmp	r6, r3
 80053c0:	d02a      	beq.n	8005418 <ai_platform_get_weights_map+0x78>
 80053c2:	f1a1 0001 	sub.w	r0, r1, #1
 80053c6:	6025      	str	r5, [r4, #0]
 80053c8:	fab0 f080 	clz	r0, r0
 80053cc:	0940      	lsrs	r0, r0, #5
 80053ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053d0:	42a7      	cmp	r7, r4
 80053d2:	d034      	beq.n	800543e <ai_platform_get_weights_map+0x9e>
 80053d4:	2000      	movs	r0, #0
 80053d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053d8:	1d10      	adds	r0, r2, #4
 80053da:	f7ff ffd7 	bl	800538c <ai_buffer_array_sane>
 80053de:	2800      	cmp	r0, #0
 80053e0:	d0f8      	beq.n	80053d4 <ai_platform_get_weights_map+0x34>
 80053e2:	88eb      	ldrh	r3, [r5, #6]
 80053e4:	429f      	cmp	r7, r3
 80053e6:	d1f5      	bne.n	80053d4 <ai_platform_get_weights_map+0x34>
 80053e8:	f04f 0c00 	mov.w	ip, #0
 80053ec:	1f20      	subs	r0, r4, #4
 80053ee:	46e6      	mov	lr, ip
 80053f0:	68ab      	ldr	r3, [r5, #8]
 80053f2:	4463      	add	r3, ip
 80053f4:	f10c 0c1c 	add.w	ip, ip, #28
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	b12b      	cbz	r3, 8005408 <ai_platform_get_weights_map+0x68>
 80053fc:	f10e 0e01 	add.w	lr, lr, #1
 8005400:	4577      	cmp	r7, lr
 8005402:	f840 3f04 	str.w	r3, [r0, #4]!
 8005406:	d1f3      	bne.n	80053f0 <ai_platform_get_weights_map+0x50>
 8005408:	eba7 000e 	sub.w	r0, r7, lr
 800540c:	fab0 f080 	clz	r0, r0
 8005410:	0940      	lsrs	r0, r0, #5
 8005412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005414:	2000      	movs	r0, #0
 8005416:	4770      	bx	lr
 8005418:	1f20      	subs	r0, r4, #4
 800541a:	462a      	mov	r2, r5
 800541c:	2400      	movs	r4, #0
 800541e:	e000      	b.n	8005422 <ai_platform_get_weights_map+0x82>
 8005420:	461c      	mov	r4, r3
 8005422:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8005426:	42b3      	cmp	r3, r6
 8005428:	d0d2      	beq.n	80053d0 <ai_platform_get_weights_map+0x30>
 800542a:	f840 3f04 	str.w	r3, [r0, #4]!
 800542e:	1c63      	adds	r3, r4, #1
 8005430:	429f      	cmp	r7, r3
 8005432:	d1f5      	bne.n	8005420 <ai_platform_get_weights_map+0x80>
 8005434:	3402      	adds	r4, #2
 8005436:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800543a:	42b3      	cmp	r3, r6
 800543c:	d1ca      	bne.n	80053d4 <ai_platform_get_weights_map+0x34>
 800543e:	2001      	movs	r0, #1
 8005440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005442:	bf00      	nop
 8005444:	a1facade 	.word	0xa1facade

08005448 <ai_platform_get_activations_map>:
 8005448:	2a00      	cmp	r2, #0
 800544a:	d038      	beq.n	80054be <ai_platform_get_activations_map+0x76>
 800544c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544e:	4604      	mov	r4, r0
 8005450:	b1a0      	cbz	r0, 800547c <ai_platform_get_activations_map+0x34>
 8005452:	460f      	mov	r7, r1
 8005454:	b191      	cbz	r1, 800547c <ai_platform_get_activations_map+0x34>
 8005456:	4b25      	ldr	r3, [pc, #148]	@ (80054ec <ai_platform_get_activations_map+0xa4>)
 8005458:	6810      	ldr	r0, [r2, #0]
 800545a:	4298      	cmp	r0, r3
 800545c:	4615      	mov	r5, r2
 800545e:	d00f      	beq.n	8005480 <ai_platform_get_activations_map+0x38>
 8005460:	6a15      	ldr	r5, [r2, #32]
 8005462:	b15d      	cbz	r5, 800547c <ai_platform_get_activations_map+0x34>
 8005464:	682e      	ldr	r6, [r5, #0]
 8005466:	429e      	cmp	r6, r3
 8005468:	d02b      	beq.n	80054c2 <ai_platform_get_activations_map+0x7a>
 800546a:	f1a1 0001 	sub.w	r0, r1, #1
 800546e:	6025      	str	r5, [r4, #0]
 8005470:	fab0 f080 	clz	r0, r0
 8005474:	0940      	lsrs	r0, r0, #5
 8005476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005478:	42a7      	cmp	r7, r4
 800547a:	d035      	beq.n	80054e8 <ai_platform_get_activations_map+0xa0>
 800547c:	2000      	movs	r0, #0
 800547e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005480:	f102 000c 	add.w	r0, r2, #12
 8005484:	f7ff ff82 	bl	800538c <ai_buffer_array_sane>
 8005488:	2800      	cmp	r0, #0
 800548a:	d0f7      	beq.n	800547c <ai_platform_get_activations_map+0x34>
 800548c:	89eb      	ldrh	r3, [r5, #14]
 800548e:	429f      	cmp	r7, r3
 8005490:	d1f4      	bne.n	800547c <ai_platform_get_activations_map+0x34>
 8005492:	f04f 0c00 	mov.w	ip, #0
 8005496:	1f20      	subs	r0, r4, #4
 8005498:	46e6      	mov	lr, ip
 800549a:	692b      	ldr	r3, [r5, #16]
 800549c:	4463      	add	r3, ip
 800549e:	f10c 0c1c 	add.w	ip, ip, #28
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	b12b      	cbz	r3, 80054b2 <ai_platform_get_activations_map+0x6a>
 80054a6:	f10e 0e01 	add.w	lr, lr, #1
 80054aa:	4577      	cmp	r7, lr
 80054ac:	f840 3f04 	str.w	r3, [r0, #4]!
 80054b0:	d1f3      	bne.n	800549a <ai_platform_get_activations_map+0x52>
 80054b2:	eba7 000e 	sub.w	r0, r7, lr
 80054b6:	fab0 f080 	clz	r0, r0
 80054ba:	0940      	lsrs	r0, r0, #5
 80054bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054be:	2000      	movs	r0, #0
 80054c0:	4770      	bx	lr
 80054c2:	1f20      	subs	r0, r4, #4
 80054c4:	462a      	mov	r2, r5
 80054c6:	2400      	movs	r4, #0
 80054c8:	e000      	b.n	80054cc <ai_platform_get_activations_map+0x84>
 80054ca:	461c      	mov	r4, r3
 80054cc:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80054d0:	42b3      	cmp	r3, r6
 80054d2:	d0d1      	beq.n	8005478 <ai_platform_get_activations_map+0x30>
 80054d4:	f840 3f04 	str.w	r3, [r0, #4]!
 80054d8:	1c63      	adds	r3, r4, #1
 80054da:	429f      	cmp	r7, r3
 80054dc:	d1f5      	bne.n	80054ca <ai_platform_get_activations_map+0x82>
 80054de:	3402      	adds	r4, #2
 80054e0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80054e4:	42b3      	cmp	r3, r6
 80054e6:	d1c9      	bne.n	800547c <ai_platform_get_activations_map+0x34>
 80054e8:	2001      	movs	r0, #1
 80054ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054ec:	a1facade 	.word	0xa1facade

080054f0 <ai_platform_network_set_error>:
 80054f0:	b110      	cbz	r0, 80054f8 <ai_platform_network_set_error+0x8>
 80054f2:	300c      	adds	r0, #12
 80054f4:	f000 bb84 	b.w	8005c00 <core_set_error>
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop

080054fc <ai_platform_network_create>:
 80054fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005500:	b083      	sub	sp, #12
 8005502:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 8005506:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800550a:	b320      	cbz	r0, 8005556 <ai_platform_network_create+0x5a>
 800550c:	6002      	str	r2, [r0, #0]
 800550e:	4616      	mov	r6, r2
 8005510:	461f      	mov	r7, r3
 8005512:	4604      	mov	r4, r0
 8005514:	f000 fb72 	bl	8005bfc <core_init>
 8005518:	b970      	cbnz	r0, 8005538 <ai_platform_network_create+0x3c>
 800551a:	2530      	movs	r5, #48	@ 0x30
 800551c:	2300      	movs	r3, #0
 800551e:	6023      	str	r3, [r4, #0]
 8005520:	2410      	movs	r4, #16
 8005522:	4642      	mov	r2, r8
 8005524:	4649      	mov	r1, r9
 8005526:	4638      	mov	r0, r7
 8005528:	f001 fa78 	bl	8006a1c <ai_version_get>
 800552c:	60b0      	str	r0, [r6, #8]
 800552e:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8005532:	b003      	add	sp, #12
 8005534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005538:	2200      	movs	r2, #0
 800553a:	4649      	mov	r1, r9
 800553c:	4638      	mov	r0, r7
 800553e:	f001 fa6d 	bl	8006a1c <ai_version_get>
 8005542:	2200      	movs	r2, #0
 8005544:	4605      	mov	r5, r0
 8005546:	2105      	movs	r1, #5
 8005548:	2001      	movs	r0, #1
 800554a:	f001 fa67 	bl	8006a1c <ai_version_get>
 800554e:	4285      	cmp	r5, r0
 8005550:	d008      	beq.n	8005564 <ai_platform_network_create+0x68>
 8005552:	2501      	movs	r5, #1
 8005554:	e7e2      	b.n	800551c <ai_platform_network_create+0x20>
 8005556:	2510      	movs	r5, #16
 8005558:	462c      	mov	r4, r5
 800555a:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800555e:	b003      	add	sp, #12
 8005560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005564:	4b05      	ldr	r3, [pc, #20]	@ (800557c <ai_platform_network_create+0x80>)
 8005566:	9301      	str	r3, [sp, #4]
 8005568:	a801      	add	r0, sp, #4
 800556a:	f000 fb55 	bl	8005c18 <ai_check_custom_types>
 800556e:	b110      	cbz	r0, 8005576 <ai_platform_network_create+0x7a>
 8005570:	2400      	movs	r4, #0
 8005572:	4625      	mov	r5, r4
 8005574:	e7d5      	b.n	8005522 <ai_platform_network_create+0x26>
 8005576:	2502      	movs	r5, #2
 8005578:	e7d0      	b.n	800551c <ai_platform_network_create+0x20>
 800557a:	bf00      	nop
 800557c:	84048403 	.word	0x84048403

08005580 <ai_platform_network_init>:
 8005580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005584:	4b63      	ldr	r3, [pc, #396]	@ (8005714 <ai_platform_network_init+0x194>)
 8005586:	6802      	ldr	r2, [r0, #0]
 8005588:	4393      	bics	r3, r2
 800558a:	b083      	sub	sp, #12
 800558c:	d156      	bne.n	800563c <ai_platform_network_init+0xbc>
 800558e:	4604      	mov	r4, r0
 8005590:	460f      	mov	r7, r1
 8005592:	2900      	cmp	r1, #0
 8005594:	f000 80a9 	beq.w	80056ea <ai_platform_network_init+0x16a>
 8005598:	680b      	ldr	r3, [r1, #0]
 800559a:	495f      	ldr	r1, [pc, #380]	@ (8005718 <ai_platform_network_init+0x198>)
 800559c:	428b      	cmp	r3, r1
 800559e:	d113      	bne.n	80055c8 <ai_platform_network_init+0x48>
 80055a0:	495c      	ldr	r1, [pc, #368]	@ (8005714 <ai_platform_network_init+0x194>)
 80055a2:	89bd      	ldrh	r5, [r7, #12]
 80055a4:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 80055a8:	f8d7 8010 	ldr.w	r8, [r7, #16]
 80055ac:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 80055b0:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 80055b4:	68be      	ldr	r6, [r7, #8]
 80055b6:	428a      	cmp	r2, r1
 80055b8:	d02c      	beq.n	8005614 <ai_platform_network_init+0x94>
 80055ba:	2303      	movs	r3, #3
 80055bc:	6123      	str	r3, [r4, #16]
 80055be:	4627      	mov	r7, r4
 80055c0:	4638      	mov	r0, r7
 80055c2:	b003      	add	sp, #12
 80055c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c8:	2101      	movs	r1, #1
 80055ca:	4638      	mov	r0, r7
 80055cc:	9301      	str	r3, [sp, #4]
 80055ce:	f8d7 b004 	ldr.w	fp, [r7, #4]
 80055d2:	f7ff fea7 	bl	8005324 <ai_buffer_get_size>
 80055d6:	f107 081c 	add.w	r8, r7, #28
 80055da:	4605      	mov	r5, r0
 80055dc:	2101      	movs	r1, #1
 80055de:	4640      	mov	r0, r8
 80055e0:	463e      	mov	r6, r7
 80055e2:	6a3f      	ldr	r7, [r7, #32]
 80055e4:	f7ff fe9e 	bl	8005324 <ai_buffer_get_size>
 80055e8:	2d00      	cmp	r5, #0
 80055ea:	9b01      	ldr	r3, [sp, #4]
 80055ec:	bf0a      	itet	eq
 80055ee:	46a9      	moveq	r9, r5
 80055f0:	f04f 0901 	movne.w	r9, #1
 80055f4:	462e      	moveq	r6, r5
 80055f6:	b330      	cbz	r0, 8005646 <ai_platform_network_init+0xc6>
 80055f8:	2f00      	cmp	r7, #0
 80055fa:	f000 8084 	beq.w	8005706 <ai_platform_network_init+0x186>
 80055fe:	f04f 0a01 	mov.w	sl, #1
 8005602:	f1bb 0f00 	cmp.w	fp, #0
 8005606:	d021      	beq.n	800564c <ai_platform_network_init+0xcc>
 8005608:	2500      	movs	r5, #0
 800560a:	6822      	ldr	r2, [r4, #0]
 800560c:	4941      	ldr	r1, [pc, #260]	@ (8005714 <ai_platform_network_init+0x194>)
 800560e:	428a      	cmp	r2, r1
 8005610:	46ab      	mov	fp, r5
 8005612:	d1d2      	bne.n	80055ba <ai_platform_network_init+0x3a>
 8005614:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 8005616:	454a      	cmp	r2, r9
 8005618:	4a3f      	ldr	r2, [pc, #252]	@ (8005718 <ai_platform_network_init+0x198>)
 800561a:	d221      	bcs.n	8005660 <ai_platform_network_init+0xe0>
 800561c:	4293      	cmp	r3, r2
 800561e:	d15c      	bne.n	80056da <ai_platform_network_init+0x15a>
 8005620:	6266      	str	r6, [r4, #36]	@ 0x24
 8005622:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8005626:	f8a4 b020 	strh.w	fp, [r4, #32]
 800562a:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 800562e:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 8005632:	8525      	strh	r5, [r4, #40]	@ 0x28
 8005634:	4620      	mov	r0, r4
 8005636:	f000 fb19 	bl	8005c6c <ai_layers_init_all>
 800563a:	e7be      	b.n	80055ba <ai_platform_network_init+0x3a>
 800563c:	2700      	movs	r7, #0
 800563e:	4638      	mov	r0, r7
 8005640:	b003      	add	sp, #12
 8005642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005646:	4680      	mov	r8, r0
 8005648:	4682      	mov	sl, r0
 800564a:	e7da      	b.n	8005602 <ai_platform_network_init+0x82>
 800564c:	2d00      	cmp	r5, #0
 800564e:	d0dc      	beq.n	800560a <ai_platform_network_init+0x8a>
 8005650:	2212      	movs	r2, #18
 8005652:	2110      	movs	r1, #16
 8005654:	f104 000c 	add.w	r0, r4, #12
 8005658:	f000 fad2 	bl	8005c00 <core_set_error>
 800565c:	465f      	mov	r7, fp
 800565e:	e7af      	b.n	80055c0 <ai_platform_network_init+0x40>
 8005660:	4293      	cmp	r3, r2
 8005662:	d0dd      	beq.n	8005620 <ai_platform_network_init+0xa0>
 8005664:	f1b9 0f00 	cmp.w	r9, #0
 8005668:	d018      	beq.n	800569c <ai_platform_network_init+0x11c>
 800566a:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	f8cd 9004 	str.w	r9, [sp, #4]
 8005674:	2700      	movs	r7, #0
 8005676:	4699      	mov	r9, r3
 8005678:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800567a:	eb06 0e07 	add.w	lr, r6, r7
 800567e:	eb03 0c07 	add.w	ip, r3, r7
 8005682:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005686:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800568a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800568e:	371c      	adds	r7, #28
 8005690:	45b9      	cmp	r9, r7
 8005692:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005696:	d1ef      	bne.n	8005678 <ai_platform_network_init+0xf8>
 8005698:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800569c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800569e:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 80056a2:	4553      	cmp	r3, sl
 80056a4:	f8a4 b020 	strh.w	fp, [r4, #32]
 80056a8:	d325      	bcc.n	80056f6 <ai_platform_network_init+0x176>
 80056aa:	f1ba 0f00 	cmp.w	sl, #0
 80056ae:	d0be      	beq.n	800562e <ai_platform_network_init+0xae>
 80056b0:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 80056b4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80056b8:	f04f 0c00 	mov.w	ip, #0
 80056bc:	eb08 070c 	add.w	r7, r8, ip
 80056c0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80056c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80056c4:	4466      	add	r6, ip
 80056c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80056c8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80056cc:	f10c 0c1c 	add.w	ip, ip, #28
 80056d0:	45f4      	cmp	ip, lr
 80056d2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80056d6:	d1f1      	bne.n	80056bc <ai_platform_network_init+0x13c>
 80056d8:	e7a9      	b.n	800562e <ai_platform_network_init+0xae>
 80056da:	2212      	movs	r2, #18
 80056dc:	2116      	movs	r1, #22
 80056de:	f104 000c 	add.w	r0, r4, #12
 80056e2:	f000 fa8d 	bl	8005c00 <core_set_error>
 80056e6:	2700      	movs	r7, #0
 80056e8:	e76a      	b.n	80055c0 <ai_platform_network_init+0x40>
 80056ea:	2211      	movs	r2, #17
 80056ec:	2110      	movs	r1, #16
 80056ee:	300c      	adds	r0, #12
 80056f0:	f000 fa86 	bl	8005c00 <core_set_error>
 80056f4:	e764      	b.n	80055c0 <ai_platform_network_init+0x40>
 80056f6:	2213      	movs	r2, #19
 80056f8:	2116      	movs	r1, #22
 80056fa:	f104 000c 	add.w	r0, r4, #12
 80056fe:	f000 fa7f 	bl	8005c00 <core_set_error>
 8005702:	2700      	movs	r7, #0
 8005704:	e75c      	b.n	80055c0 <ai_platform_network_init+0x40>
 8005706:	2213      	movs	r2, #19
 8005708:	2110      	movs	r1, #16
 800570a:	f104 000c 	add.w	r0, r4, #12
 800570e:	f000 fa77 	bl	8005c00 <core_set_error>
 8005712:	e755      	b.n	80055c0 <ai_platform_network_init+0x40>
 8005714:	a1c00100 	.word	0xa1c00100
 8005718:	a1facade 	.word	0xa1facade

0800571c <ai_platform_network_post_init>:
 800571c:	b538      	push	{r3, r4, r5, lr}
 800571e:	4b16      	ldr	r3, [pc, #88]	@ (8005778 <ai_platform_network_post_init+0x5c>)
 8005720:	6802      	ldr	r2, [r0, #0]
 8005722:	ea02 0103 	and.w	r1, r2, r3
 8005726:	4393      	bics	r3, r2
 8005728:	d108      	bne.n	800573c <ai_platform_network_post_init+0x20>
 800572a:	6903      	ldr	r3, [r0, #16]
 800572c:	f013 0502 	ands.w	r5, r3, #2
 8005730:	4604      	mov	r4, r0
 8005732:	d005      	beq.n	8005740 <ai_platform_network_post_init+0x24>
 8005734:	428a      	cmp	r2, r1
 8005736:	d00a      	beq.n	800574e <ai_platform_network_post_init+0x32>
 8005738:	2001      	movs	r0, #1
 800573a:	bd38      	pop	{r3, r4, r5, pc}
 800573c:	2000      	movs	r0, #0
 800573e:	bd38      	pop	{r3, r4, r5, pc}
 8005740:	2210      	movs	r2, #16
 8005742:	2111      	movs	r1, #17
 8005744:	300c      	adds	r0, #12
 8005746:	f000 fa5b 	bl	8005c00 <core_set_error>
 800574a:	4628      	mov	r0, r5
 800574c:	bd38      	pop	{r3, r4, r5, pc}
 800574e:	f000 fa9b 	bl	8005c88 <ai_layers_post_init_all>
 8005752:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0ef      	beq.n	8005738 <ai_platform_network_post_init+0x1c>
 8005758:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800575a:	e008      	b.n	800576e <ai_platform_network_post_init+0x52>
 800575c:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 8005760:	4798      	blx	r3
 8005762:	692b      	ldr	r3, [r5, #16]
 8005764:	42ab      	cmp	r3, r5
 8005766:	d0e7      	beq.n	8005738 <ai_platform_network_post_init+0x1c>
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0e5      	beq.n	8005738 <ai_platform_network_post_init+0x1c>
 800576c:	461d      	mov	r5, r3
 800576e:	4629      	mov	r1, r5
 8005770:	2000      	movs	r0, #0
 8005772:	2d00      	cmp	r5, #0
 8005774:	d1f2      	bne.n	800575c <ai_platform_network_post_init+0x40>
 8005776:	e7df      	b.n	8005738 <ai_platform_network_post_init+0x1c>
 8005778:	a1c00100 	.word	0xa1c00100

0800577c <ai_platform_network_process>:
 800577c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005780:	4bb5      	ldr	r3, [pc, #724]	@ (8005a58 <ai_platform_network_process+0x2dc>)
 8005782:	4605      	mov	r5, r0
 8005784:	6800      	ldr	r0, [r0, #0]
 8005786:	b085      	sub	sp, #20
 8005788:	4383      	bics	r3, r0
 800578a:	9202      	str	r2, [sp, #8]
 800578c:	f040 8140 	bne.w	8005a10 <ai_platform_network_process+0x294>
 8005790:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 8125 	beq.w	80059e2 <ai_platform_network_process+0x266>
 8005798:	692b      	ldr	r3, [r5, #16]
 800579a:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	2700      	movs	r7, #0
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	61af      	str	r7, [r5, #24]
 80057a8:	f040 8137 	bne.w	8005a1a <ai_platform_network_process+0x29e>
 80057ac:	2900      	cmp	r1, #0
 80057ae:	f000 811e 	beq.w	80059ee <ai_platform_network_process+0x272>
 80057b2:	f1ba 0f00 	cmp.w	sl, #0
 80057b6:	f000 811a 	beq.w	80059ee <ai_platform_network_process+0x272>
 80057ba:	f8ba 3000 	ldrh.w	r3, [sl]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 8115 	beq.w	80059ee <ai_platform_network_process+0x272>
 80057c4:	698b      	ldr	r3, [r1, #24]
 80057c6:	9503      	str	r5, [sp, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	9301      	str	r3, [sp, #4]
 80057cc:	460e      	mov	r6, r1
 80057ce:	f8da 3004 	ldr.w	r3, [sl, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d072      	beq.n	80058bc <ai_platform_network_process+0x140>
 80057d6:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80057da:	2c00      	cmp	r4, #0
 80057dc:	d06e      	beq.n	80058bc <ai_platform_network_process+0x140>
 80057de:	f8da 3008 	ldr.w	r3, [sl, #8]
 80057e2:	f8d3 9000 	ldr.w	r9, [r3]
 80057e6:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 80057ea:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80057ee:	f000 81d3 	beq.w	8005b98 <ai_platform_network_process+0x41c>
 80057f2:	69a3      	ldr	r3, [r4, #24]
 80057f4:	2101      	movs	r1, #1
 80057f6:	4630      	mov	r0, r6
 80057f8:	685d      	ldr	r5, [r3, #4]
 80057fa:	f7ff fd93 	bl	8005324 <ai_buffer_get_size>
 80057fe:	4285      	cmp	r5, r0
 8005800:	f0c0 8116 	bcc.w	8005a30 <ai_platform_network_process+0x2b4>
 8005804:	68e0      	ldr	r0, [r4, #12]
 8005806:	69b1      	ldr	r1, [r6, #24]
 8005808:	68c2      	ldr	r2, [r0, #12]
 800580a:	68cb      	ldr	r3, [r1, #12]
 800580c:	429a      	cmp	r2, r3
 800580e:	f040 810f 	bne.w	8005a30 <ai_platform_network_process+0x2b4>
 8005812:	6882      	ldr	r2, [r0, #8]
 8005814:	688b      	ldr	r3, [r1, #8]
 8005816:	429a      	cmp	r2, r3
 8005818:	f040 810a 	bne.w	8005a30 <ai_platform_network_process+0x2b4>
 800581c:	6842      	ldr	r2, [r0, #4]
 800581e:	684b      	ldr	r3, [r1, #4]
 8005820:	429a      	cmp	r2, r3
 8005822:	f040 8105 	bne.w	8005a30 <ai_platform_network_process+0x2b4>
 8005826:	69a3      	ldr	r3, [r4, #24]
 8005828:	e9d3 0100 	ldrd	r0, r1, [r3]
 800582c:	f001 f8e4 	bl	80069f8 <ai_array_get_data_byte_size>
 8005830:	4605      	mov	r5, r0
 8005832:	4620      	mov	r0, r4
 8005834:	f001 f8f8 	bl	8006a28 <get_tensor_byte_size>
 8005838:	4285      	cmp	r5, r0
 800583a:	f0c0 80f9 	bcc.w	8005a30 <ai_platform_network_process+0x2b4>
 800583e:	69a3      	ldr	r3, [r4, #24]
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	f001 f869 	bl	8006918 <ai_array_to_buffer_fmt>
 8005846:	6833      	ldr	r3, [r6, #0]
 8005848:	4058      	eors	r0, r3
 800584a:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800584e:	f040 81a5 	bne.w	8005b9c <ai_platform_network_process+0x420>
 8005852:	6873      	ldr	r3, [r6, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 819f 	beq.w	8005b98 <ai_platform_network_process+0x41c>
 800585a:	69b3      	ldr	r3, [r6, #24]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	f000 81a5 	beq.w	8005bae <ai_platform_network_process+0x432>
 8005864:	9a01      	ldr	r2, [sp, #4]
 8005866:	429a      	cmp	r2, r3
 8005868:	bf38      	it	cc
 800586a:	461a      	movcc	r2, r3
 800586c:	4620      	mov	r0, r4
 800586e:	9201      	str	r2, [sp, #4]
 8005870:	f001 f8da 	bl	8006a28 <get_tensor_byte_size>
 8005874:	f8c8 0008 	str.w	r0, [r8, #8]
 8005878:	69b3      	ldr	r3, [r6, #24]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	fb00 f303 	mul.w	r3, r0, r3
 8005880:	f8c8 300c 	str.w	r3, [r8, #12]
 8005884:	6871      	ldr	r1, [r6, #4]
 8005886:	f8c8 1004 	str.w	r1, [r8, #4]
 800588a:	440b      	add	r3, r1
 800588c:	f849 300b 	str.w	r3, [r9, fp]
 8005890:	69a0      	ldr	r0, [r4, #24]
 8005892:	6803      	ldr	r3, [r0, #0]
 8005894:	009a      	lsls	r2, r3, #2
 8005896:	f107 0701 	add.w	r7, r7, #1
 800589a:	f106 061c 	add.w	r6, r6, #28
 800589e:	f100 80b1 	bmi.w	8005a04 <ai_platform_network_process+0x288>
 80058a2:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80058a6:	1a9b      	subs	r3, r3, r2
 80058a8:	4419      	add	r1, r3
 80058aa:	6081      	str	r1, [r0, #8]
 80058ac:	69a3      	ldr	r3, [r4, #24]
 80058ae:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80058b2:	60da      	str	r2, [r3, #12]
 80058b4:	f8ba 3000 	ldrh.w	r3, [sl]
 80058b8:	42bb      	cmp	r3, r7
 80058ba:	d888      	bhi.n	80057ce <ai_platform_network_process+0x52>
 80058bc:	9d03      	ldr	r5, [sp, #12]
 80058be:	9b02      	ldr	r3, [sp, #8]
 80058c0:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 817c 	beq.w	8005bc0 <ai_platform_network_process+0x444>
 80058c8:	2a01      	cmp	r2, #1
 80058ca:	f240 80bd 	bls.w	8005a48 <ai_platform_network_process+0x2cc>
 80058ce:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 80058d2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 80b6 	beq.w	8005a48 <ai_platform_network_process+0x2cc>
 80058dc:	f8dd b008 	ldr.w	fp, [sp, #8]
 80058e0:	2700      	movs	r7, #0
 80058e2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 80bd 	beq.w	8005a66 <ai_platform_network_process+0x2ea>
 80058ec:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 80058f0:	2e00      	cmp	r6, #0
 80058f2:	f000 80b8 	beq.w	8005a66 <ai_platform_network_process+0x2ea>
 80058f6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80058fa:	681c      	ldr	r4, [r3, #0]
 80058fc:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 8005900:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8005904:	f000 8160 	beq.w	8005bc8 <ai_platform_network_process+0x44c>
 8005908:	69b3      	ldr	r3, [r6, #24]
 800590a:	2101      	movs	r1, #1
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	9302      	str	r3, [sp, #8]
 8005910:	4658      	mov	r0, fp
 8005912:	f7ff fd07 	bl	8005324 <ai_buffer_get_size>
 8005916:	9b02      	ldr	r3, [sp, #8]
 8005918:	4283      	cmp	r3, r0
 800591a:	f0c0 8095 	bcc.w	8005a48 <ai_platform_network_process+0x2cc>
 800591e:	68f0      	ldr	r0, [r6, #12]
 8005920:	f8db 1018 	ldr.w	r1, [fp, #24]
 8005924:	68c2      	ldr	r2, [r0, #12]
 8005926:	68cb      	ldr	r3, [r1, #12]
 8005928:	429a      	cmp	r2, r3
 800592a:	f040 808d 	bne.w	8005a48 <ai_platform_network_process+0x2cc>
 800592e:	6882      	ldr	r2, [r0, #8]
 8005930:	688b      	ldr	r3, [r1, #8]
 8005932:	429a      	cmp	r2, r3
 8005934:	f040 8088 	bne.w	8005a48 <ai_platform_network_process+0x2cc>
 8005938:	6842      	ldr	r2, [r0, #4]
 800593a:	684b      	ldr	r3, [r1, #4]
 800593c:	429a      	cmp	r2, r3
 800593e:	f040 8083 	bne.w	8005a48 <ai_platform_network_process+0x2cc>
 8005942:	69b3      	ldr	r3, [r6, #24]
 8005944:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005948:	f001 f856 	bl	80069f8 <ai_array_get_data_byte_size>
 800594c:	9002      	str	r0, [sp, #8]
 800594e:	4630      	mov	r0, r6
 8005950:	f001 f86a 	bl	8006a28 <get_tensor_byte_size>
 8005954:	9b02      	ldr	r3, [sp, #8]
 8005956:	4283      	cmp	r3, r0
 8005958:	d376      	bcc.n	8005a48 <ai_platform_network_process+0x2cc>
 800595a:	69b3      	ldr	r3, [r6, #24]
 800595c:	6818      	ldr	r0, [r3, #0]
 800595e:	f000 ffdb 	bl	8006918 <ai_array_to_buffer_fmt>
 8005962:	f8db 3000 	ldr.w	r3, [fp]
 8005966:	4058      	eors	r0, r3
 8005968:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800596c:	f040 8134 	bne.w	8005bd8 <ai_platform_network_process+0x45c>
 8005970:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 8127 	beq.w	8005bc8 <ai_platform_network_process+0x44c>
 800597a:	f8db 3018 	ldr.w	r3, [fp, #24]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 8133 	beq.w	8005bec <ai_platform_network_process+0x470>
 8005986:	9a01      	ldr	r2, [sp, #4]
 8005988:	429a      	cmp	r2, r3
 800598a:	bf38      	it	cc
 800598c:	461a      	movcc	r2, r3
 800598e:	4630      	mov	r0, r6
 8005990:	9201      	str	r2, [sp, #4]
 8005992:	f001 f849 	bl	8006a28 <get_tensor_byte_size>
 8005996:	f8c9 0008 	str.w	r0, [r9, #8]
 800599a:	f8db 3018 	ldr.w	r3, [fp, #24]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	fb00 f303 	mul.w	r3, r0, r3
 80059a4:	f8c9 300c 	str.w	r3, [r9, #12]
 80059a8:	f8db 1004 	ldr.w	r1, [fp, #4]
 80059ac:	f8c9 1004 	str.w	r1, [r9, #4]
 80059b0:	440b      	add	r3, r1
 80059b2:	f844 300a 	str.w	r3, [r4, sl]
 80059b6:	69b0      	ldr	r0, [r6, #24]
 80059b8:	6803      	ldr	r3, [r0, #0]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	f107 0701 	add.w	r7, r7, #1
 80059c0:	f10b 0b1c 	add.w	fp, fp, #28
 80059c4:	d44a      	bmi.n	8005a5c <ai_platform_network_process+0x2e0>
 80059c6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80059ca:	1a9b      	subs	r3, r3, r2
 80059cc:	4419      	add	r1, r3
 80059ce:	6081      	str	r1, [r0, #8]
 80059d0:	69b3      	ldr	r3, [r6, #24]
 80059d2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80059d6:	60da      	str	r2, [r3, #12]
 80059d8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80059dc:	42bb      	cmp	r3, r7
 80059de:	d880      	bhi.n	80058e2 <ai_platform_network_process+0x166>
 80059e0:	e041      	b.n	8005a66 <ai_platform_network_process+0x2ea>
 80059e2:	692a      	ldr	r2, [r5, #16]
 80059e4:	61ab      	str	r3, [r5, #24]
 80059e6:	f002 0203 	and.w	r2, r2, #3
 80059ea:	2a03      	cmp	r2, #3
 80059ec:	d115      	bne.n	8005a1a <ai_platform_network_process+0x29e>
 80059ee:	2217      	movs	r2, #23
 80059f0:	2112      	movs	r1, #18
 80059f2:	f105 000c 	add.w	r0, r5, #12
 80059f6:	f000 f903 	bl	8005c00 <core_set_error>
 80059fa:	2400      	movs	r4, #0
 80059fc:	4620      	mov	r0, r4
 80059fe:	b005      	add	sp, #20
 8005a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a04:	f8ba 3000 	ldrh.w	r3, [sl]
 8005a08:	429f      	cmp	r7, r3
 8005a0a:	f4ff aee0 	bcc.w	80057ce <ai_platform_network_process+0x52>
 8005a0e:	e755      	b.n	80058bc <ai_platform_network_process+0x140>
 8005a10:	2400      	movs	r4, #0
 8005a12:	4620      	mov	r0, r4
 8005a14:	b005      	add	sp, #20
 8005a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a1a:	2230      	movs	r2, #48	@ 0x30
 8005a1c:	2111      	movs	r1, #17
 8005a1e:	f105 000c 	add.w	r0, r5, #12
 8005a22:	f000 f8ed 	bl	8005c00 <core_set_error>
 8005a26:	2400      	movs	r4, #0
 8005a28:	4620      	mov	r0, r4
 8005a2a:	b005      	add	sp, #20
 8005a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a30:	9d03      	ldr	r5, [sp, #12]
 8005a32:	2218      	movs	r2, #24
 8005a34:	2112      	movs	r1, #18
 8005a36:	f105 000c 	add.w	r0, r5, #12
 8005a3a:	f000 f8e1 	bl	8005c00 <core_set_error>
 8005a3e:	2400      	movs	r4, #0
 8005a40:	4620      	mov	r0, r4
 8005a42:	b005      	add	sp, #20
 8005a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a48:	2218      	movs	r2, #24
 8005a4a:	2113      	movs	r1, #19
 8005a4c:	f105 000c 	add.w	r0, r5, #12
 8005a50:	f000 f8d6 	bl	8005c00 <core_set_error>
 8005a54:	2400      	movs	r4, #0
 8005a56:	e7d1      	b.n	80059fc <ai_platform_network_process+0x280>
 8005a58:	a1c00100 	.word	0xa1c00100
 8005a5c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005a60:	429f      	cmp	r7, r3
 8005a62:	f4ff af3e 	bcc.w	80058e2 <ai_platform_network_process+0x166>
 8005a66:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005a6a:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8005a6c:	832b      	strh	r3, [r5, #24]
 8005a6e:	2a00      	cmp	r2, #0
 8005a70:	f040 808c 	bne.w	8005b8c <ai_platform_network_process+0x410>
 8005a74:	4616      	mov	r6, r2
 8005a76:	4617      	mov	r7, r2
 8005a78:	8b6c      	ldrh	r4, [r5, #26]
 8005a7a:	429c      	cmp	r4, r3
 8005a7c:	bf38      	it	cc
 8005a7e:	46ab      	movcc	fp, r5
 8005a80:	d2bc      	bcs.n	80059fc <ai_platform_network_process+0x280>
 8005a82:	2e00      	cmp	r6, #0
 8005a84:	d030      	beq.n	8005ae8 <ai_platform_network_process+0x36c>
 8005a86:	f04f 0800 	mov.w	r8, #0
 8005a8a:	e014      	b.n	8005ab6 <ai_platform_network_process+0x33a>
 8005a8c:	6882      	ldr	r2, [r0, #8]
 8005a8e:	68c5      	ldr	r5, [r0, #12]
 8005a90:	6863      	ldr	r3, [r4, #4]
 8005a92:	1b52      	subs	r2, r2, r5
 8005a94:	4413      	add	r3, r2
 8005a96:	6083      	str	r3, [r0, #8]
 8005a98:	698b      	ldr	r3, [r1, #24]
 8005a9a:	6862      	ldr	r2, [r4, #4]
 8005a9c:	60da      	str	r2, [r3, #12]
 8005a9e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8005aa2:	f859 200a 	ldr.w	r2, [r9, sl]
 8005aa6:	440b      	add	r3, r1
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	bf24      	itt	cs
 8005aac:	68e3      	ldrcs	r3, [r4, #12]
 8005aae:	1ad3      	subcs	r3, r2, r3
 8005ab0:	6063      	str	r3, [r4, #4]
 8005ab2:	f108 0801 	add.w	r8, r8, #1
 8005ab6:	8833      	ldrh	r3, [r6, #0]
 8005ab8:	4543      	cmp	r3, r8
 8005aba:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8005abe:	d913      	bls.n	8005ae8 <ai_platform_network_process+0x36c>
 8005ac0:	6873      	ldr	r3, [r6, #4]
 8005ac2:	b18b      	cbz	r3, 8005ae8 <ai_platform_network_process+0x36c>
 8005ac4:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8005ac8:	b171      	cbz	r1, 8005ae8 <ai_platform_network_process+0x36c>
 8005aca:	6988      	ldr	r0, [r1, #24]
 8005acc:	68b2      	ldr	r2, [r6, #8]
 8005ace:	6803      	ldr	r3, [r0, #0]
 8005ad0:	f8d2 9000 	ldr.w	r9, [r2]
 8005ad4:	009d      	lsls	r5, r3, #2
 8005ad6:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8005ada:	d5d7      	bpl.n	8005a8c <ai_platform_network_process+0x310>
 8005adc:	6881      	ldr	r1, [r0, #8]
 8005ade:	68a2      	ldr	r2, [r4, #8]
 8005ae0:	6860      	ldr	r0, [r4, #4]
 8005ae2:	f000 fe77 	bl	80067d4 <st_int8_copy>
 8005ae6:	e7da      	b.n	8005a9e <ai_platform_network_process+0x322>
 8005ae8:	4658      	mov	r0, fp
 8005aea:	f000 f8e1 	bl	8005cb0 <ai_layers_forward_all>
 8005aee:	2f00      	cmp	r7, #0
 8005af0:	d03d      	beq.n	8005b6e <ai_platform_network_process+0x3f2>
 8005af2:	2400      	movs	r4, #0
 8005af4:	e016      	b.n	8005b24 <ai_platform_network_process+0x3a8>
 8005af6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8005afa:	f859 100a 	ldr.w	r1, [r9, sl]
 8005afe:	4413      	add	r3, r2
 8005b00:	428b      	cmp	r3, r1
 8005b02:	bf24      	itt	cs
 8005b04:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8005b08:	1acb      	subcs	r3, r1, r3
 8005b0a:	f8c8 3004 	str.w	r3, [r8, #4]
 8005b0e:	6981      	ldr	r1, [r0, #24]
 8005b10:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8005b14:	1b52      	subs	r2, r2, r5
 8005b16:	4413      	add	r3, r2
 8005b18:	608b      	str	r3, [r1, #8]
 8005b1a:	6983      	ldr	r3, [r0, #24]
 8005b1c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005b20:	60da      	str	r2, [r3, #12]
 8005b22:	3401      	adds	r4, #1
 8005b24:	883b      	ldrh	r3, [r7, #0]
 8005b26:	42a3      	cmp	r3, r4
 8005b28:	d921      	bls.n	8005b6e <ai_platform_network_process+0x3f2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	b1fb      	cbz	r3, 8005b6e <ai_platform_network_process+0x3f2>
 8005b2e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005b32:	b1e0      	cbz	r0, 8005b6e <ai_platform_network_process+0x3f2>
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	6983      	ldr	r3, [r0, #24]
 8005b38:	f8d2 9000 	ldr.w	r9, [r2]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	0092      	lsls	r2, r2, #2
 8005b40:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8005b44:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8005b48:	d5d5      	bpl.n	8005af6 <ai_platform_network_process+0x37a>
 8005b4a:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8005b4e:	6898      	ldr	r0, [r3, #8]
 8005b50:	f000 fe40 	bl	80067d4 <st_int8_copy>
 8005b54:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8005b58:	f859 200a 	ldr.w	r2, [r9, sl]
 8005b5c:	440b      	add	r3, r1
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	bf24      	itt	cs
 8005b62:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8005b66:	1ad3      	subcs	r3, r2, r3
 8005b68:	f8c8 3004 	str.w	r3, [r8, #4]
 8005b6c:	e7d9      	b.n	8005b22 <ai_platform_network_process+0x3a6>
 8005b6e:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 8005b72:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8005b76:	3401      	adds	r4, #1
 8005b78:	b2a4      	uxth	r4, r4
 8005b7a:	42a3      	cmp	r3, r4
 8005b7c:	f8ab 401a 	strh.w	r4, [fp, #26]
 8005b80:	f63f af7f 	bhi.w	8005a82 <ai_platform_network_process+0x306>
 8005b84:	4620      	mov	r0, r4
 8005b86:	b005      	add	sp, #20
 8005b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b8c:	2a01      	cmp	r2, #1
 8005b8e:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8005b90:	d02a      	beq.n	8005be8 <ai_platform_network_process+0x46c>
 8005b92:	f106 070c 	add.w	r7, r6, #12
 8005b96:	e76f      	b.n	8005a78 <ai_platform_network_process+0x2fc>
 8005b98:	9d03      	ldr	r5, [sp, #12]
 8005b9a:	e728      	b.n	80059ee <ai_platform_network_process+0x272>
 8005b9c:	9d03      	ldr	r5, [sp, #12]
 8005b9e:	2219      	movs	r2, #25
 8005ba0:	2112      	movs	r1, #18
 8005ba2:	f105 000c 	add.w	r0, r5, #12
 8005ba6:	f000 f82b 	bl	8005c00 <core_set_error>
 8005baa:	2400      	movs	r4, #0
 8005bac:	e726      	b.n	80059fc <ai_platform_network_process+0x280>
 8005bae:	9d03      	ldr	r5, [sp, #12]
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	2221      	movs	r2, #33	@ 0x21
 8005bb4:	2112      	movs	r1, #18
 8005bb6:	f105 000c 	add.w	r0, r5, #12
 8005bba:	f000 f821 	bl	8005c00 <core_set_error>
 8005bbe:	e71d      	b.n	80059fc <ai_platform_network_process+0x280>
 8005bc0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005bc4:	832b      	strh	r3, [r5, #24]
 8005bc6:	e752      	b.n	8005a6e <ai_platform_network_process+0x2f2>
 8005bc8:	2217      	movs	r2, #23
 8005bca:	2113      	movs	r1, #19
 8005bcc:	f105 000c 	add.w	r0, r5, #12
 8005bd0:	f000 f816 	bl	8005c00 <core_set_error>
 8005bd4:	2400      	movs	r4, #0
 8005bd6:	e711      	b.n	80059fc <ai_platform_network_process+0x280>
 8005bd8:	2219      	movs	r2, #25
 8005bda:	2113      	movs	r1, #19
 8005bdc:	f105 000c 	add.w	r0, r5, #12
 8005be0:	f000 f80e 	bl	8005c00 <core_set_error>
 8005be4:	2400      	movs	r4, #0
 8005be6:	e709      	b.n	80059fc <ai_platform_network_process+0x280>
 8005be8:	2700      	movs	r7, #0
 8005bea:	e745      	b.n	8005a78 <ai_platform_network_process+0x2fc>
 8005bec:	4604      	mov	r4, r0
 8005bee:	2221      	movs	r2, #33	@ 0x21
 8005bf0:	2113      	movs	r1, #19
 8005bf2:	f105 000c 	add.w	r0, r5, #12
 8005bf6:	f000 f803 	bl	8005c00 <core_set_error>
 8005bfa:	e6ff      	b.n	80059fc <ai_platform_network_process+0x280>

08005bfc <core_init>:
 8005bfc:	2001      	movs	r0, #1
 8005bfe:	4770      	bx	lr

08005c00 <core_set_error>:
 8005c00:	4603      	mov	r3, r0
 8005c02:	7800      	ldrb	r0, [r0, #0]
 8005c04:	b108      	cbz	r0, 8005c0a <core_set_error+0xa>
 8005c06:	2000      	movs	r0, #0
 8005c08:	4770      	bx	lr
 8005c0a:	7019      	strb	r1, [r3, #0]
 8005c0c:	6819      	ldr	r1, [r3, #0]
 8005c0e:	f362 211f 	bfi	r1, r2, #8, #24
 8005c12:	2001      	movs	r0, #1
 8005c14:	6019      	str	r1, [r3, #0]
 8005c16:	4770      	bx	lr

08005c18 <ai_check_custom_types>:
 8005c18:	b082      	sub	sp, #8
 8005c1a:	4b13      	ldr	r3, [pc, #76]	@ (8005c68 <ai_check_custom_types+0x50>)
 8005c1c:	9301      	str	r3, [sp, #4]
 8005c1e:	b118      	cbz	r0, 8005c28 <ai_check_custom_types+0x10>
 8005c20:	7803      	ldrb	r3, [r0, #0]
 8005c22:	2b03      	cmp	r3, #3
 8005c24:	d002      	beq.n	8005c2c <ai_check_custom_types+0x14>
 8005c26:	2000      	movs	r0, #0
 8005c28:	b002      	add	sp, #8
 8005c2a:	4770      	bx	lr
 8005c2c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d004      	beq.n	8005c3e <ai_check_custom_types+0x26>
 8005c34:	2001      	movs	r0, #1
 8005c36:	f080 0001 	eor.w	r0, r0, #1
 8005c3a:	b002      	add	sp, #8
 8005c3c:	4770      	bx	lr
 8005c3e:	7842      	ldrb	r2, [r0, #1]
 8005c40:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	f100 0001 	add.w	r0, r0, #1
 8005c4a:	d1f3      	bne.n	8005c34 <ai_check_custom_types+0x1c>
 8005c4c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005c50:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d1ed      	bne.n	8005c34 <ai_check_custom_types+0x1c>
 8005c58:	7842      	ldrb	r2, [r0, #1]
 8005c5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d1e8      	bne.n	8005c34 <ai_check_custom_types+0x1c>
 8005c62:	2000      	movs	r0, #0
 8005c64:	e7e7      	b.n	8005c36 <ai_check_custom_types+0x1e>
 8005c66:	bf00      	nop
 8005c68:	84048403 	.word	0x84048403

08005c6c <ai_layers_init_all>:
 8005c6c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005c6e:	2100      	movs	r1, #0
 8005c70:	b143      	cbz	r3, 8005c84 <ai_layers_init_all+0x18>
 8005c72:	691a      	ldr	r2, [r3, #16]
 8005c74:	60d8      	str	r0, [r3, #12]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	f101 0101 	add.w	r1, r1, #1
 8005c7c:	d002      	beq.n	8005c84 <ai_layers_init_all+0x18>
 8005c7e:	b10a      	cbz	r2, 8005c84 <ai_layers_init_all+0x18>
 8005c80:	4613      	mov	r3, r2
 8005c82:	e7f5      	b.n	8005c70 <ai_layers_init_all+0x4>
 8005c84:	4608      	mov	r0, r1
 8005c86:	4770      	bx	lr

08005c88 <ai_layers_post_init_all>:
 8005c88:	b538      	push	{r3, r4, r5, lr}
 8005c8a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005c8c:	2500      	movs	r5, #0
 8005c8e:	b16c      	cbz	r4, 8005cac <ai_layers_post_init_all+0x24>
 8005c90:	6863      	ldr	r3, [r4, #4]
 8005c92:	07db      	lsls	r3, r3, #31
 8005c94:	d504      	bpl.n	8005ca0 <ai_layers_post_init_all+0x18>
 8005c96:	6a23      	ldr	r3, [r4, #32]
 8005c98:	4620      	mov	r0, r4
 8005c9a:	b10b      	cbz	r3, 8005ca0 <ai_layers_post_init_all+0x18>
 8005c9c:	4798      	blx	r3
 8005c9e:	3501      	adds	r5, #1
 8005ca0:	6923      	ldr	r3, [r4, #16]
 8005ca2:	42a3      	cmp	r3, r4
 8005ca4:	d002      	beq.n	8005cac <ai_layers_post_init_all+0x24>
 8005ca6:	b10b      	cbz	r3, 8005cac <ai_layers_post_init_all+0x24>
 8005ca8:	461c      	mov	r4, r3
 8005caa:	e7f0      	b.n	8005c8e <ai_layers_post_init_all+0x6>
 8005cac:	4628      	mov	r0, r5
 8005cae:	bd38      	pop	{r3, r4, r5, pc}

08005cb0 <ai_layers_forward_all>:
 8005cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb4:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8005cb8:	4604      	mov	r4, r0
 8005cba:	f1b8 0f00 	cmp.w	r8, #0
 8005cbe:	d02b      	beq.n	8005d18 <ai_layers_forward_all+0x68>
 8005cc0:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8005cc2:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8005cc4:	b321      	cbz	r1, 8005d10 <ai_layers_forward_all+0x60>
 8005cc6:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8005cc8:	2001      	movs	r0, #1
 8005cca:	47c0      	blx	r8
 8005ccc:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8005cce:	b1fe      	cbz	r6, 8005d10 <ai_layers_forward_all+0x60>
 8005cd0:	2700      	movs	r7, #0
 8005cd2:	4631      	mov	r1, r6
 8005cd4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005cd6:	2002      	movs	r0, #2
 8005cd8:	47c0      	blx	r8
 8005cda:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8005cdc:	4628      	mov	r0, r5
 8005cde:	696b      	ldr	r3, [r5, #20]
 8005ce0:	4798      	blx	r3
 8005ce2:	692e      	ldr	r6, [r5, #16]
 8005ce4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005ce6:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8005ce8:	42b5      	cmp	r5, r6
 8005cea:	f04f 0003 	mov.w	r0, #3
 8005cee:	d007      	beq.n	8005d00 <ai_layers_forward_all+0x50>
 8005cf0:	47c0      	blx	r8
 8005cf2:	3701      	adds	r7, #1
 8005cf4:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8005cf6:	2e00      	cmp	r6, #0
 8005cf8:	d1eb      	bne.n	8005cd2 <ai_layers_forward_all+0x22>
 8005cfa:	4638      	mov	r0, r7
 8005cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d00:	2003      	movs	r0, #3
 8005d02:	47c0      	blx	r8
 8005d04:	2300      	movs	r3, #0
 8005d06:	3701      	adds	r7, #1
 8005d08:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8005d0a:	4638      	mov	r0, r7
 8005d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d10:	2700      	movs	r7, #0
 8005d12:	4638      	mov	r0, r7
 8005d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d18:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8005d1a:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8005d1c:	2d00      	cmp	r5, #0
 8005d1e:	d0f7      	beq.n	8005d10 <ai_layers_forward_all+0x60>
 8005d20:	4647      	mov	r7, r8
 8005d22:	696b      	ldr	r3, [r5, #20]
 8005d24:	4628      	mov	r0, r5
 8005d26:	4798      	blx	r3
 8005d28:	462b      	mov	r3, r5
 8005d2a:	692d      	ldr	r5, [r5, #16]
 8005d2c:	429d      	cmp	r5, r3
 8005d2e:	d004      	beq.n	8005d3a <ai_layers_forward_all+0x8a>
 8005d30:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8005d32:	3701      	adds	r7, #1
 8005d34:	2d00      	cmp	r5, #0
 8005d36:	d1f4      	bne.n	8005d22 <ai_layers_forward_all+0x72>
 8005d38:	e7df      	b.n	8005cfa <ai_layers_forward_all+0x4a>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8005d3e:	3701      	adds	r7, #1
 8005d40:	e7db      	b.n	8005cfa <ai_layers_forward_all+0x4a>
 8005d42:	bf00      	nop

08005d44 <forward_dense>:
 8005d44:	6982      	ldr	r2, [r0, #24]
 8005d46:	8813      	ldrh	r3, [r2, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d043      	beq.n	8005dd4 <forward_dense+0x90>
 8005d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d50:	6855      	ldr	r5, [r2, #4]
 8005d52:	6869      	ldr	r1, [r5, #4]
 8005d54:	b08e      	sub	sp, #56	@ 0x38
 8005d56:	b101      	cbz	r1, 8005d5a <forward_dense+0x16>
 8005d58:	6809      	ldr	r1, [r1, #0]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d069      	beq.n	8005e32 <forward_dense+0xee>
 8005d5e:	692a      	ldr	r2, [r5, #16]
 8005d60:	b102      	cbz	r2, 8005d64 <forward_dense+0x20>
 8005d62:	6812      	ldr	r2, [r2, #0]
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d061      	beq.n	8005e2c <forward_dense+0xe8>
 8005d68:	69ec      	ldr	r4, [r5, #28]
 8005d6a:	2c00      	cmp	r4, #0
 8005d6c:	d057      	beq.n	8005e1e <forward_dense+0xda>
 8005d6e:	8b2e      	ldrh	r6, [r5, #24]
 8005d70:	6820      	ldr	r0, [r4, #0]
 8005d72:	2e01      	cmp	r6, #1
 8005d74:	d955      	bls.n	8005e22 <forward_dense+0xde>
 8005d76:	6864      	ldr	r4, [r4, #4]
 8005d78:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8005d7c:	68cf      	ldr	r7, [r1, #12]
 8005d7e:	68d0      	ldr	r0, [r2, #12]
 8005d80:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8005d84:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8005d88:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 8005d8c:	f8d9 0000 	ldr.w	r0, [r9]
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	fb06 f807 	mul.w	r8, r6, r7
 8005d96:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 8005d9a:	d044      	beq.n	8005e26 <forward_dense+0xe2>
 8005d9c:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 8005d9e:	b11d      	cbz	r5, 8005da8 <forward_dense+0x64>
 8005da0:	682d      	ldr	r5, [r5, #0]
 8005da2:	b10d      	cbz	r5, 8005da8 <forward_dense+0x64>
 8005da4:	69ab      	ldr	r3, [r5, #24]
 8005da6:	689d      	ldr	r5, [r3, #8]
 8005da8:	6992      	ldr	r2, [r2, #24]
 8005daa:	698b      	ldr	r3, [r1, #24]
 8005dac:	6890      	ldr	r0, [r2, #8]
 8005dae:	6899      	ldr	r1, [r3, #8]
 8005db0:	b10c      	cbz	r4, 8005db6 <forward_dense+0x72>
 8005db2:	69a3      	ldr	r3, [r4, #24]
 8005db4:	689c      	ldr	r4, [r3, #8]
 8005db6:	4b20      	ldr	r3, [pc, #128]	@ (8005e38 <forward_dense+0xf4>)
 8005db8:	459c      	cmp	ip, r3
 8005dba:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 8005dbe:	d023      	beq.n	8005e08 <forward_dense+0xc4>
 8005dc0:	4e1e      	ldr	r6, [pc, #120]	@ (8005e3c <forward_dense+0xf8>)
 8005dc2:	45b4      	cmp	ip, r6
 8005dc4:	d015      	beq.n	8005df2 <forward_dense+0xae>
 8005dc6:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 8005dca:	459c      	cmp	ip, r3
 8005dcc:	d004      	beq.n	8005dd8 <forward_dense+0x94>
 8005dce:	b00e      	add	sp, #56	@ 0x38
 8005dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	deff      	udf	#255	@ 0xff
 8005dd8:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8005ddc:	a807      	add	r0, sp, #28
 8005dde:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 8005de2:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 8005de6:	9209      	str	r2, [sp, #36]	@ 0x24
 8005de8:	f000 f944 	bl	8006074 <forward_lite_dense_if32of32wf32>
 8005dec:	b00e      	add	sp, #56	@ 0x38
 8005dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df2:	e9cd e803 	strd	lr, r8, [sp, #12]
 8005df6:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8005dfa:	9500      	str	r5, [sp, #0]
 8005dfc:	464b      	mov	r3, r9
 8005dfe:	f000 fa93 	bl	8006328 <forward_lite_dense_if32of32wf32_lut4>
 8005e02:	b00e      	add	sp, #56	@ 0x38
 8005e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e08:	e9cd e803 	strd	lr, r8, [sp, #12]
 8005e0c:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8005e10:	9500      	str	r5, [sp, #0]
 8005e12:	464b      	mov	r3, r9
 8005e14:	f000 fbb0 	bl	8006578 <forward_lite_dense_if32of32wf32_lut8>
 8005e18:	b00e      	add	sp, #56	@ 0x38
 8005e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1e:	4620      	mov	r0, r4
 8005e20:	e7aa      	b.n	8005d78 <forward_dense+0x34>
 8005e22:	2400      	movs	r4, #0
 8005e24:	e7a8      	b.n	8005d78 <forward_dense+0x34>
 8005e26:	2300      	movs	r3, #0
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	deff      	udf	#255	@ 0xff
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	deff      	udf	#255	@ 0xff
 8005e32:	2300      	movs	r3, #0
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	deff      	udf	#255	@ 0xff
 8005e38:	00d01040 	.word	0x00d01040
 8005e3c:	00f01040 	.word	0x00f01040

08005e40 <forward_relu>:
 8005e40:	6982      	ldr	r2, [r0, #24]
 8005e42:	8813      	ldrh	r3, [r2, #0]
 8005e44:	b323      	cbz	r3, 8005e90 <forward_relu+0x50>
 8005e46:	6851      	ldr	r1, [r2, #4]
 8005e48:	684a      	ldr	r2, [r1, #4]
 8005e4a:	b102      	cbz	r2, 8005e4e <forward_relu+0xe>
 8005e4c:	6812      	ldr	r2, [r2, #0]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	f000 808d 	beq.w	8005f6e <forward_relu+0x12e>
 8005e54:	b470      	push	{r4, r5, r6}
 8005e56:	6909      	ldr	r1, [r1, #16]
 8005e58:	b101      	cbz	r1, 8005e5c <forward_relu+0x1c>
 8005e5a:	6809      	ldr	r1, [r1, #0]
 8005e5c:	69c6      	ldr	r6, [r0, #28]
 8005e5e:	b1ce      	cbz	r6, 8005e94 <forward_relu+0x54>
 8005e60:	6873      	ldr	r3, [r6, #4]
 8005e62:	6988      	ldr	r0, [r1, #24]
 8005e64:	6991      	ldr	r1, [r2, #24]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d044      	beq.n	8005ef4 <forward_relu+0xb4>
 8005e6a:	6893      	ldr	r3, [r2, #8]
 8005e6c:	6880      	ldr	r0, [r0, #8]
 8005e6e:	6889      	ldr	r1, [r1, #8]
 8005e70:	0a1b      	lsrs	r3, r3, #8
 8005e72:	d073      	beq.n	8005f5c <forward_relu+0x11c>
 8005e74:	68d5      	ldr	r5, [r2, #12]
 8005e76:	2201      	movs	r2, #1
 8005e78:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005e7c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8005e80:	429d      	cmp	r5, r3
 8005e82:	fb04 f202 	mul.w	r2, r4, r2
 8005e86:	d1f9      	bne.n	8005e7c <forward_relu+0x3c>
 8005e88:	68b3      	ldr	r3, [r6, #8]
 8005e8a:	bc70      	pop	{r4, r5, r6}
 8005e8c:	f000 b874 	b.w	8005f78 <forward_lite_nl_relu_generic_if32of32_kernel>
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	deff      	udf	#255	@ 0xff
 8005e94:	6893      	ldr	r3, [r2, #8]
 8005e96:	6989      	ldr	r1, [r1, #24]
 8005e98:	6990      	ldr	r0, [r2, #24]
 8005e9a:	6889      	ldr	r1, [r1, #8]
 8005e9c:	6884      	ldr	r4, [r0, #8]
 8005e9e:	0a1b      	lsrs	r3, r3, #8
 8005ea0:	d05e      	beq.n	8005f60 <forward_relu+0x120>
 8005ea2:	68d5      	ldr	r5, [r2, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005eaa:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8005eae:	429d      	cmp	r5, r3
 8005eb0:	fb00 f202 	mul.w	r2, r0, r2
 8005eb4:	d1f9      	bne.n	8005eaa <forward_relu+0x6a>
 8005eb6:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005ec0:	4294      	cmp	r4, r2
 8005ec2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005ec6:	d813      	bhi.n	8005ef0 <forward_relu+0xb0>
 8005ec8:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8005f74 <forward_relu+0x134>
 8005ecc:	3204      	adds	r2, #4
 8005ece:	3104      	adds	r1, #4
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	ed72 7a01 	vldmdb	r2!, {s15}
 8005ed6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ede:	f1a3 0308 	sub.w	r3, r3, #8
 8005ee2:	bfb8      	it	lt
 8005ee4:	eef0 7a47 	vmovlt.f32	s15, s14
 8005ee8:	429c      	cmp	r4, r3
 8005eea:	ed61 7a01 	vstmdb	r1!, {s15}
 8005eee:	d9ef      	bls.n	8005ed0 <forward_relu+0x90>
 8005ef0:	bc70      	pop	{r4, r5, r6}
 8005ef2:	4770      	bx	lr
 8005ef4:	688c      	ldr	r4, [r1, #8]
 8005ef6:	6891      	ldr	r1, [r2, #8]
 8005ef8:	6880      	ldr	r0, [r0, #8]
 8005efa:	0a09      	lsrs	r1, r1, #8
 8005efc:	d032      	beq.n	8005f64 <forward_relu+0x124>
 8005efe:	68d5      	ldr	r5, [r2, #12]
 8005f00:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8005f04:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005f08:	4295      	cmp	r5, r2
 8005f0a:	fb01 f303 	mul.w	r3, r1, r3
 8005f0e:	d1f9      	bne.n	8005f04 <forward_relu+0xc4>
 8005f10:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005f14:	3a01      	subs	r2, #1
 8005f16:	68b1      	ldr	r1, [r6, #8]
 8005f18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f1c:	429c      	cmp	r4, r3
 8005f1e:	ed91 7a00 	vldr	s14, [r1]
 8005f22:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8005f26:	d8e3      	bhi.n	8005ef0 <forward_relu+0xb0>
 8005f28:	2500      	movs	r5, #0
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	1d02      	adds	r2, r0, #4
 8005f2e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005f32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f3a:	f1a3 0104 	sub.w	r1, r3, #4
 8005f3e:	f1a3 0308 	sub.w	r3, r3, #8
 8005f42:	d405      	bmi.n	8005f50 <forward_relu+0x110>
 8005f44:	429c      	cmp	r4, r3
 8005f46:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005f4a:	d8d1      	bhi.n	8005ef0 <forward_relu+0xb0>
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	e7ee      	b.n	8005f2e <forward_relu+0xee>
 8005f50:	429c      	cmp	r4, r3
 8005f52:	ed62 7a01 	vstmdb	r2!, {s15}
 8005f56:	d8cb      	bhi.n	8005ef0 <forward_relu+0xb0>
 8005f58:	460b      	mov	r3, r1
 8005f5a:	e7e8      	b.n	8005f2e <forward_relu+0xee>
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	e793      	b.n	8005e88 <forward_relu+0x48>
 8005f60:	4622      	mov	r2, r4
 8005f62:	e7b1      	b.n	8005ec8 <forward_relu+0x88>
 8005f64:	68b2      	ldr	r2, [r6, #8]
 8005f66:	4623      	mov	r3, r4
 8005f68:	ed92 7a00 	vldr	s14, [r2]
 8005f6c:	e7dc      	b.n	8005f28 <forward_relu+0xe8>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	deff      	udf	#255	@ 0xff
 8005f74:	00000000 	.word	0x00000000

08005f78 <forward_lite_nl_relu_generic_if32of32_kernel>:
 8005f78:	edd3 6a02 	vldr	s13, [r3, #8]
 8005f7c:	ed93 7a00 	vldr	s14, [r3]
 8005f80:	ed93 6a01 	vldr	s12, [r3, #4]
 8005f84:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8005f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f8c:	d42a      	bmi.n	8005fe4 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8005f8e:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8005f92:	3a01      	subs	r2, #1
 8005f94:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8005f98:	4561      	cmp	r1, ip
 8005f9a:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8005f9e:	d85d      	bhi.n	800605c <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8005fa0:	1d11      	adds	r1, r2, #4
 8005fa2:	f10c 0304 	add.w	r3, ip, #4
 8005fa6:	4408      	add	r0, r1
 8005fa8:	ebac 0202 	sub.w	r2, ip, r2
 8005fac:	e00c      	b.n	8005fc8 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8005fae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb6:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8005fba:	db01      	blt.n	8005fc0 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8005fbc:	ee65 7a86 	vmul.f32	s15, s11, s12
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	ed60 7a01 	vstmdb	r0!, {s15}
 8005fc6:	d00c      	beq.n	8005fe2 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 8005fc8:	ed73 7a01 	vldmdb	r3!, {s15}
 8005fcc:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fd4:	daeb      	bge.n	8005fae <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 8005fd6:	eef0 7a66 	vmov.f32	s15, s13
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	ed60 7a01 	vstmdb	r0!, {s15}
 8005fe0:	d1f2      	bne.n	8005fc8 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8005fe2:	4770      	bx	lr
 8005fe4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005fe8:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8005fec:	3a01      	subs	r2, #1
 8005fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ff2:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8005ff6:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8005ffa:	d017      	beq.n	800602c <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 8005ffc:	4561      	cmp	r1, ip
 8005ffe:	d82d      	bhi.n	800605c <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8006000:	1d11      	adds	r1, r2, #4
 8006002:	f10c 0304 	add.w	r3, ip, #4
 8006006:	4401      	add	r1, r0
 8006008:	ebac 0202 	sub.w	r2, ip, r2
 800600c:	ed73 7a01 	vldmdb	r3!, {s15}
 8006010:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8006014:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800601c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006020:	d81d      	bhi.n	800605e <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 8006022:	4293      	cmp	r3, r2
 8006024:	ed61 6a01 	vstmdb	r1!, {s13}
 8006028:	d1f0      	bne.n	800600c <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 800602a:	4770      	bx	lr
 800602c:	4561      	cmp	r1, ip
 800602e:	d815      	bhi.n	800605c <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8006030:	1d11      	adds	r1, r2, #4
 8006032:	b500      	push	{lr}
 8006034:	f10c 0304 	add.w	r3, ip, #4
 8006038:	f04f 0e00 	mov.w	lr, #0
 800603c:	4401      	add	r1, r0
 800603e:	ebac 0202 	sub.w	r2, ip, r2
 8006042:	ed73 7a01 	vldmdb	r3!, {s15}
 8006046:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800604a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800604e:	d40b      	bmi.n	8006068 <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 8006050:	4293      	cmp	r3, r2
 8006052:	f841 ed04 	str.w	lr, [r1, #-4]!
 8006056:	d1f4      	bne.n	8006042 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 8006058:	f85d fb04 	ldr.w	pc, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	4293      	cmp	r3, r2
 8006060:	ed61 7a01 	vstmdb	r1!, {s15}
 8006064:	d1d2      	bne.n	800600c <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 8006066:	4770      	bx	lr
 8006068:	4293      	cmp	r3, r2
 800606a:	ed61 7a01 	vstmdb	r1!, {s15}
 800606e:	d1e8      	bne.n	8006042 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 8006070:	e7f2      	b.n	8006058 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 8006072:	bf00      	nop

08006074 <forward_lite_dense_if32of32wf32>:
 8006074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006078:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 800607c:	6801      	ldr	r1, [r0, #0]
 800607e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8006082:	fb02 f303 	mul.w	r3, r2, r3
 8006086:	b083      	sub	sp, #12
 8006088:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800608c:	4299      	cmp	r1, r3
 800608e:	9100      	str	r1, [sp, #0]
 8006090:	9301      	str	r3, [sp, #4]
 8006092:	f080 811e 	bcs.w	80062d2 <forward_lite_dense_if32of32wf32+0x25e>
 8006096:	6904      	ldr	r4, [r0, #16]
 8006098:	4607      	mov	r7, r0
 800609a:	0096      	lsls	r6, r2, #2
 800609c:	9b00      	ldr	r3, [sp, #0]
 800609e:	68bd      	ldr	r5, [r7, #8]
 80060a0:	eb03 0e06 	add.w	lr, r3, r6
 80060a4:	459e      	cmp	lr, r3
 80060a6:	461e      	mov	r6, r3
 80060a8:	f240 8104 	bls.w	80062b4 <forward_lite_dense_if32of32wf32+0x240>
 80060ac:	f1a4 0c10 	sub.w	ip, r4, #16
 80060b0:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 80060b4:	f10c 0c01 	add.w	ip, ip, #1
 80060b8:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 80060bc:	ea4f 0984 	mov.w	r9, r4, lsl #2
 80060c0:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 80060c4:	2c0f      	cmp	r4, #15
 80060c6:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8006324 <forward_lite_dense_if32of32wf32+0x2b0>
 80060ca:	f240 8105 	bls.w	80062d8 <forward_lite_dense_if32of32wf32+0x264>
 80060ce:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 80060d2:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 80060d6:	4621      	mov	r1, r4
 80060d8:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 80060dc:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 80060e0:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 80060e4:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 80060e8:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 80060ec:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 80060f0:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 80060f4:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 80060f8:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 80060fc:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 8006100:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 8006104:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 8006108:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800610c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006110:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8006114:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006118:	3910      	subs	r1, #16
 800611a:	290f      	cmp	r1, #15
 800611c:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 8006120:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 8006124:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006128:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 800612c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8006130:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 8006134:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 8006138:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800613c:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 8006140:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 8006144:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006148:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 800614c:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 8006150:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006154:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 8006158:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 800615c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006160:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8006164:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8006168:	eee4 7a24 	vfma.f32	s15, s8, s9
 800616c:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8006170:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8006174:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006178:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 800617c:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8006180:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006184:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8006188:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 800618c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8006190:	eee2 7a22 	vfma.f32	s15, s4, s5
 8006194:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006198:	eee4 7a24 	vfma.f32	s15, s8, s9
 800619c:	eee5 7a25 	vfma.f32	s15, s10, s11
 80061a0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80061a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061a8:	d896      	bhi.n	80060d8 <forward_lite_dense_if32of32wf32+0x64>
 80061aa:	eb05 020b 	add.w	r2, r5, fp
 80061ae:	f004 010f 	and.w	r1, r4, #15
 80061b2:	4663      	mov	r3, ip
 80061b4:	2903      	cmp	r1, #3
 80061b6:	d95f      	bls.n	8006278 <forward_lite_dense_if32of32wf32+0x204>
 80061b8:	edd2 6a01 	vldr	s13, [r2, #4]
 80061bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80061c0:	ed93 6a00 	vldr	s12, [r3]
 80061c4:	ed93 5a02 	vldr	s10, [r3, #8]
 80061c8:	edd2 5a02 	vldr	s11, [r2, #8]
 80061cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80061d0:	edd2 6a00 	vldr	s13, [r2]
 80061d4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80061d8:	1f08      	subs	r0, r1, #4
 80061da:	2803      	cmp	r0, #3
 80061dc:	ed93 6a03 	vldr	s12, [r3, #12]
 80061e0:	edd2 6a03 	vldr	s13, [r2, #12]
 80061e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061e8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80061ec:	eee6 7a26 	vfma.f32	s15, s12, s13
 80061f0:	eeb0 7a67 	vmov.f32	s14, s15
 80061f4:	d938      	bls.n	8006268 <forward_lite_dense_if32of32wf32+0x1f4>
 80061f6:	edd2 6a05 	vldr	s13, [r2, #20]
 80061fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80061fe:	ed93 6a04 	vldr	s12, [r3, #16]
 8006202:	ed93 5a06 	vldr	s10, [r3, #24]
 8006206:	edd2 5a06 	vldr	s11, [r2, #24]
 800620a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800620e:	edd2 6a04 	vldr	s13, [r2, #16]
 8006212:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006216:	f1a1 0a08 	sub.w	sl, r1, #8
 800621a:	f1ba 0f03 	cmp.w	sl, #3
 800621e:	ed93 6a07 	vldr	s12, [r3, #28]
 8006222:	edd2 6a07 	vldr	s13, [r2, #28]
 8006226:	eee5 7a25 	vfma.f32	s15, s10, s11
 800622a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800622e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006232:	d919      	bls.n	8006268 <forward_lite_dense_if32of32wf32+0x1f4>
 8006234:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8006238:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800623c:	ed92 6a08 	vldr	s12, [r2, #32]
 8006240:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 8006244:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8006248:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800624c:	edd3 6a08 	vldr	s13, [r3, #32]
 8006250:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006254:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 8006258:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800625c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006260:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006264:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006268:	0880      	lsrs	r0, r0, #2
 800626a:	3001      	adds	r0, #1
 800626c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8006270:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8006274:	f001 0103 	and.w	r1, r1, #3
 8006278:	b1a9      	cbz	r1, 80062a6 <forward_lite_dense_if32of32wf32+0x232>
 800627a:	edd3 6a00 	vldr	s13, [r3]
 800627e:	edd2 7a00 	vldr	s15, [r2]
 8006282:	3901      	subs	r1, #1
 8006284:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006288:	d00d      	beq.n	80062a6 <forward_lite_dense_if32of32wf32+0x232>
 800628a:	edd3 6a01 	vldr	s13, [r3, #4]
 800628e:	edd2 7a01 	vldr	s15, [r2, #4]
 8006292:	2901      	cmp	r1, #1
 8006294:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006298:	d005      	beq.n	80062a6 <forward_lite_dense_if32of32wf32+0x232>
 800629a:	edd2 6a02 	vldr	s13, [r2, #8]
 800629e:	edd3 7a02 	vldr	s15, [r3, #8]
 80062a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80062a6:	444d      	add	r5, r9
 80062a8:	eca6 7a01 	vstmia	r6!, {s14}
 80062ac:	45b6      	cmp	lr, r6
 80062ae:	f63f af09 	bhi.w	80060c4 <forward_lite_dense_if32of32wf32+0x50>
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	b99b      	cbnz	r3, 80062e0 <forward_lite_dense_if32of32wf32+0x26c>
 80062b8:	9b00      	ldr	r3, [sp, #0]
 80062ba:	9901      	ldr	r1, [sp, #4]
 80062bc:	693c      	ldr	r4, [r7, #16]
 80062be:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80062c2:	4299      	cmp	r1, r3
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 80062ca:	ea4f 0682 	mov.w	r6, r2, lsl #2
 80062ce:	f63f aee5 	bhi.w	800609c <forward_lite_dense_if32of32wf32+0x28>
 80062d2:	b003      	add	sp, #12
 80062d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d8:	4621      	mov	r1, r4
 80062da:	462a      	mov	r2, r5
 80062dc:	4643      	mov	r3, r8
 80062de:	e769      	b.n	80061b4 <forward_lite_dense_if32of32wf32+0x140>
 80062e0:	2a00      	cmp	r2, #0
 80062e2:	d0e9      	beq.n	80062b8 <forward_lite_dense_if32of32wf32+0x244>
 80062e4:	9a00      	ldr	r2, [sp, #0]
 80062e6:	ed93 7a00 	vldr	s14, [r3]
 80062ea:	edd2 7a00 	vldr	s15, [r2]
 80062ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062f2:	4613      	mov	r3, r2
 80062f4:	edc2 7a00 	vstr	s15, [r2]
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	2a01      	cmp	r2, #1
 80062fc:	d9dc      	bls.n	80062b8 <forward_lite_dense_if32of32wf32+0x244>
 80062fe:	1d19      	adds	r1, r3, #4
 8006300:	2301      	movs	r3, #1
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	ed91 7a00 	vldr	s14, [r1]
 8006308:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800630c:	edd2 7a00 	vldr	s15, [r2]
 8006310:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006314:	3301      	adds	r3, #1
 8006316:	ece1 7a01 	vstmia	r1!, {s15}
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	429a      	cmp	r2, r3
 800631e:	d8f0      	bhi.n	8006302 <forward_lite_dense_if32of32wf32+0x28e>
 8006320:	e7ca      	b.n	80062b8 <forward_lite_dense_if32of32wf32+0x244>
 8006322:	bf00      	nop
 8006324:	00000000 	.word	0x00000000

08006328 <forward_lite_dense_if32of32wf32_lut4>:
 8006328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800632c:	b08d      	sub	sp, #52	@ 0x34
 800632e:	4605      	mov	r5, r0
 8006330:	9005      	str	r0, [sp, #20]
 8006332:	920a      	str	r2, [sp, #40]	@ 0x28
 8006334:	4618      	mov	r0, r3
 8006336:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 800633a:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800633c:	fb02 f303 	mul.w	r3, r2, r3
 8006340:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006344:	460c      	mov	r4, r1
 8006346:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8006348:	9308      	str	r3, [sp, #32]
 800634a:	b126      	cbz	r6, 8006356 <forward_lite_dense_if32of32wf32_lut4+0x2e>
 800634c:	2240      	movs	r2, #64	@ 0x40
 800634e:	4631      	mov	r1, r6
 8006350:	f000 fa40 	bl	80067d4 <st_int8_copy>
 8006354:	4630      	mov	r0, r6
 8006356:	9b05      	ldr	r3, [sp, #20]
 8006358:	9a08      	ldr	r2, [sp, #32]
 800635a:	4293      	cmp	r3, r2
 800635c:	f080 80f5 	bcs.w	800654a <forward_lite_dense_if32of32wf32_lut4+0x222>
 8006360:	08eb      	lsrs	r3, r5, #3
 8006362:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006364:	9301      	str	r3, [sp, #4]
 8006366:	f005 0101 	and.w	r1, r5, #1
 800636a:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	0092      	lsls	r2, r2, #2
 8006372:	f025 0801 	bic.w	r8, r5, #1
 8006376:	9102      	str	r1, [sp, #8]
 8006378:	9304      	str	r3, [sp, #16]
 800637a:	00a9      	lsls	r1, r5, #2
 800637c:	9b05      	ldr	r3, [sp, #20]
 800637e:	9207      	str	r2, [sp, #28]
 8006380:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8006384:	9109      	str	r1, [sp, #36]	@ 0x24
 8006386:	f104 0b20 	add.w	fp, r4, #32
 800638a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800638c:	9a07      	ldr	r2, [sp, #28]
 800638e:	eb03 0902 	add.w	r9, r3, r2
 8006392:	4599      	cmp	r9, r3
 8006394:	f1ab 0220 	sub.w	r2, fp, #32
 8006398:	9206      	str	r2, [sp, #24]
 800639a:	f240 80d9 	bls.w	8006550 <forward_lite_dense_if32of32wf32_lut4+0x228>
 800639e:	469e      	mov	lr, r3
 80063a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063a2:	f108 33ff 	add.w	r3, r8, #4294967295
 80063a6:	9303      	str	r3, [sp, #12]
 80063a8:	9b01      	ldr	r3, [sp, #4]
 80063aa:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8006574 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 80b2 	beq.w	8006518 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 80063b4:	9b04      	ldr	r3, [sp, #16]
 80063b6:	18d5      	adds	r5, r2, r3
 80063b8:	465b      	mov	r3, fp
 80063ba:	7814      	ldrb	r4, [r2, #0]
 80063bc:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 80063c0:	7851      	ldrb	r1, [r2, #1]
 80063c2:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 80063c6:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 80063ca:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 80063ce:	ed13 5a04 	vldr	s10, [r3, #-16]
 80063d2:	ed53 5a03 	vldr	s11, [r3, #-12]
 80063d6:	ed13 6a02 	vldr	s12, [r3, #-8]
 80063da:	ed53 6a01 	vldr	s13, [r3, #-4]
 80063de:	f004 060f 	and.w	r6, r4, #15
 80063e2:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80063e6:	edd6 7a00 	vldr	s15, [r6]
 80063ea:	0924      	lsrs	r4, r4, #4
 80063ec:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80063f0:	ed94 3a00 	vldr	s6, [r4]
 80063f4:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80063f8:	090c      	lsrs	r4, r1, #4
 80063fa:	eee3 7a23 	vfma.f32	s15, s6, s7
 80063fe:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8006402:	f001 010f 	and.w	r1, r1, #15
 8006406:	edd4 3a00 	vldr	s7, [r4]
 800640a:	7894      	ldrb	r4, [r2, #2]
 800640c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006410:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006414:	0926      	lsrs	r6, r4, #4
 8006416:	ed91 4a00 	vldr	s8, [r1]
 800641a:	78d1      	ldrb	r1, [r2, #3]
 800641c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006420:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8006424:	f004 040f 	and.w	r4, r4, #15
 8006428:	edd6 4a00 	vldr	s9, [r6]
 800642c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006430:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8006434:	3204      	adds	r2, #4
 8006436:	ed94 5a00 	vldr	s10, [r4]
 800643a:	090c      	lsrs	r4, r1, #4
 800643c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006440:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8006444:	f001 010f 	and.w	r1, r1, #15
 8006448:	edd4 5a00 	vldr	s11, [r4]
 800644c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006450:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006454:	42aa      	cmp	r2, r5
 8006456:	ed91 6a00 	vldr	s12, [r1]
 800645a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800645e:	f103 0320 	add.w	r3, r3, #32
 8006462:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006466:	d1a8      	bne.n	80063ba <forward_lite_dense_if32of32wf32_lut4+0x92>
 8006468:	4656      	mov	r6, sl
 800646a:	4546      	cmp	r6, r8
 800646c:	d258      	bcs.n	8006520 <forward_lite_dense_if32of32wf32_lut4+0x1f8>
 800646e:	9b03      	ldr	r3, [sp, #12]
 8006470:	1b9c      	subs	r4, r3, r6
 8006472:	08e7      	lsrs	r7, r4, #3
 8006474:	f106 0208 	add.w	r2, r6, #8
 8006478:	1e69      	subs	r1, r5, #1
 800647a:	eb05 04d4 	add.w	r4, r5, r4, lsr #3
 800647e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006482:	ed52 5a01 	vldr	s11, [r2, #-4]
 8006486:	ed52 6a02 	vldr	s13, [r2, #-8]
 800648a:	f003 0c0f 	and.w	ip, r3, #15
 800648e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8006492:	eddc 7a00 	vldr	s15, [ip]
 8006496:	091b      	lsrs	r3, r3, #4
 8006498:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800649c:	ed93 6a00 	vldr	s12, [r3]
 80064a0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80064a4:	42a1      	cmp	r1, r4
 80064a6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80064aa:	f102 0208 	add.w	r2, r2, #8
 80064ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064b2:	d1e4      	bne.n	800647e <forward_lite_dense_if32of32wf32_lut4+0x156>
 80064b4:	3701      	adds	r7, #1
 80064b6:	19ea      	adds	r2, r5, r7
 80064b8:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 80064bc:	9b02      	ldr	r3, [sp, #8]
 80064be:	b30b      	cbz	r3, 8006504 <forward_lite_dense_if32of32wf32_lut4+0x1dc>
 80064c0:	f812 3b01 	ldrb.w	r3, [r2], #1
 80064c4:	edd6 7a00 	vldr	s15, [r6]
 80064c8:	091b      	lsrs	r3, r3, #4
 80064ca:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80064ce:	edd3 6a00 	vldr	s13, [r3]
 80064d2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80064d6:	ecae 7a01 	vstmia	lr!, {s14}
 80064da:	45f1      	cmp	r9, lr
 80064dc:	f63f af64 	bhi.w	80063a8 <forward_lite_dense_if32of32wf32_lut4+0x80>
 80064e0:	9b05      	ldr	r3, [sp, #20]
 80064e2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80064e4:	1899      	adds	r1, r3, r2
 80064e6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80064e8:	b9e3      	cbnz	r3, 8006524 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 80064ea:	9b08      	ldr	r3, [sp, #32]
 80064ec:	428b      	cmp	r3, r1
 80064ee:	d92c      	bls.n	800654a <forward_lite_dense_if32of32wf32_lut4+0x222>
 80064f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064f2:	4498      	add	r8, r3
 80064f4:	449a      	add	sl, r3
 80064f6:	449b      	add	fp, r3
 80064f8:	9b05      	ldr	r3, [sp, #20]
 80064fa:	4599      	cmp	r9, r3
 80064fc:	d92a      	bls.n	8006554 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 80064fe:	9105      	str	r1, [sp, #20]
 8006500:	460b      	mov	r3, r1
 8006502:	e743      	b.n	800638c <forward_lite_dense_if32of32wf32_lut4+0x64>
 8006504:	ecae 7a01 	vstmia	lr!, {s14}
 8006508:	45f1      	cmp	r9, lr
 800650a:	d9e9      	bls.n	80064e0 <forward_lite_dense_if32of32wf32_lut4+0x1b8>
 800650c:	9b01      	ldr	r3, [sp, #4]
 800650e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006574 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 8006512:	2b00      	cmp	r3, #0
 8006514:	f47f af4e 	bne.w	80063b4 <forward_lite_dense_if32of32wf32_lut4+0x8c>
 8006518:	9e06      	ldr	r6, [sp, #24]
 800651a:	4546      	cmp	r6, r8
 800651c:	4615      	mov	r5, r2
 800651e:	d3a6      	bcc.n	800646e <forward_lite_dense_if32of32wf32_lut4+0x146>
 8006520:	462a      	mov	r2, r5
 8006522:	e7cb      	b.n	80064bc <forward_lite_dense_if32of32wf32_lut4+0x194>
 8006524:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006526:	2b00      	cmp	r3, #0
 8006528:	d0df      	beq.n	80064ea <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 800652a:	9b07      	ldr	r3, [sp, #28]
 800652c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800652e:	1acb      	subs	r3, r1, r3
 8006530:	edd3 7a00 	vldr	s15, [r3]
 8006534:	ecb2 7a01 	vldmia	r2!, {s14}
 8006538:	ee77 7a87 	vadd.f32	s15, s15, s14
 800653c:	ece3 7a01 	vstmia	r3!, {s15}
 8006540:	428b      	cmp	r3, r1
 8006542:	d1f5      	bne.n	8006530 <forward_lite_dense_if32of32wf32_lut4+0x208>
 8006544:	9b08      	ldr	r3, [sp, #32]
 8006546:	428b      	cmp	r3, r1
 8006548:	d8d2      	bhi.n	80064f0 <forward_lite_dense_if32of32wf32_lut4+0x1c8>
 800654a:	b00d      	add	sp, #52	@ 0x34
 800654c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006550:	4619      	mov	r1, r3
 8006552:	e7c8      	b.n	80064e6 <forward_lite_dense_if32of32wf32_lut4+0x1be>
 8006554:	9b07      	ldr	r3, [sp, #28]
 8006556:	1acb      	subs	r3, r1, r3
 8006558:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800655a:	461a      	mov	r2, r3
 800655c:	ed92 7a00 	vldr	s14, [r2]
 8006560:	ecf0 7a01 	vldmia	r0!, {s15}
 8006564:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006568:	ece2 7a01 	vstmia	r2!, {s15}
 800656c:	428a      	cmp	r2, r1
 800656e:	d1f5      	bne.n	800655c <forward_lite_dense_if32of32wf32_lut4+0x234>
 8006570:	e7f2      	b.n	8006558 <forward_lite_dense_if32of32wf32_lut4+0x230>
 8006572:	bf00      	nop
 8006574:	00000000 	.word	0x00000000

08006578 <forward_lite_dense_if32of32wf32_lut8>:
 8006578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657c:	b087      	sub	sp, #28
 800657e:	460f      	mov	r7, r1
 8006580:	9204      	str	r2, [sp, #16]
 8006582:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	@ 0x4c
 8006586:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006588:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800658a:	fb01 f202 	mul.w	r2, r1, r2
 800658e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006592:	4605      	mov	r5, r0
 8006594:	9202      	str	r2, [sp, #8]
 8006596:	b136      	cbz	r6, 80065a6 <forward_lite_dense_if32of32wf32_lut8+0x2e>
 8006598:	4618      	mov	r0, r3
 800659a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800659e:	4631      	mov	r1, r6
 80065a0:	f000 f918 	bl	80067d4 <st_int8_copy>
 80065a4:	4633      	mov	r3, r6
 80065a6:	9a02      	ldr	r2, [sp, #8]
 80065a8:	4295      	cmp	r5, r2
 80065aa:	f080 80f9 	bcs.w	80067a0 <forward_lite_dense_if32of32wf32_lut8+0x228>
 80065ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80065b0:	0092      	lsls	r2, r2, #2
 80065b2:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 80065b6:	9201      	str	r2, [sp, #4]
 80065b8:	9205      	str	r2, [sp, #20]
 80065ba:	462a      	mov	r2, r5
 80065bc:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 80065c0:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 80065c4:	464d      	mov	r5, r9
 80065c6:	4691      	mov	r9, r2
 80065c8:	9a01      	ldr	r2, [sp, #4]
 80065ca:	eb09 0e02 	add.w	lr, r9, r2
 80065ce:	00a1      	lsls	r1, r4, #2
 80065d0:	3720      	adds	r7, #32
 80065d2:	45ce      	cmp	lr, r9
 80065d4:	f004 0007 	and.w	r0, r4, #7
 80065d8:	9103      	str	r1, [sp, #12]
 80065da:	f1a7 0b20 	sub.w	fp, r7, #32
 80065de:	f240 80c8 	bls.w	8006772 <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 80065e2:	9a04      	ldr	r2, [sp, #16]
 80065e4:	46cc      	mov	ip, r9
 80065e6:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80067d0 <forward_lite_dense_if32of32wf32_lut8+0x258>
 80065ea:	2d00      	cmp	r5, #0
 80065ec:	f000 80dd 	beq.w	80067aa <forward_lite_dense_if32of32wf32_lut8+0x232>
 80065f0:	eb02 060a 	add.w	r6, r2, sl
 80065f4:	4639      	mov	r1, r7
 80065f6:	7854      	ldrb	r4, [r2, #1]
 80065f8:	ed11 3a07 	vldr	s6, [r1, #-28]	@ 0xffffffe4
 80065fc:	ed51 3a08 	vldr	s7, [r1, #-32]	@ 0xffffffe0
 8006600:	ed11 4a06 	vldr	s8, [r1, #-24]	@ 0xffffffe8
 8006604:	ed51 4a05 	vldr	s9, [r1, #-20]	@ 0xffffffec
 8006608:	ed11 5a04 	vldr	s10, [r1, #-16]
 800660c:	ed51 5a03 	vldr	s11, [r1, #-12]
 8006610:	ed11 6a02 	vldr	s12, [r1, #-8]
 8006614:	ed51 6a01 	vldr	s13, [r1, #-4]
 8006618:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800661c:	edd4 7a00 	vldr	s15, [r4]
 8006620:	7814      	ldrb	r4, [r2, #0]
 8006622:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006626:	ee67 7a83 	vmul.f32	s15, s15, s6
 800662a:	ed94 3a00 	vldr	s6, [r4]
 800662e:	7894      	ldrb	r4, [r2, #2]
 8006630:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006634:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006638:	3208      	adds	r2, #8
 800663a:	edd4 3a00 	vldr	s7, [r4]
 800663e:	f812 4c05 	ldrb.w	r4, [r2, #-5]
 8006642:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006646:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800664a:	3120      	adds	r1, #32
 800664c:	ed94 4a00 	vldr	s8, [r4]
 8006650:	f812 4c04 	ldrb.w	r4, [r2, #-4]
 8006654:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006658:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800665c:	edd4 4a00 	vldr	s9, [r4]
 8006660:	f812 4c03 	ldrb.w	r4, [r2, #-3]
 8006664:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006668:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800666c:	ed94 5a00 	vldr	s10, [r4]
 8006670:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 8006674:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006678:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800667c:	edd4 5a00 	vldr	s11, [r4]
 8006680:	f812 4c01 	ldrb.w	r4, [r2, #-1]
 8006684:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006688:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800668c:	42b2      	cmp	r2, r6
 800668e:	ed94 6a00 	vldr	s12, [r4]
 8006692:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006696:	ee37 7a27 	vadd.f32	s14, s14, s15
 800669a:	d1ac      	bne.n	80065f6 <forward_lite_dense_if32of32wf32_lut8+0x7e>
 800669c:	4642      	mov	r2, r8
 800669e:	2800      	cmp	r0, #0
 80066a0:	f000 8081 	beq.w	80067a6 <forward_lite_dense_if32of32wf32_lut8+0x22e>
 80066a4:	7831      	ldrb	r1, [r6, #0]
 80066a6:	edd2 7a00 	vldr	s15, [r2]
 80066aa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80066ae:	edd1 6a00 	vldr	s13, [r1]
 80066b2:	2801      	cmp	r0, #1
 80066b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80066b8:	d03f      	beq.n	800673a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 80066ba:	7871      	ldrb	r1, [r6, #1]
 80066bc:	edd2 7a01 	vldr	s15, [r2, #4]
 80066c0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80066c4:	edd1 6a00 	vldr	s13, [r1]
 80066c8:	2802      	cmp	r0, #2
 80066ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80066ce:	d034      	beq.n	800673a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 80066d0:	78b1      	ldrb	r1, [r6, #2]
 80066d2:	edd2 7a02 	vldr	s15, [r2, #8]
 80066d6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80066da:	edd1 6a00 	vldr	s13, [r1]
 80066de:	2803      	cmp	r0, #3
 80066e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80066e4:	d029      	beq.n	800673a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 80066e6:	78f1      	ldrb	r1, [r6, #3]
 80066e8:	edd2 6a03 	vldr	s13, [r2, #12]
 80066ec:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80066f0:	edd1 7a00 	vldr	s15, [r1]
 80066f4:	2804      	cmp	r0, #4
 80066f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80066fa:	d01e      	beq.n	800673a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 80066fc:	7931      	ldrb	r1, [r6, #4]
 80066fe:	edd2 6a04 	vldr	s13, [r2, #16]
 8006702:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006706:	edd1 7a00 	vldr	s15, [r1]
 800670a:	2805      	cmp	r0, #5
 800670c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006710:	d013      	beq.n	800673a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8006712:	7971      	ldrb	r1, [r6, #5]
 8006714:	edd2 6a05 	vldr	s13, [r2, #20]
 8006718:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800671c:	edd1 7a00 	vldr	s15, [r1]
 8006720:	2806      	cmp	r0, #6
 8006722:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006726:	d008      	beq.n	800673a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8006728:	edd2 7a06 	vldr	s15, [r2, #24]
 800672c:	79b2      	ldrb	r2, [r6, #6]
 800672e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006732:	edd2 6a00 	vldr	s13, [r2]
 8006736:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800673a:	1832      	adds	r2, r6, r0
 800673c:	ecac 7a01 	vstmia	ip!, {s14}
 8006740:	45e6      	cmp	lr, ip
 8006742:	f63f af50 	bhi.w	80065e6 <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8006746:	9a05      	ldr	r2, [sp, #20]
 8006748:	eb09 0402 	add.w	r4, r9, r2
 800674c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800674e:	b9a2      	cbnz	r2, 800677a <forward_lite_dense_if32of32wf32_lut8+0x202>
 8006750:	9a02      	ldr	r2, [sp, #8]
 8006752:	42a2      	cmp	r2, r4
 8006754:	d924      	bls.n	80067a0 <forward_lite_dense_if32of32wf32_lut8+0x228>
 8006756:	9a03      	ldr	r2, [sp, #12]
 8006758:	45ce      	cmp	lr, r9
 800675a:	4490      	add	r8, r2
 800675c:	4417      	add	r7, r2
 800675e:	d927      	bls.n	80067b0 <forward_lite_dense_if32of32wf32_lut8+0x238>
 8006760:	9a01      	ldr	r2, [sp, #4]
 8006762:	46a1      	mov	r9, r4
 8006764:	eb09 0e02 	add.w	lr, r9, r2
 8006768:	45ce      	cmp	lr, r9
 800676a:	f1a7 0b20 	sub.w	fp, r7, #32
 800676e:	f63f af38 	bhi.w	80065e2 <forward_lite_dense_if32of32wf32_lut8+0x6a>
 8006772:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006774:	464c      	mov	r4, r9
 8006776:	2a00      	cmp	r2, #0
 8006778:	d0ea      	beq.n	8006750 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 800677a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800677c:	2a00      	cmp	r2, #0
 800677e:	d0e7      	beq.n	8006750 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 8006780:	9a01      	ldr	r2, [sp, #4]
 8006782:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006784:	1aa2      	subs	r2, r4, r2
 8006786:	edd2 7a00 	vldr	s15, [r2]
 800678a:	ecb1 7a01 	vldmia	r1!, {s14}
 800678e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006792:	ece2 7a01 	vstmia	r2!, {s15}
 8006796:	4294      	cmp	r4, r2
 8006798:	d1f5      	bne.n	8006786 <forward_lite_dense_if32of32wf32_lut8+0x20e>
 800679a:	9a02      	ldr	r2, [sp, #8]
 800679c:	42a2      	cmp	r2, r4
 800679e:	d8da      	bhi.n	8006756 <forward_lite_dense_if32of32wf32_lut8+0x1de>
 80067a0:	b007      	add	sp, #28
 80067a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a6:	4632      	mov	r2, r6
 80067a8:	e7c8      	b.n	800673c <forward_lite_dense_if32of32wf32_lut8+0x1c4>
 80067aa:	4616      	mov	r6, r2
 80067ac:	465a      	mov	r2, fp
 80067ae:	e776      	b.n	800669e <forward_lite_dense_if32of32wf32_lut8+0x126>
 80067b0:	9b01      	ldr	r3, [sp, #4]
 80067b2:	1ae3      	subs	r3, r4, r3
 80067b4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80067b6:	461a      	mov	r2, r3
 80067b8:	ed92 7a00 	vldr	s14, [r2]
 80067bc:	ecf1 7a01 	vldmia	r1!, {s15}
 80067c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067c4:	ece2 7a01 	vstmia	r2!, {s15}
 80067c8:	42a2      	cmp	r2, r4
 80067ca:	d1f5      	bne.n	80067b8 <forward_lite_dense_if32of32wf32_lut8+0x240>
 80067cc:	e7f2      	b.n	80067b4 <forward_lite_dense_if32of32wf32_lut8+0x23c>
 80067ce:	bf00      	nop
 80067d0:	00000000 	.word	0x00000000

080067d4 <st_int8_copy>:
 80067d4:	4288      	cmp	r0, r1
 80067d6:	d022      	beq.n	800681e <st_int8_copy+0x4a>
 80067d8:	b30a      	cbz	r2, 800681e <st_int8_copy+0x4a>
 80067da:	4288      	cmp	r0, r1
 80067dc:	d312      	bcc.n	8006804 <st_int8_copy+0x30>
 80067de:	2a03      	cmp	r2, #3
 80067e0:	d81e      	bhi.n	8006820 <st_int8_copy+0x4c>
 80067e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80067e6:	f801 3b01 	strb.w	r3, [r1], #1
 80067ea:	2a01      	cmp	r2, #1
 80067ec:	d017      	beq.n	800681e <st_int8_copy+0x4a>
 80067ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80067f2:	f801 3b01 	strb.w	r3, [r1], #1
 80067f6:	2a02      	cmp	r2, #2
 80067f8:	d011      	beq.n	800681e <st_int8_copy+0x4a>
 80067fa:	f810 3b01 	ldrb.w	r3, [r0], #1
 80067fe:	f801 3b01 	strb.w	r3, [r1], #1
 8006802:	4770      	bx	lr
 8006804:	1883      	adds	r3, r0, r2
 8006806:	4299      	cmp	r1, r3
 8006808:	d2e9      	bcs.n	80067de <st_int8_copy+0xa>
 800680a:	4298      	cmp	r0, r3
 800680c:	440a      	add	r2, r1
 800680e:	d206      	bcs.n	800681e <st_int8_copy+0x4a>
 8006810:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8006814:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8006818:	4298      	cmp	r0, r3
 800681a:	d1f9      	bne.n	8006810 <st_int8_copy+0x3c>
 800681c:	4770      	bx	lr
 800681e:	4770      	bx	lr
 8006820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006824:	f001 0403 	and.w	r4, r1, #3
 8006828:	f1c4 0304 	rsb	r3, r4, #4
 800682c:	f000 0e03 	and.w	lr, r0, #3
 8006830:	eba2 0c03 	sub.w	ip, r2, r3
 8006834:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006838:	f801 3b01 	strb.w	r3, [r1], #1
 800683c:	2c03      	cmp	r4, #3
 800683e:	f1c4 0202 	rsb	r2, r4, #2
 8006842:	d00e      	beq.n	8006862 <st_int8_copy+0x8e>
 8006844:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006848:	f801 3b01 	strb.w	r3, [r1], #1
 800684c:	2a00      	cmp	r2, #0
 800684e:	dd08      	ble.n	8006862 <st_int8_copy+0x8e>
 8006850:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006854:	f801 3b01 	strb.w	r3, [r1], #1
 8006858:	b91c      	cbnz	r4, 8006862 <st_int8_copy+0x8e>
 800685a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800685e:	f801 3b01 	strb.w	r3, [r1], #1
 8006862:	4574      	cmp	r4, lr
 8006864:	d02b      	beq.n	80068be <st_int8_copy+0xea>
 8006866:	ea4f 131c 	mov.w	r3, ip, lsr #4
 800686a:	1e5a      	subs	r2, r3, #1
 800686c:	b153      	cbz	r3, 8006884 <st_int8_copy+0xb0>
 800686e:	f850 3b04 	ldr.w	r3, [r0], #4
 8006872:	f850 4b04 	ldr.w	r4, [r0], #4
 8006876:	f850 5b04 	ldr.w	r5, [r0], #4
 800687a:	f850 6b04 	ldr.w	r6, [r0], #4
 800687e:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8006880:	3a01      	subs	r2, #1
 8006882:	d2f4      	bcs.n	800686e <st_int8_copy+0x9a>
 8006884:	f01c 0f08 	tst.w	ip, #8
 8006888:	d004      	beq.n	8006894 <st_int8_copy+0xc0>
 800688a:	f850 3b04 	ldr.w	r3, [r0], #4
 800688e:	f850 4b04 	ldr.w	r4, [r0], #4
 8006892:	c118      	stmia	r1!, {r3, r4}
 8006894:	f01c 0f04 	tst.w	ip, #4
 8006898:	d003      	beq.n	80068a2 <st_int8_copy+0xce>
 800689a:	f850 3b04 	ldr.w	r3, [r0], #4
 800689e:	f841 3b04 	str.w	r3, [r1], #4
 80068a2:	f01c 0f02 	tst.w	ip, #2
 80068a6:	d003      	beq.n	80068b0 <st_int8_copy+0xdc>
 80068a8:	f830 3b02 	ldrh.w	r3, [r0], #2
 80068ac:	f821 3b02 	strh.w	r3, [r1], #2
 80068b0:	f01c 0f01 	tst.w	ip, #1
 80068b4:	d001      	beq.n	80068ba <st_int8_copy+0xe6>
 80068b6:	7803      	ldrb	r3, [r0, #0]
 80068b8:	700b      	strb	r3, [r1, #0]
 80068ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068be:	ea4f 139c 	mov.w	r3, ip, lsr #6
 80068c2:	f103 39ff 	add.w	r9, r3, #4294967295
 80068c6:	b183      	cbz	r3, 80068ea <st_int8_copy+0x116>
 80068c8:	4688      	mov	r8, r1
 80068ca:	4686      	mov	lr, r0
 80068cc:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80068d0:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80068d4:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80068d8:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80068dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80068e0:	f1b9 3fff 	cmp.w	r9, #4294967295
 80068e4:	4641      	mov	r1, r8
 80068e6:	4670      	mov	r0, lr
 80068e8:	d1ee      	bne.n	80068c8 <st_int8_copy+0xf4>
 80068ea:	f01c 0f20 	tst.w	ip, #32
 80068ee:	d007      	beq.n	8006900 <st_int8_copy+0x12c>
 80068f0:	4688      	mov	r8, r1
 80068f2:	4686      	mov	lr, r0
 80068f4:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80068f8:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80068fc:	4641      	mov	r1, r8
 80068fe:	4670      	mov	r0, lr
 8006900:	f01c 0f10 	tst.w	ip, #16
 8006904:	d001      	beq.n	800690a <st_int8_copy+0x136>
 8006906:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 8006908:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800690a:	f01c 0f08 	tst.w	ip, #8
 800690e:	d0c1      	beq.n	8006894 <st_int8_copy+0xc0>
 8006910:	c818      	ldmia	r0!, {r3, r4}
 8006912:	c118      	stmia	r1!, {r3, r4}
 8006914:	e7be      	b.n	8006894 <st_int8_copy+0xc0>
 8006916:	bf00      	nop

08006918 <ai_array_to_buffer_fmt>:
 8006918:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800691c:	2b02      	cmp	r3, #2
 800691e:	d055      	beq.n	80069cc <ai_array_to_buffer_fmt+0xb4>
 8006920:	4a2d      	ldr	r2, [pc, #180]	@ (80069d8 <ai_array_to_buffer_fmt+0xc0>)
 8006922:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8006926:	4293      	cmp	r3, r2
 8006928:	d010      	beq.n	800694c <ai_array_to_buffer_fmt+0x34>
 800692a:	dc21      	bgt.n	8006970 <ai_array_to_buffer_fmt+0x58>
 800692c:	4a2b      	ldr	r2, [pc, #172]	@ (80069dc <ai_array_to_buffer_fmt+0xc4>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d00c      	beq.n	800694c <ai_array_to_buffer_fmt+0x34>
 8006932:	dd0f      	ble.n	8006954 <ai_array_to_buffer_fmt+0x3c>
 8006934:	4a2a      	ldr	r2, [pc, #168]	@ (80069e0 <ai_array_to_buffer_fmt+0xc8>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d008      	beq.n	800694c <ai_array_to_buffer_fmt+0x34>
 800693a:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 800693e:	4293      	cmp	r3, r2
 8006940:	d004      	beq.n	800694c <ai_array_to_buffer_fmt+0x34>
 8006942:	4a28      	ldr	r2, [pc, #160]	@ (80069e4 <ai_array_to_buffer_fmt+0xcc>)
 8006944:	4293      	cmp	r3, r2
 8006946:	bf0c      	ite	eq
 8006948:	4613      	moveq	r3, r2
 800694a:	2340      	movne	r3, #64	@ 0x40
 800694c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8006950:	4318      	orrs	r0, r3
 8006952:	4770      	bx	lr
 8006954:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8006958:	4293      	cmp	r3, r2
 800695a:	d0f7      	beq.n	800694c <ai_array_to_buffer_fmt+0x34>
 800695c:	dd2c      	ble.n	80069b8 <ai_array_to_buffer_fmt+0xa0>
 800695e:	4a22      	ldr	r2, [pc, #136]	@ (80069e8 <ai_array_to_buffer_fmt+0xd0>)
 8006960:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8006964:	4293      	cmp	r3, r2
 8006966:	bf0c      	ite	eq
 8006968:	4613      	moveq	r3, r2
 800696a:	2340      	movne	r3, #64	@ 0x40
 800696c:	4318      	orrs	r0, r3
 800696e:	4770      	bx	lr
 8006970:	4a1e      	ldr	r2, [pc, #120]	@ (80069ec <ai_array_to_buffer_fmt+0xd4>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d0ea      	beq.n	800694c <ai_array_to_buffer_fmt+0x34>
 8006976:	dd10      	ble.n	800699a <ai_array_to_buffer_fmt+0x82>
 8006978:	4a1d      	ldr	r2, [pc, #116]	@ (80069f0 <ai_array_to_buffer_fmt+0xd8>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d0e6      	beq.n	800694c <ai_array_to_buffer_fmt+0x34>
 800697e:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 8006982:	4293      	cmp	r3, r2
 8006984:	d0e2      	beq.n	800694c <ai_array_to_buffer_fmt+0x34>
 8006986:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 800698a:	4293      	cmp	r3, r2
 800698c:	bf0c      	ite	eq
 800698e:	4613      	moveq	r3, r2
 8006990:	2340      	movne	r3, #64	@ 0x40
 8006992:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8006996:	4318      	orrs	r0, r3
 8006998:	4770      	bx	lr
 800699a:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 800699e:	4293      	cmp	r3, r2
 80069a0:	d0d4      	beq.n	800694c <ai_array_to_buffer_fmt+0x34>
 80069a2:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d0d0      	beq.n	800694c <ai_array_to_buffer_fmt+0x34>
 80069aa:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80069ae:	4293      	cmp	r3, r2
 80069b0:	bf0c      	ite	eq
 80069b2:	4613      	moveq	r3, r2
 80069b4:	2340      	movne	r3, #64	@ 0x40
 80069b6:	e7c9      	b.n	800694c <ai_array_to_buffer_fmt+0x34>
 80069b8:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80069bc:	4293      	cmp	r3, r2
 80069be:	d0c5      	beq.n	800694c <ai_array_to_buffer_fmt+0x34>
 80069c0:	3280      	adds	r2, #128	@ 0x80
 80069c2:	4293      	cmp	r3, r2
 80069c4:	bf0c      	ite	eq
 80069c6:	4613      	moveq	r3, r2
 80069c8:	2340      	movne	r3, #64	@ 0x40
 80069ca:	e7bf      	b.n	800694c <ai_array_to_buffer_fmt+0x34>
 80069cc:	4b09      	ldr	r3, [pc, #36]	@ (80069f4 <ai_array_to_buffer_fmt+0xdc>)
 80069ce:	4003      	ands	r3, r0
 80069d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069d4:	e7ba      	b.n	800694c <ai_array_to_buffer_fmt+0x34>
 80069d6:	bf00      	nop
 80069d8:	00821040 	.word	0x00821040
 80069dc:	00040840 	.word	0x00040840
 80069e0:	00041040 	.word	0x00041040
 80069e4:	0004084f 	.word	0x0004084f
 80069e8:	00040447 	.word	0x00040447
 80069ec:	00840447 	.word	0x00840447
 80069f0:	0084084f 	.word	0x0084084f
 80069f4:	00803fff 	.word	0x00803fff

080069f8 <ai_array_get_data_byte_size>:
 80069f8:	b169      	cbz	r1, 8006a16 <ai_array_get_data_byte_size+0x1e>
 80069fa:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80069fe:	fb03 f101 	mul.w	r1, r3, r1
 8006a02:	1dcb      	adds	r3, r1, #7
 8006a04:	f023 0307 	bic.w	r3, r3, #7
 8006a08:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8006a0c:	fa23 f000 	lsr.w	r0, r3, r0
 8006a10:	3007      	adds	r0, #7
 8006a12:	08c0      	lsrs	r0, r0, #3
 8006a14:	4770      	bx	lr
 8006a16:	4608      	mov	r0, r1
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop

08006a1c <ai_version_get>:
 8006a1c:	0212      	lsls	r2, r2, #8
 8006a1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006a22:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8006a26:	4770      	bx	lr

08006a28 <get_tensor_byte_size>:
 8006a28:	b410      	push	{r4}
 8006a2a:	6983      	ldr	r3, [r0, #24]
 8006a2c:	68c4      	ldr	r4, [r0, #12]
 8006a2e:	6941      	ldr	r1, [r0, #20]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68e0      	ldr	r0, [r4, #12]
 8006a34:	4a07      	ldr	r2, [pc, #28]	@ (8006a54 <get_tensor_byte_size+0x2c>)
 8006a36:	68c9      	ldr	r1, [r1, #12]
 8006a38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a3c:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8006a40:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006a44:	fb01 f000 	mul.w	r0, r1, r0
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	bf04      	itt	eq
 8006a4c:	3007      	addeq	r0, #7
 8006a4e:	08c0      	lsreq	r0, r0, #3
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	000400c0 	.word	0x000400c0

08006a58 <malloc>:
 8006a58:	4b02      	ldr	r3, [pc, #8]	@ (8006a64 <malloc+0xc>)
 8006a5a:	4601      	mov	r1, r0
 8006a5c:	6818      	ldr	r0, [r3, #0]
 8006a5e:	f000 b825 	b.w	8006aac <_malloc_r>
 8006a62:	bf00      	nop
 8006a64:	200006cc 	.word	0x200006cc

08006a68 <sbrk_aligned>:
 8006a68:	b570      	push	{r4, r5, r6, lr}
 8006a6a:	4e0f      	ldr	r6, [pc, #60]	@ (8006aa8 <sbrk_aligned+0x40>)
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	6831      	ldr	r1, [r6, #0]
 8006a70:	4605      	mov	r5, r0
 8006a72:	b911      	cbnz	r1, 8006a7a <sbrk_aligned+0x12>
 8006a74:	f000 fea6 	bl	80077c4 <_sbrk_r>
 8006a78:	6030      	str	r0, [r6, #0]
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	f000 fea1 	bl	80077c4 <_sbrk_r>
 8006a82:	1c43      	adds	r3, r0, #1
 8006a84:	d103      	bne.n	8006a8e <sbrk_aligned+0x26>
 8006a86:	f04f 34ff 	mov.w	r4, #4294967295
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	bd70      	pop	{r4, r5, r6, pc}
 8006a8e:	1cc4      	adds	r4, r0, #3
 8006a90:	f024 0403 	bic.w	r4, r4, #3
 8006a94:	42a0      	cmp	r0, r4
 8006a96:	d0f8      	beq.n	8006a8a <sbrk_aligned+0x22>
 8006a98:	1a21      	subs	r1, r4, r0
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	f000 fe92 	bl	80077c4 <_sbrk_r>
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	d1f2      	bne.n	8006a8a <sbrk_aligned+0x22>
 8006aa4:	e7ef      	b.n	8006a86 <sbrk_aligned+0x1e>
 8006aa6:	bf00      	nop
 8006aa8:	20000a10 	.word	0x20000a10

08006aac <_malloc_r>:
 8006aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ab0:	1ccd      	adds	r5, r1, #3
 8006ab2:	f025 0503 	bic.w	r5, r5, #3
 8006ab6:	3508      	adds	r5, #8
 8006ab8:	2d0c      	cmp	r5, #12
 8006aba:	bf38      	it	cc
 8006abc:	250c      	movcc	r5, #12
 8006abe:	2d00      	cmp	r5, #0
 8006ac0:	4606      	mov	r6, r0
 8006ac2:	db01      	blt.n	8006ac8 <_malloc_r+0x1c>
 8006ac4:	42a9      	cmp	r1, r5
 8006ac6:	d904      	bls.n	8006ad2 <_malloc_r+0x26>
 8006ac8:	230c      	movs	r3, #12
 8006aca:	6033      	str	r3, [r6, #0]
 8006acc:	2000      	movs	r0, #0
 8006ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ad2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ba8 <_malloc_r+0xfc>
 8006ad6:	f000 f869 	bl	8006bac <__malloc_lock>
 8006ada:	f8d8 3000 	ldr.w	r3, [r8]
 8006ade:	461c      	mov	r4, r3
 8006ae0:	bb44      	cbnz	r4, 8006b34 <_malloc_r+0x88>
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	4630      	mov	r0, r6
 8006ae6:	f7ff ffbf 	bl	8006a68 <sbrk_aligned>
 8006aea:	1c43      	adds	r3, r0, #1
 8006aec:	4604      	mov	r4, r0
 8006aee:	d158      	bne.n	8006ba2 <_malloc_r+0xf6>
 8006af0:	f8d8 4000 	ldr.w	r4, [r8]
 8006af4:	4627      	mov	r7, r4
 8006af6:	2f00      	cmp	r7, #0
 8006af8:	d143      	bne.n	8006b82 <_malloc_r+0xd6>
 8006afa:	2c00      	cmp	r4, #0
 8006afc:	d04b      	beq.n	8006b96 <_malloc_r+0xea>
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	4639      	mov	r1, r7
 8006b02:	4630      	mov	r0, r6
 8006b04:	eb04 0903 	add.w	r9, r4, r3
 8006b08:	f000 fe5c 	bl	80077c4 <_sbrk_r>
 8006b0c:	4581      	cmp	r9, r0
 8006b0e:	d142      	bne.n	8006b96 <_malloc_r+0xea>
 8006b10:	6821      	ldr	r1, [r4, #0]
 8006b12:	1a6d      	subs	r5, r5, r1
 8006b14:	4629      	mov	r1, r5
 8006b16:	4630      	mov	r0, r6
 8006b18:	f7ff ffa6 	bl	8006a68 <sbrk_aligned>
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d03a      	beq.n	8006b96 <_malloc_r+0xea>
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	442b      	add	r3, r5
 8006b24:	6023      	str	r3, [r4, #0]
 8006b26:	f8d8 3000 	ldr.w	r3, [r8]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	bb62      	cbnz	r2, 8006b88 <_malloc_r+0xdc>
 8006b2e:	f8c8 7000 	str.w	r7, [r8]
 8006b32:	e00f      	b.n	8006b54 <_malloc_r+0xa8>
 8006b34:	6822      	ldr	r2, [r4, #0]
 8006b36:	1b52      	subs	r2, r2, r5
 8006b38:	d420      	bmi.n	8006b7c <_malloc_r+0xd0>
 8006b3a:	2a0b      	cmp	r2, #11
 8006b3c:	d917      	bls.n	8006b6e <_malloc_r+0xc2>
 8006b3e:	1961      	adds	r1, r4, r5
 8006b40:	42a3      	cmp	r3, r4
 8006b42:	6025      	str	r5, [r4, #0]
 8006b44:	bf18      	it	ne
 8006b46:	6059      	strne	r1, [r3, #4]
 8006b48:	6863      	ldr	r3, [r4, #4]
 8006b4a:	bf08      	it	eq
 8006b4c:	f8c8 1000 	streq.w	r1, [r8]
 8006b50:	5162      	str	r2, [r4, r5]
 8006b52:	604b      	str	r3, [r1, #4]
 8006b54:	4630      	mov	r0, r6
 8006b56:	f000 f82f 	bl	8006bb8 <__malloc_unlock>
 8006b5a:	f104 000b 	add.w	r0, r4, #11
 8006b5e:	1d23      	adds	r3, r4, #4
 8006b60:	f020 0007 	bic.w	r0, r0, #7
 8006b64:	1ac2      	subs	r2, r0, r3
 8006b66:	bf1c      	itt	ne
 8006b68:	1a1b      	subne	r3, r3, r0
 8006b6a:	50a3      	strne	r3, [r4, r2]
 8006b6c:	e7af      	b.n	8006ace <_malloc_r+0x22>
 8006b6e:	6862      	ldr	r2, [r4, #4]
 8006b70:	42a3      	cmp	r3, r4
 8006b72:	bf0c      	ite	eq
 8006b74:	f8c8 2000 	streq.w	r2, [r8]
 8006b78:	605a      	strne	r2, [r3, #4]
 8006b7a:	e7eb      	b.n	8006b54 <_malloc_r+0xa8>
 8006b7c:	4623      	mov	r3, r4
 8006b7e:	6864      	ldr	r4, [r4, #4]
 8006b80:	e7ae      	b.n	8006ae0 <_malloc_r+0x34>
 8006b82:	463c      	mov	r4, r7
 8006b84:	687f      	ldr	r7, [r7, #4]
 8006b86:	e7b6      	b.n	8006af6 <_malloc_r+0x4a>
 8006b88:	461a      	mov	r2, r3
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	42a3      	cmp	r3, r4
 8006b8e:	d1fb      	bne.n	8006b88 <_malloc_r+0xdc>
 8006b90:	2300      	movs	r3, #0
 8006b92:	6053      	str	r3, [r2, #4]
 8006b94:	e7de      	b.n	8006b54 <_malloc_r+0xa8>
 8006b96:	230c      	movs	r3, #12
 8006b98:	6033      	str	r3, [r6, #0]
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	f000 f80c 	bl	8006bb8 <__malloc_unlock>
 8006ba0:	e794      	b.n	8006acc <_malloc_r+0x20>
 8006ba2:	6005      	str	r5, [r0, #0]
 8006ba4:	e7d6      	b.n	8006b54 <_malloc_r+0xa8>
 8006ba6:	bf00      	nop
 8006ba8:	20000a14 	.word	0x20000a14

08006bac <__malloc_lock>:
 8006bac:	4801      	ldr	r0, [pc, #4]	@ (8006bb4 <__malloc_lock+0x8>)
 8006bae:	f000 be56 	b.w	800785e <__retarget_lock_acquire_recursive>
 8006bb2:	bf00      	nop
 8006bb4:	20000b58 	.word	0x20000b58

08006bb8 <__malloc_unlock>:
 8006bb8:	4801      	ldr	r0, [pc, #4]	@ (8006bc0 <__malloc_unlock+0x8>)
 8006bba:	f000 be51 	b.w	8007860 <__retarget_lock_release_recursive>
 8006bbe:	bf00      	nop
 8006bc0:	20000b58 	.word	0x20000b58

08006bc4 <_realloc_r>:
 8006bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc8:	4680      	mov	r8, r0
 8006bca:	4615      	mov	r5, r2
 8006bcc:	460c      	mov	r4, r1
 8006bce:	b921      	cbnz	r1, 8006bda <_realloc_r+0x16>
 8006bd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd4:	4611      	mov	r1, r2
 8006bd6:	f7ff bf69 	b.w	8006aac <_malloc_r>
 8006bda:	b92a      	cbnz	r2, 8006be8 <_realloc_r+0x24>
 8006bdc:	f001 fc9c 	bl	8008518 <_free_r>
 8006be0:	2400      	movs	r4, #0
 8006be2:	4620      	mov	r0, r4
 8006be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006be8:	f002 f862 	bl	8008cb0 <_malloc_usable_size_r>
 8006bec:	4285      	cmp	r5, r0
 8006bee:	4606      	mov	r6, r0
 8006bf0:	d802      	bhi.n	8006bf8 <_realloc_r+0x34>
 8006bf2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006bf6:	d8f4      	bhi.n	8006be2 <_realloc_r+0x1e>
 8006bf8:	4629      	mov	r1, r5
 8006bfa:	4640      	mov	r0, r8
 8006bfc:	f7ff ff56 	bl	8006aac <_malloc_r>
 8006c00:	4607      	mov	r7, r0
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d0ec      	beq.n	8006be0 <_realloc_r+0x1c>
 8006c06:	42b5      	cmp	r5, r6
 8006c08:	462a      	mov	r2, r5
 8006c0a:	4621      	mov	r1, r4
 8006c0c:	bf28      	it	cs
 8006c0e:	4632      	movcs	r2, r6
 8006c10:	f000 fe27 	bl	8007862 <memcpy>
 8006c14:	4621      	mov	r1, r4
 8006c16:	4640      	mov	r0, r8
 8006c18:	f001 fc7e 	bl	8008518 <_free_r>
 8006c1c:	463c      	mov	r4, r7
 8006c1e:	e7e0      	b.n	8006be2 <_realloc_r+0x1e>

08006c20 <__cvt>:
 8006c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c24:	ec57 6b10 	vmov	r6, r7, d0
 8006c28:	2f00      	cmp	r7, #0
 8006c2a:	460c      	mov	r4, r1
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	463b      	mov	r3, r7
 8006c30:	bfbb      	ittet	lt
 8006c32:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006c36:	461f      	movlt	r7, r3
 8006c38:	2300      	movge	r3, #0
 8006c3a:	232d      	movlt	r3, #45	@ 0x2d
 8006c3c:	700b      	strb	r3, [r1, #0]
 8006c3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c40:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006c44:	4691      	mov	r9, r2
 8006c46:	f023 0820 	bic.w	r8, r3, #32
 8006c4a:	bfbc      	itt	lt
 8006c4c:	4632      	movlt	r2, r6
 8006c4e:	4616      	movlt	r6, r2
 8006c50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c54:	d005      	beq.n	8006c62 <__cvt+0x42>
 8006c56:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006c5a:	d100      	bne.n	8006c5e <__cvt+0x3e>
 8006c5c:	3401      	adds	r4, #1
 8006c5e:	2102      	movs	r1, #2
 8006c60:	e000      	b.n	8006c64 <__cvt+0x44>
 8006c62:	2103      	movs	r1, #3
 8006c64:	ab03      	add	r3, sp, #12
 8006c66:	9301      	str	r3, [sp, #4]
 8006c68:	ab02      	add	r3, sp, #8
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	ec47 6b10 	vmov	d0, r6, r7
 8006c70:	4653      	mov	r3, sl
 8006c72:	4622      	mov	r2, r4
 8006c74:	f000 fe8c 	bl	8007990 <_dtoa_r>
 8006c78:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	d119      	bne.n	8006cb4 <__cvt+0x94>
 8006c80:	f019 0f01 	tst.w	r9, #1
 8006c84:	d00e      	beq.n	8006ca4 <__cvt+0x84>
 8006c86:	eb00 0904 	add.w	r9, r0, r4
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	4630      	mov	r0, r6
 8006c90:	4639      	mov	r1, r7
 8006c92:	f7f9 ff19 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c96:	b108      	cbz	r0, 8006c9c <__cvt+0x7c>
 8006c98:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c9c:	2230      	movs	r2, #48	@ 0x30
 8006c9e:	9b03      	ldr	r3, [sp, #12]
 8006ca0:	454b      	cmp	r3, r9
 8006ca2:	d31e      	bcc.n	8006ce2 <__cvt+0xc2>
 8006ca4:	9b03      	ldr	r3, [sp, #12]
 8006ca6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ca8:	1b5b      	subs	r3, r3, r5
 8006caa:	4628      	mov	r0, r5
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	b004      	add	sp, #16
 8006cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006cb8:	eb00 0904 	add.w	r9, r0, r4
 8006cbc:	d1e5      	bne.n	8006c8a <__cvt+0x6a>
 8006cbe:	7803      	ldrb	r3, [r0, #0]
 8006cc0:	2b30      	cmp	r3, #48	@ 0x30
 8006cc2:	d10a      	bne.n	8006cda <__cvt+0xba>
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	4630      	mov	r0, r6
 8006cca:	4639      	mov	r1, r7
 8006ccc:	f7f9 fefc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cd0:	b918      	cbnz	r0, 8006cda <__cvt+0xba>
 8006cd2:	f1c4 0401 	rsb	r4, r4, #1
 8006cd6:	f8ca 4000 	str.w	r4, [sl]
 8006cda:	f8da 3000 	ldr.w	r3, [sl]
 8006cde:	4499      	add	r9, r3
 8006ce0:	e7d3      	b.n	8006c8a <__cvt+0x6a>
 8006ce2:	1c59      	adds	r1, r3, #1
 8006ce4:	9103      	str	r1, [sp, #12]
 8006ce6:	701a      	strb	r2, [r3, #0]
 8006ce8:	e7d9      	b.n	8006c9e <__cvt+0x7e>

08006cea <__exponent>:
 8006cea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cec:	2900      	cmp	r1, #0
 8006cee:	bfba      	itte	lt
 8006cf0:	4249      	neglt	r1, r1
 8006cf2:	232d      	movlt	r3, #45	@ 0x2d
 8006cf4:	232b      	movge	r3, #43	@ 0x2b
 8006cf6:	2909      	cmp	r1, #9
 8006cf8:	7002      	strb	r2, [r0, #0]
 8006cfa:	7043      	strb	r3, [r0, #1]
 8006cfc:	dd29      	ble.n	8006d52 <__exponent+0x68>
 8006cfe:	f10d 0307 	add.w	r3, sp, #7
 8006d02:	461d      	mov	r5, r3
 8006d04:	270a      	movs	r7, #10
 8006d06:	461a      	mov	r2, r3
 8006d08:	fbb1 f6f7 	udiv	r6, r1, r7
 8006d0c:	fb07 1416 	mls	r4, r7, r6, r1
 8006d10:	3430      	adds	r4, #48	@ 0x30
 8006d12:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006d16:	460c      	mov	r4, r1
 8006d18:	2c63      	cmp	r4, #99	@ 0x63
 8006d1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d1e:	4631      	mov	r1, r6
 8006d20:	dcf1      	bgt.n	8006d06 <__exponent+0x1c>
 8006d22:	3130      	adds	r1, #48	@ 0x30
 8006d24:	1e94      	subs	r4, r2, #2
 8006d26:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006d2a:	1c41      	adds	r1, r0, #1
 8006d2c:	4623      	mov	r3, r4
 8006d2e:	42ab      	cmp	r3, r5
 8006d30:	d30a      	bcc.n	8006d48 <__exponent+0x5e>
 8006d32:	f10d 0309 	add.w	r3, sp, #9
 8006d36:	1a9b      	subs	r3, r3, r2
 8006d38:	42ac      	cmp	r4, r5
 8006d3a:	bf88      	it	hi
 8006d3c:	2300      	movhi	r3, #0
 8006d3e:	3302      	adds	r3, #2
 8006d40:	4403      	add	r3, r0
 8006d42:	1a18      	subs	r0, r3, r0
 8006d44:	b003      	add	sp, #12
 8006d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d48:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006d4c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006d50:	e7ed      	b.n	8006d2e <__exponent+0x44>
 8006d52:	2330      	movs	r3, #48	@ 0x30
 8006d54:	3130      	adds	r1, #48	@ 0x30
 8006d56:	7083      	strb	r3, [r0, #2]
 8006d58:	70c1      	strb	r1, [r0, #3]
 8006d5a:	1d03      	adds	r3, r0, #4
 8006d5c:	e7f1      	b.n	8006d42 <__exponent+0x58>
	...

08006d60 <_printf_float>:
 8006d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d64:	b08d      	sub	sp, #52	@ 0x34
 8006d66:	460c      	mov	r4, r1
 8006d68:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006d6c:	4616      	mov	r6, r2
 8006d6e:	461f      	mov	r7, r3
 8006d70:	4605      	mov	r5, r0
 8006d72:	f000 fcef 	bl	8007754 <_localeconv_r>
 8006d76:	6803      	ldr	r3, [r0, #0]
 8006d78:	9304      	str	r3, [sp, #16]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7f9 fa78 	bl	8000270 <strlen>
 8006d80:	2300      	movs	r3, #0
 8006d82:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d84:	f8d8 3000 	ldr.w	r3, [r8]
 8006d88:	9005      	str	r0, [sp, #20]
 8006d8a:	3307      	adds	r3, #7
 8006d8c:	f023 0307 	bic.w	r3, r3, #7
 8006d90:	f103 0208 	add.w	r2, r3, #8
 8006d94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006d98:	f8d4 b000 	ldr.w	fp, [r4]
 8006d9c:	f8c8 2000 	str.w	r2, [r8]
 8006da0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006da4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006da8:	9307      	str	r3, [sp, #28]
 8006daa:	f8cd 8018 	str.w	r8, [sp, #24]
 8006dae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006db2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006db6:	4b9c      	ldr	r3, [pc, #624]	@ (8007028 <_printf_float+0x2c8>)
 8006db8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dbc:	f7f9 feb6 	bl	8000b2c <__aeabi_dcmpun>
 8006dc0:	bb70      	cbnz	r0, 8006e20 <_printf_float+0xc0>
 8006dc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dc6:	4b98      	ldr	r3, [pc, #608]	@ (8007028 <_printf_float+0x2c8>)
 8006dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dcc:	f7f9 fe90 	bl	8000af0 <__aeabi_dcmple>
 8006dd0:	bb30      	cbnz	r0, 8006e20 <_printf_float+0xc0>
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	4640      	mov	r0, r8
 8006dd8:	4649      	mov	r1, r9
 8006dda:	f7f9 fe7f 	bl	8000adc <__aeabi_dcmplt>
 8006dde:	b110      	cbz	r0, 8006de6 <_printf_float+0x86>
 8006de0:	232d      	movs	r3, #45	@ 0x2d
 8006de2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006de6:	4a91      	ldr	r2, [pc, #580]	@ (800702c <_printf_float+0x2cc>)
 8006de8:	4b91      	ldr	r3, [pc, #580]	@ (8007030 <_printf_float+0x2d0>)
 8006dea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006dee:	bf94      	ite	ls
 8006df0:	4690      	movls	r8, r2
 8006df2:	4698      	movhi	r8, r3
 8006df4:	2303      	movs	r3, #3
 8006df6:	6123      	str	r3, [r4, #16]
 8006df8:	f02b 0304 	bic.w	r3, fp, #4
 8006dfc:	6023      	str	r3, [r4, #0]
 8006dfe:	f04f 0900 	mov.w	r9, #0
 8006e02:	9700      	str	r7, [sp, #0]
 8006e04:	4633      	mov	r3, r6
 8006e06:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	f000 f9d2 	bl	80071b4 <_printf_common>
 8006e10:	3001      	adds	r0, #1
 8006e12:	f040 808d 	bne.w	8006f30 <_printf_float+0x1d0>
 8006e16:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1a:	b00d      	add	sp, #52	@ 0x34
 8006e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e20:	4642      	mov	r2, r8
 8006e22:	464b      	mov	r3, r9
 8006e24:	4640      	mov	r0, r8
 8006e26:	4649      	mov	r1, r9
 8006e28:	f7f9 fe80 	bl	8000b2c <__aeabi_dcmpun>
 8006e2c:	b140      	cbz	r0, 8006e40 <_printf_float+0xe0>
 8006e2e:	464b      	mov	r3, r9
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	bfbc      	itt	lt
 8006e34:	232d      	movlt	r3, #45	@ 0x2d
 8006e36:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006e3a:	4a7e      	ldr	r2, [pc, #504]	@ (8007034 <_printf_float+0x2d4>)
 8006e3c:	4b7e      	ldr	r3, [pc, #504]	@ (8007038 <_printf_float+0x2d8>)
 8006e3e:	e7d4      	b.n	8006dea <_printf_float+0x8a>
 8006e40:	6863      	ldr	r3, [r4, #4]
 8006e42:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006e46:	9206      	str	r2, [sp, #24]
 8006e48:	1c5a      	adds	r2, r3, #1
 8006e4a:	d13b      	bne.n	8006ec4 <_printf_float+0x164>
 8006e4c:	2306      	movs	r3, #6
 8006e4e:	6063      	str	r3, [r4, #4]
 8006e50:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006e54:	2300      	movs	r3, #0
 8006e56:	6022      	str	r2, [r4, #0]
 8006e58:	9303      	str	r3, [sp, #12]
 8006e5a:	ab0a      	add	r3, sp, #40	@ 0x28
 8006e5c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006e60:	ab09      	add	r3, sp, #36	@ 0x24
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	6861      	ldr	r1, [r4, #4]
 8006e66:	ec49 8b10 	vmov	d0, r8, r9
 8006e6a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006e6e:	4628      	mov	r0, r5
 8006e70:	f7ff fed6 	bl	8006c20 <__cvt>
 8006e74:	9b06      	ldr	r3, [sp, #24]
 8006e76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e78:	2b47      	cmp	r3, #71	@ 0x47
 8006e7a:	4680      	mov	r8, r0
 8006e7c:	d129      	bne.n	8006ed2 <_printf_float+0x172>
 8006e7e:	1cc8      	adds	r0, r1, #3
 8006e80:	db02      	blt.n	8006e88 <_printf_float+0x128>
 8006e82:	6863      	ldr	r3, [r4, #4]
 8006e84:	4299      	cmp	r1, r3
 8006e86:	dd41      	ble.n	8006f0c <_printf_float+0x1ac>
 8006e88:	f1aa 0a02 	sub.w	sl, sl, #2
 8006e8c:	fa5f fa8a 	uxtb.w	sl, sl
 8006e90:	3901      	subs	r1, #1
 8006e92:	4652      	mov	r2, sl
 8006e94:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006e98:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e9a:	f7ff ff26 	bl	8006cea <__exponent>
 8006e9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ea0:	1813      	adds	r3, r2, r0
 8006ea2:	2a01      	cmp	r2, #1
 8006ea4:	4681      	mov	r9, r0
 8006ea6:	6123      	str	r3, [r4, #16]
 8006ea8:	dc02      	bgt.n	8006eb0 <_printf_float+0x150>
 8006eaa:	6822      	ldr	r2, [r4, #0]
 8006eac:	07d2      	lsls	r2, r2, #31
 8006eae:	d501      	bpl.n	8006eb4 <_printf_float+0x154>
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	6123      	str	r3, [r4, #16]
 8006eb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d0a2      	beq.n	8006e02 <_printf_float+0xa2>
 8006ebc:	232d      	movs	r3, #45	@ 0x2d
 8006ebe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ec2:	e79e      	b.n	8006e02 <_printf_float+0xa2>
 8006ec4:	9a06      	ldr	r2, [sp, #24]
 8006ec6:	2a47      	cmp	r2, #71	@ 0x47
 8006ec8:	d1c2      	bne.n	8006e50 <_printf_float+0xf0>
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1c0      	bne.n	8006e50 <_printf_float+0xf0>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e7bd      	b.n	8006e4e <_printf_float+0xee>
 8006ed2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ed6:	d9db      	bls.n	8006e90 <_printf_float+0x130>
 8006ed8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006edc:	d118      	bne.n	8006f10 <_printf_float+0x1b0>
 8006ede:	2900      	cmp	r1, #0
 8006ee0:	6863      	ldr	r3, [r4, #4]
 8006ee2:	dd0b      	ble.n	8006efc <_printf_float+0x19c>
 8006ee4:	6121      	str	r1, [r4, #16]
 8006ee6:	b913      	cbnz	r3, 8006eee <_printf_float+0x18e>
 8006ee8:	6822      	ldr	r2, [r4, #0]
 8006eea:	07d0      	lsls	r0, r2, #31
 8006eec:	d502      	bpl.n	8006ef4 <_printf_float+0x194>
 8006eee:	3301      	adds	r3, #1
 8006ef0:	440b      	add	r3, r1
 8006ef2:	6123      	str	r3, [r4, #16]
 8006ef4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006ef6:	f04f 0900 	mov.w	r9, #0
 8006efa:	e7db      	b.n	8006eb4 <_printf_float+0x154>
 8006efc:	b913      	cbnz	r3, 8006f04 <_printf_float+0x1a4>
 8006efe:	6822      	ldr	r2, [r4, #0]
 8006f00:	07d2      	lsls	r2, r2, #31
 8006f02:	d501      	bpl.n	8006f08 <_printf_float+0x1a8>
 8006f04:	3302      	adds	r3, #2
 8006f06:	e7f4      	b.n	8006ef2 <_printf_float+0x192>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e7f2      	b.n	8006ef2 <_printf_float+0x192>
 8006f0c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006f10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f12:	4299      	cmp	r1, r3
 8006f14:	db05      	blt.n	8006f22 <_printf_float+0x1c2>
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	6121      	str	r1, [r4, #16]
 8006f1a:	07d8      	lsls	r0, r3, #31
 8006f1c:	d5ea      	bpl.n	8006ef4 <_printf_float+0x194>
 8006f1e:	1c4b      	adds	r3, r1, #1
 8006f20:	e7e7      	b.n	8006ef2 <_printf_float+0x192>
 8006f22:	2900      	cmp	r1, #0
 8006f24:	bfd4      	ite	le
 8006f26:	f1c1 0202 	rsble	r2, r1, #2
 8006f2a:	2201      	movgt	r2, #1
 8006f2c:	4413      	add	r3, r2
 8006f2e:	e7e0      	b.n	8006ef2 <_printf_float+0x192>
 8006f30:	6823      	ldr	r3, [r4, #0]
 8006f32:	055a      	lsls	r2, r3, #21
 8006f34:	d407      	bmi.n	8006f46 <_printf_float+0x1e6>
 8006f36:	6923      	ldr	r3, [r4, #16]
 8006f38:	4642      	mov	r2, r8
 8006f3a:	4631      	mov	r1, r6
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	47b8      	blx	r7
 8006f40:	3001      	adds	r0, #1
 8006f42:	d12b      	bne.n	8006f9c <_printf_float+0x23c>
 8006f44:	e767      	b.n	8006e16 <_printf_float+0xb6>
 8006f46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006f4a:	f240 80dd 	bls.w	8007108 <_printf_float+0x3a8>
 8006f4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f52:	2200      	movs	r2, #0
 8006f54:	2300      	movs	r3, #0
 8006f56:	f7f9 fdb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	d033      	beq.n	8006fc6 <_printf_float+0x266>
 8006f5e:	4a37      	ldr	r2, [pc, #220]	@ (800703c <_printf_float+0x2dc>)
 8006f60:	2301      	movs	r3, #1
 8006f62:	4631      	mov	r1, r6
 8006f64:	4628      	mov	r0, r5
 8006f66:	47b8      	blx	r7
 8006f68:	3001      	adds	r0, #1
 8006f6a:	f43f af54 	beq.w	8006e16 <_printf_float+0xb6>
 8006f6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006f72:	4543      	cmp	r3, r8
 8006f74:	db02      	blt.n	8006f7c <_printf_float+0x21c>
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	07d8      	lsls	r0, r3, #31
 8006f7a:	d50f      	bpl.n	8006f9c <_printf_float+0x23c>
 8006f7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f80:	4631      	mov	r1, r6
 8006f82:	4628      	mov	r0, r5
 8006f84:	47b8      	blx	r7
 8006f86:	3001      	adds	r0, #1
 8006f88:	f43f af45 	beq.w	8006e16 <_printf_float+0xb6>
 8006f8c:	f04f 0900 	mov.w	r9, #0
 8006f90:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f94:	f104 0a1a 	add.w	sl, r4, #26
 8006f98:	45c8      	cmp	r8, r9
 8006f9a:	dc09      	bgt.n	8006fb0 <_printf_float+0x250>
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	079b      	lsls	r3, r3, #30
 8006fa0:	f100 8103 	bmi.w	80071aa <_printf_float+0x44a>
 8006fa4:	68e0      	ldr	r0, [r4, #12]
 8006fa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fa8:	4298      	cmp	r0, r3
 8006faa:	bfb8      	it	lt
 8006fac:	4618      	movlt	r0, r3
 8006fae:	e734      	b.n	8006e1a <_printf_float+0xba>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	4652      	mov	r2, sl
 8006fb4:	4631      	mov	r1, r6
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	47b8      	blx	r7
 8006fba:	3001      	adds	r0, #1
 8006fbc:	f43f af2b 	beq.w	8006e16 <_printf_float+0xb6>
 8006fc0:	f109 0901 	add.w	r9, r9, #1
 8006fc4:	e7e8      	b.n	8006f98 <_printf_float+0x238>
 8006fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	dc39      	bgt.n	8007040 <_printf_float+0x2e0>
 8006fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800703c <_printf_float+0x2dc>)
 8006fce:	2301      	movs	r3, #1
 8006fd0:	4631      	mov	r1, r6
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	47b8      	blx	r7
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	f43f af1d 	beq.w	8006e16 <_printf_float+0xb6>
 8006fdc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006fe0:	ea59 0303 	orrs.w	r3, r9, r3
 8006fe4:	d102      	bne.n	8006fec <_printf_float+0x28c>
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	07d9      	lsls	r1, r3, #31
 8006fea:	d5d7      	bpl.n	8006f9c <_printf_float+0x23c>
 8006fec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ff0:	4631      	mov	r1, r6
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	47b8      	blx	r7
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	f43f af0d 	beq.w	8006e16 <_printf_float+0xb6>
 8006ffc:	f04f 0a00 	mov.w	sl, #0
 8007000:	f104 0b1a 	add.w	fp, r4, #26
 8007004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007006:	425b      	negs	r3, r3
 8007008:	4553      	cmp	r3, sl
 800700a:	dc01      	bgt.n	8007010 <_printf_float+0x2b0>
 800700c:	464b      	mov	r3, r9
 800700e:	e793      	b.n	8006f38 <_printf_float+0x1d8>
 8007010:	2301      	movs	r3, #1
 8007012:	465a      	mov	r2, fp
 8007014:	4631      	mov	r1, r6
 8007016:	4628      	mov	r0, r5
 8007018:	47b8      	blx	r7
 800701a:	3001      	adds	r0, #1
 800701c:	f43f aefb 	beq.w	8006e16 <_printf_float+0xb6>
 8007020:	f10a 0a01 	add.w	sl, sl, #1
 8007024:	e7ee      	b.n	8007004 <_printf_float+0x2a4>
 8007026:	bf00      	nop
 8007028:	7fefffff 	.word	0x7fefffff
 800702c:	08009de8 	.word	0x08009de8
 8007030:	08009dec 	.word	0x08009dec
 8007034:	08009df0 	.word	0x08009df0
 8007038:	08009df4 	.word	0x08009df4
 800703c:	08009df8 	.word	0x08009df8
 8007040:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007042:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007046:	4553      	cmp	r3, sl
 8007048:	bfa8      	it	ge
 800704a:	4653      	movge	r3, sl
 800704c:	2b00      	cmp	r3, #0
 800704e:	4699      	mov	r9, r3
 8007050:	dc36      	bgt.n	80070c0 <_printf_float+0x360>
 8007052:	f04f 0b00 	mov.w	fp, #0
 8007056:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800705a:	f104 021a 	add.w	r2, r4, #26
 800705e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007060:	9306      	str	r3, [sp, #24]
 8007062:	eba3 0309 	sub.w	r3, r3, r9
 8007066:	455b      	cmp	r3, fp
 8007068:	dc31      	bgt.n	80070ce <_printf_float+0x36e>
 800706a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800706c:	459a      	cmp	sl, r3
 800706e:	dc3a      	bgt.n	80070e6 <_printf_float+0x386>
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	07da      	lsls	r2, r3, #31
 8007074:	d437      	bmi.n	80070e6 <_printf_float+0x386>
 8007076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007078:	ebaa 0903 	sub.w	r9, sl, r3
 800707c:	9b06      	ldr	r3, [sp, #24]
 800707e:	ebaa 0303 	sub.w	r3, sl, r3
 8007082:	4599      	cmp	r9, r3
 8007084:	bfa8      	it	ge
 8007086:	4699      	movge	r9, r3
 8007088:	f1b9 0f00 	cmp.w	r9, #0
 800708c:	dc33      	bgt.n	80070f6 <_printf_float+0x396>
 800708e:	f04f 0800 	mov.w	r8, #0
 8007092:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007096:	f104 0b1a 	add.w	fp, r4, #26
 800709a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800709c:	ebaa 0303 	sub.w	r3, sl, r3
 80070a0:	eba3 0309 	sub.w	r3, r3, r9
 80070a4:	4543      	cmp	r3, r8
 80070a6:	f77f af79 	ble.w	8006f9c <_printf_float+0x23c>
 80070aa:	2301      	movs	r3, #1
 80070ac:	465a      	mov	r2, fp
 80070ae:	4631      	mov	r1, r6
 80070b0:	4628      	mov	r0, r5
 80070b2:	47b8      	blx	r7
 80070b4:	3001      	adds	r0, #1
 80070b6:	f43f aeae 	beq.w	8006e16 <_printf_float+0xb6>
 80070ba:	f108 0801 	add.w	r8, r8, #1
 80070be:	e7ec      	b.n	800709a <_printf_float+0x33a>
 80070c0:	4642      	mov	r2, r8
 80070c2:	4631      	mov	r1, r6
 80070c4:	4628      	mov	r0, r5
 80070c6:	47b8      	blx	r7
 80070c8:	3001      	adds	r0, #1
 80070ca:	d1c2      	bne.n	8007052 <_printf_float+0x2f2>
 80070cc:	e6a3      	b.n	8006e16 <_printf_float+0xb6>
 80070ce:	2301      	movs	r3, #1
 80070d0:	4631      	mov	r1, r6
 80070d2:	4628      	mov	r0, r5
 80070d4:	9206      	str	r2, [sp, #24]
 80070d6:	47b8      	blx	r7
 80070d8:	3001      	adds	r0, #1
 80070da:	f43f ae9c 	beq.w	8006e16 <_printf_float+0xb6>
 80070de:	9a06      	ldr	r2, [sp, #24]
 80070e0:	f10b 0b01 	add.w	fp, fp, #1
 80070e4:	e7bb      	b.n	800705e <_printf_float+0x2fe>
 80070e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070ea:	4631      	mov	r1, r6
 80070ec:	4628      	mov	r0, r5
 80070ee:	47b8      	blx	r7
 80070f0:	3001      	adds	r0, #1
 80070f2:	d1c0      	bne.n	8007076 <_printf_float+0x316>
 80070f4:	e68f      	b.n	8006e16 <_printf_float+0xb6>
 80070f6:	9a06      	ldr	r2, [sp, #24]
 80070f8:	464b      	mov	r3, r9
 80070fa:	4442      	add	r2, r8
 80070fc:	4631      	mov	r1, r6
 80070fe:	4628      	mov	r0, r5
 8007100:	47b8      	blx	r7
 8007102:	3001      	adds	r0, #1
 8007104:	d1c3      	bne.n	800708e <_printf_float+0x32e>
 8007106:	e686      	b.n	8006e16 <_printf_float+0xb6>
 8007108:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800710c:	f1ba 0f01 	cmp.w	sl, #1
 8007110:	dc01      	bgt.n	8007116 <_printf_float+0x3b6>
 8007112:	07db      	lsls	r3, r3, #31
 8007114:	d536      	bpl.n	8007184 <_printf_float+0x424>
 8007116:	2301      	movs	r3, #1
 8007118:	4642      	mov	r2, r8
 800711a:	4631      	mov	r1, r6
 800711c:	4628      	mov	r0, r5
 800711e:	47b8      	blx	r7
 8007120:	3001      	adds	r0, #1
 8007122:	f43f ae78 	beq.w	8006e16 <_printf_float+0xb6>
 8007126:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800712a:	4631      	mov	r1, r6
 800712c:	4628      	mov	r0, r5
 800712e:	47b8      	blx	r7
 8007130:	3001      	adds	r0, #1
 8007132:	f43f ae70 	beq.w	8006e16 <_printf_float+0xb6>
 8007136:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800713a:	2200      	movs	r2, #0
 800713c:	2300      	movs	r3, #0
 800713e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007142:	f7f9 fcc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007146:	b9c0      	cbnz	r0, 800717a <_printf_float+0x41a>
 8007148:	4653      	mov	r3, sl
 800714a:	f108 0201 	add.w	r2, r8, #1
 800714e:	4631      	mov	r1, r6
 8007150:	4628      	mov	r0, r5
 8007152:	47b8      	blx	r7
 8007154:	3001      	adds	r0, #1
 8007156:	d10c      	bne.n	8007172 <_printf_float+0x412>
 8007158:	e65d      	b.n	8006e16 <_printf_float+0xb6>
 800715a:	2301      	movs	r3, #1
 800715c:	465a      	mov	r2, fp
 800715e:	4631      	mov	r1, r6
 8007160:	4628      	mov	r0, r5
 8007162:	47b8      	blx	r7
 8007164:	3001      	adds	r0, #1
 8007166:	f43f ae56 	beq.w	8006e16 <_printf_float+0xb6>
 800716a:	f108 0801 	add.w	r8, r8, #1
 800716e:	45d0      	cmp	r8, sl
 8007170:	dbf3      	blt.n	800715a <_printf_float+0x3fa>
 8007172:	464b      	mov	r3, r9
 8007174:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007178:	e6df      	b.n	8006f3a <_printf_float+0x1da>
 800717a:	f04f 0800 	mov.w	r8, #0
 800717e:	f104 0b1a 	add.w	fp, r4, #26
 8007182:	e7f4      	b.n	800716e <_printf_float+0x40e>
 8007184:	2301      	movs	r3, #1
 8007186:	4642      	mov	r2, r8
 8007188:	e7e1      	b.n	800714e <_printf_float+0x3ee>
 800718a:	2301      	movs	r3, #1
 800718c:	464a      	mov	r2, r9
 800718e:	4631      	mov	r1, r6
 8007190:	4628      	mov	r0, r5
 8007192:	47b8      	blx	r7
 8007194:	3001      	adds	r0, #1
 8007196:	f43f ae3e 	beq.w	8006e16 <_printf_float+0xb6>
 800719a:	f108 0801 	add.w	r8, r8, #1
 800719e:	68e3      	ldr	r3, [r4, #12]
 80071a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80071a2:	1a5b      	subs	r3, r3, r1
 80071a4:	4543      	cmp	r3, r8
 80071a6:	dcf0      	bgt.n	800718a <_printf_float+0x42a>
 80071a8:	e6fc      	b.n	8006fa4 <_printf_float+0x244>
 80071aa:	f04f 0800 	mov.w	r8, #0
 80071ae:	f104 0919 	add.w	r9, r4, #25
 80071b2:	e7f4      	b.n	800719e <_printf_float+0x43e>

080071b4 <_printf_common>:
 80071b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071b8:	4616      	mov	r6, r2
 80071ba:	4698      	mov	r8, r3
 80071bc:	688a      	ldr	r2, [r1, #8]
 80071be:	690b      	ldr	r3, [r1, #16]
 80071c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071c4:	4293      	cmp	r3, r2
 80071c6:	bfb8      	it	lt
 80071c8:	4613      	movlt	r3, r2
 80071ca:	6033      	str	r3, [r6, #0]
 80071cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80071d0:	4607      	mov	r7, r0
 80071d2:	460c      	mov	r4, r1
 80071d4:	b10a      	cbz	r2, 80071da <_printf_common+0x26>
 80071d6:	3301      	adds	r3, #1
 80071d8:	6033      	str	r3, [r6, #0]
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	0699      	lsls	r1, r3, #26
 80071de:	bf42      	ittt	mi
 80071e0:	6833      	ldrmi	r3, [r6, #0]
 80071e2:	3302      	addmi	r3, #2
 80071e4:	6033      	strmi	r3, [r6, #0]
 80071e6:	6825      	ldr	r5, [r4, #0]
 80071e8:	f015 0506 	ands.w	r5, r5, #6
 80071ec:	d106      	bne.n	80071fc <_printf_common+0x48>
 80071ee:	f104 0a19 	add.w	sl, r4, #25
 80071f2:	68e3      	ldr	r3, [r4, #12]
 80071f4:	6832      	ldr	r2, [r6, #0]
 80071f6:	1a9b      	subs	r3, r3, r2
 80071f8:	42ab      	cmp	r3, r5
 80071fa:	dc26      	bgt.n	800724a <_printf_common+0x96>
 80071fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007200:	6822      	ldr	r2, [r4, #0]
 8007202:	3b00      	subs	r3, #0
 8007204:	bf18      	it	ne
 8007206:	2301      	movne	r3, #1
 8007208:	0692      	lsls	r2, r2, #26
 800720a:	d42b      	bmi.n	8007264 <_printf_common+0xb0>
 800720c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007210:	4641      	mov	r1, r8
 8007212:	4638      	mov	r0, r7
 8007214:	47c8      	blx	r9
 8007216:	3001      	adds	r0, #1
 8007218:	d01e      	beq.n	8007258 <_printf_common+0xa4>
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	6922      	ldr	r2, [r4, #16]
 800721e:	f003 0306 	and.w	r3, r3, #6
 8007222:	2b04      	cmp	r3, #4
 8007224:	bf02      	ittt	eq
 8007226:	68e5      	ldreq	r5, [r4, #12]
 8007228:	6833      	ldreq	r3, [r6, #0]
 800722a:	1aed      	subeq	r5, r5, r3
 800722c:	68a3      	ldr	r3, [r4, #8]
 800722e:	bf0c      	ite	eq
 8007230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007234:	2500      	movne	r5, #0
 8007236:	4293      	cmp	r3, r2
 8007238:	bfc4      	itt	gt
 800723a:	1a9b      	subgt	r3, r3, r2
 800723c:	18ed      	addgt	r5, r5, r3
 800723e:	2600      	movs	r6, #0
 8007240:	341a      	adds	r4, #26
 8007242:	42b5      	cmp	r5, r6
 8007244:	d11a      	bne.n	800727c <_printf_common+0xc8>
 8007246:	2000      	movs	r0, #0
 8007248:	e008      	b.n	800725c <_printf_common+0xa8>
 800724a:	2301      	movs	r3, #1
 800724c:	4652      	mov	r2, sl
 800724e:	4641      	mov	r1, r8
 8007250:	4638      	mov	r0, r7
 8007252:	47c8      	blx	r9
 8007254:	3001      	adds	r0, #1
 8007256:	d103      	bne.n	8007260 <_printf_common+0xac>
 8007258:	f04f 30ff 	mov.w	r0, #4294967295
 800725c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007260:	3501      	adds	r5, #1
 8007262:	e7c6      	b.n	80071f2 <_printf_common+0x3e>
 8007264:	18e1      	adds	r1, r4, r3
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	2030      	movs	r0, #48	@ 0x30
 800726a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800726e:	4422      	add	r2, r4
 8007270:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007274:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007278:	3302      	adds	r3, #2
 800727a:	e7c7      	b.n	800720c <_printf_common+0x58>
 800727c:	2301      	movs	r3, #1
 800727e:	4622      	mov	r2, r4
 8007280:	4641      	mov	r1, r8
 8007282:	4638      	mov	r0, r7
 8007284:	47c8      	blx	r9
 8007286:	3001      	adds	r0, #1
 8007288:	d0e6      	beq.n	8007258 <_printf_common+0xa4>
 800728a:	3601      	adds	r6, #1
 800728c:	e7d9      	b.n	8007242 <_printf_common+0x8e>
	...

08007290 <_printf_i>:
 8007290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007294:	7e0f      	ldrb	r7, [r1, #24]
 8007296:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007298:	2f78      	cmp	r7, #120	@ 0x78
 800729a:	4691      	mov	r9, r2
 800729c:	4680      	mov	r8, r0
 800729e:	460c      	mov	r4, r1
 80072a0:	469a      	mov	sl, r3
 80072a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80072a6:	d807      	bhi.n	80072b8 <_printf_i+0x28>
 80072a8:	2f62      	cmp	r7, #98	@ 0x62
 80072aa:	d80a      	bhi.n	80072c2 <_printf_i+0x32>
 80072ac:	2f00      	cmp	r7, #0
 80072ae:	f000 80d2 	beq.w	8007456 <_printf_i+0x1c6>
 80072b2:	2f58      	cmp	r7, #88	@ 0x58
 80072b4:	f000 80b9 	beq.w	800742a <_printf_i+0x19a>
 80072b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80072c0:	e03a      	b.n	8007338 <_printf_i+0xa8>
 80072c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80072c6:	2b15      	cmp	r3, #21
 80072c8:	d8f6      	bhi.n	80072b8 <_printf_i+0x28>
 80072ca:	a101      	add	r1, pc, #4	@ (adr r1, 80072d0 <_printf_i+0x40>)
 80072cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072d0:	08007329 	.word	0x08007329
 80072d4:	0800733d 	.word	0x0800733d
 80072d8:	080072b9 	.word	0x080072b9
 80072dc:	080072b9 	.word	0x080072b9
 80072e0:	080072b9 	.word	0x080072b9
 80072e4:	080072b9 	.word	0x080072b9
 80072e8:	0800733d 	.word	0x0800733d
 80072ec:	080072b9 	.word	0x080072b9
 80072f0:	080072b9 	.word	0x080072b9
 80072f4:	080072b9 	.word	0x080072b9
 80072f8:	080072b9 	.word	0x080072b9
 80072fc:	0800743d 	.word	0x0800743d
 8007300:	08007367 	.word	0x08007367
 8007304:	080073f7 	.word	0x080073f7
 8007308:	080072b9 	.word	0x080072b9
 800730c:	080072b9 	.word	0x080072b9
 8007310:	0800745f 	.word	0x0800745f
 8007314:	080072b9 	.word	0x080072b9
 8007318:	08007367 	.word	0x08007367
 800731c:	080072b9 	.word	0x080072b9
 8007320:	080072b9 	.word	0x080072b9
 8007324:	080073ff 	.word	0x080073ff
 8007328:	6833      	ldr	r3, [r6, #0]
 800732a:	1d1a      	adds	r2, r3, #4
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6032      	str	r2, [r6, #0]
 8007330:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007334:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007338:	2301      	movs	r3, #1
 800733a:	e09d      	b.n	8007478 <_printf_i+0x1e8>
 800733c:	6833      	ldr	r3, [r6, #0]
 800733e:	6820      	ldr	r0, [r4, #0]
 8007340:	1d19      	adds	r1, r3, #4
 8007342:	6031      	str	r1, [r6, #0]
 8007344:	0606      	lsls	r6, r0, #24
 8007346:	d501      	bpl.n	800734c <_printf_i+0xbc>
 8007348:	681d      	ldr	r5, [r3, #0]
 800734a:	e003      	b.n	8007354 <_printf_i+0xc4>
 800734c:	0645      	lsls	r5, r0, #25
 800734e:	d5fb      	bpl.n	8007348 <_printf_i+0xb8>
 8007350:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007354:	2d00      	cmp	r5, #0
 8007356:	da03      	bge.n	8007360 <_printf_i+0xd0>
 8007358:	232d      	movs	r3, #45	@ 0x2d
 800735a:	426d      	negs	r5, r5
 800735c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007360:	4859      	ldr	r0, [pc, #356]	@ (80074c8 <_printf_i+0x238>)
 8007362:	230a      	movs	r3, #10
 8007364:	e011      	b.n	800738a <_printf_i+0xfa>
 8007366:	6821      	ldr	r1, [r4, #0]
 8007368:	6833      	ldr	r3, [r6, #0]
 800736a:	0608      	lsls	r0, r1, #24
 800736c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007370:	d402      	bmi.n	8007378 <_printf_i+0xe8>
 8007372:	0649      	lsls	r1, r1, #25
 8007374:	bf48      	it	mi
 8007376:	b2ad      	uxthmi	r5, r5
 8007378:	2f6f      	cmp	r7, #111	@ 0x6f
 800737a:	4853      	ldr	r0, [pc, #332]	@ (80074c8 <_printf_i+0x238>)
 800737c:	6033      	str	r3, [r6, #0]
 800737e:	bf14      	ite	ne
 8007380:	230a      	movne	r3, #10
 8007382:	2308      	moveq	r3, #8
 8007384:	2100      	movs	r1, #0
 8007386:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800738a:	6866      	ldr	r6, [r4, #4]
 800738c:	60a6      	str	r6, [r4, #8]
 800738e:	2e00      	cmp	r6, #0
 8007390:	bfa2      	ittt	ge
 8007392:	6821      	ldrge	r1, [r4, #0]
 8007394:	f021 0104 	bicge.w	r1, r1, #4
 8007398:	6021      	strge	r1, [r4, #0]
 800739a:	b90d      	cbnz	r5, 80073a0 <_printf_i+0x110>
 800739c:	2e00      	cmp	r6, #0
 800739e:	d04b      	beq.n	8007438 <_printf_i+0x1a8>
 80073a0:	4616      	mov	r6, r2
 80073a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80073a6:	fb03 5711 	mls	r7, r3, r1, r5
 80073aa:	5dc7      	ldrb	r7, [r0, r7]
 80073ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073b0:	462f      	mov	r7, r5
 80073b2:	42bb      	cmp	r3, r7
 80073b4:	460d      	mov	r5, r1
 80073b6:	d9f4      	bls.n	80073a2 <_printf_i+0x112>
 80073b8:	2b08      	cmp	r3, #8
 80073ba:	d10b      	bne.n	80073d4 <_printf_i+0x144>
 80073bc:	6823      	ldr	r3, [r4, #0]
 80073be:	07df      	lsls	r7, r3, #31
 80073c0:	d508      	bpl.n	80073d4 <_printf_i+0x144>
 80073c2:	6923      	ldr	r3, [r4, #16]
 80073c4:	6861      	ldr	r1, [r4, #4]
 80073c6:	4299      	cmp	r1, r3
 80073c8:	bfde      	ittt	le
 80073ca:	2330      	movle	r3, #48	@ 0x30
 80073cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073d4:	1b92      	subs	r2, r2, r6
 80073d6:	6122      	str	r2, [r4, #16]
 80073d8:	f8cd a000 	str.w	sl, [sp]
 80073dc:	464b      	mov	r3, r9
 80073de:	aa03      	add	r2, sp, #12
 80073e0:	4621      	mov	r1, r4
 80073e2:	4640      	mov	r0, r8
 80073e4:	f7ff fee6 	bl	80071b4 <_printf_common>
 80073e8:	3001      	adds	r0, #1
 80073ea:	d14a      	bne.n	8007482 <_printf_i+0x1f2>
 80073ec:	f04f 30ff 	mov.w	r0, #4294967295
 80073f0:	b004      	add	sp, #16
 80073f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	f043 0320 	orr.w	r3, r3, #32
 80073fc:	6023      	str	r3, [r4, #0]
 80073fe:	4833      	ldr	r0, [pc, #204]	@ (80074cc <_printf_i+0x23c>)
 8007400:	2778      	movs	r7, #120	@ 0x78
 8007402:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	6831      	ldr	r1, [r6, #0]
 800740a:	061f      	lsls	r7, r3, #24
 800740c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007410:	d402      	bmi.n	8007418 <_printf_i+0x188>
 8007412:	065f      	lsls	r7, r3, #25
 8007414:	bf48      	it	mi
 8007416:	b2ad      	uxthmi	r5, r5
 8007418:	6031      	str	r1, [r6, #0]
 800741a:	07d9      	lsls	r1, r3, #31
 800741c:	bf44      	itt	mi
 800741e:	f043 0320 	orrmi.w	r3, r3, #32
 8007422:	6023      	strmi	r3, [r4, #0]
 8007424:	b11d      	cbz	r5, 800742e <_printf_i+0x19e>
 8007426:	2310      	movs	r3, #16
 8007428:	e7ac      	b.n	8007384 <_printf_i+0xf4>
 800742a:	4827      	ldr	r0, [pc, #156]	@ (80074c8 <_printf_i+0x238>)
 800742c:	e7e9      	b.n	8007402 <_printf_i+0x172>
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	f023 0320 	bic.w	r3, r3, #32
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	e7f6      	b.n	8007426 <_printf_i+0x196>
 8007438:	4616      	mov	r6, r2
 800743a:	e7bd      	b.n	80073b8 <_printf_i+0x128>
 800743c:	6833      	ldr	r3, [r6, #0]
 800743e:	6825      	ldr	r5, [r4, #0]
 8007440:	6961      	ldr	r1, [r4, #20]
 8007442:	1d18      	adds	r0, r3, #4
 8007444:	6030      	str	r0, [r6, #0]
 8007446:	062e      	lsls	r6, r5, #24
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	d501      	bpl.n	8007450 <_printf_i+0x1c0>
 800744c:	6019      	str	r1, [r3, #0]
 800744e:	e002      	b.n	8007456 <_printf_i+0x1c6>
 8007450:	0668      	lsls	r0, r5, #25
 8007452:	d5fb      	bpl.n	800744c <_printf_i+0x1bc>
 8007454:	8019      	strh	r1, [r3, #0]
 8007456:	2300      	movs	r3, #0
 8007458:	6123      	str	r3, [r4, #16]
 800745a:	4616      	mov	r6, r2
 800745c:	e7bc      	b.n	80073d8 <_printf_i+0x148>
 800745e:	6833      	ldr	r3, [r6, #0]
 8007460:	1d1a      	adds	r2, r3, #4
 8007462:	6032      	str	r2, [r6, #0]
 8007464:	681e      	ldr	r6, [r3, #0]
 8007466:	6862      	ldr	r2, [r4, #4]
 8007468:	2100      	movs	r1, #0
 800746a:	4630      	mov	r0, r6
 800746c:	f7f8 feb0 	bl	80001d0 <memchr>
 8007470:	b108      	cbz	r0, 8007476 <_printf_i+0x1e6>
 8007472:	1b80      	subs	r0, r0, r6
 8007474:	6060      	str	r0, [r4, #4]
 8007476:	6863      	ldr	r3, [r4, #4]
 8007478:	6123      	str	r3, [r4, #16]
 800747a:	2300      	movs	r3, #0
 800747c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007480:	e7aa      	b.n	80073d8 <_printf_i+0x148>
 8007482:	6923      	ldr	r3, [r4, #16]
 8007484:	4632      	mov	r2, r6
 8007486:	4649      	mov	r1, r9
 8007488:	4640      	mov	r0, r8
 800748a:	47d0      	blx	sl
 800748c:	3001      	adds	r0, #1
 800748e:	d0ad      	beq.n	80073ec <_printf_i+0x15c>
 8007490:	6823      	ldr	r3, [r4, #0]
 8007492:	079b      	lsls	r3, r3, #30
 8007494:	d413      	bmi.n	80074be <_printf_i+0x22e>
 8007496:	68e0      	ldr	r0, [r4, #12]
 8007498:	9b03      	ldr	r3, [sp, #12]
 800749a:	4298      	cmp	r0, r3
 800749c:	bfb8      	it	lt
 800749e:	4618      	movlt	r0, r3
 80074a0:	e7a6      	b.n	80073f0 <_printf_i+0x160>
 80074a2:	2301      	movs	r3, #1
 80074a4:	4632      	mov	r2, r6
 80074a6:	4649      	mov	r1, r9
 80074a8:	4640      	mov	r0, r8
 80074aa:	47d0      	blx	sl
 80074ac:	3001      	adds	r0, #1
 80074ae:	d09d      	beq.n	80073ec <_printf_i+0x15c>
 80074b0:	3501      	adds	r5, #1
 80074b2:	68e3      	ldr	r3, [r4, #12]
 80074b4:	9903      	ldr	r1, [sp, #12]
 80074b6:	1a5b      	subs	r3, r3, r1
 80074b8:	42ab      	cmp	r3, r5
 80074ba:	dcf2      	bgt.n	80074a2 <_printf_i+0x212>
 80074bc:	e7eb      	b.n	8007496 <_printf_i+0x206>
 80074be:	2500      	movs	r5, #0
 80074c0:	f104 0619 	add.w	r6, r4, #25
 80074c4:	e7f5      	b.n	80074b2 <_printf_i+0x222>
 80074c6:	bf00      	nop
 80074c8:	08009dfa 	.word	0x08009dfa
 80074cc:	08009e0b 	.word	0x08009e0b

080074d0 <std>:
 80074d0:	2300      	movs	r3, #0
 80074d2:	b510      	push	{r4, lr}
 80074d4:	4604      	mov	r4, r0
 80074d6:	e9c0 3300 	strd	r3, r3, [r0]
 80074da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074de:	6083      	str	r3, [r0, #8]
 80074e0:	8181      	strh	r1, [r0, #12]
 80074e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80074e4:	81c2      	strh	r2, [r0, #14]
 80074e6:	6183      	str	r3, [r0, #24]
 80074e8:	4619      	mov	r1, r3
 80074ea:	2208      	movs	r2, #8
 80074ec:	305c      	adds	r0, #92	@ 0x5c
 80074ee:	f000 f928 	bl	8007742 <memset>
 80074f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007528 <std+0x58>)
 80074f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80074f6:	4b0d      	ldr	r3, [pc, #52]	@ (800752c <std+0x5c>)
 80074f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007530 <std+0x60>)
 80074fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007534 <std+0x64>)
 8007500:	6323      	str	r3, [r4, #48]	@ 0x30
 8007502:	4b0d      	ldr	r3, [pc, #52]	@ (8007538 <std+0x68>)
 8007504:	6224      	str	r4, [r4, #32]
 8007506:	429c      	cmp	r4, r3
 8007508:	d006      	beq.n	8007518 <std+0x48>
 800750a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800750e:	4294      	cmp	r4, r2
 8007510:	d002      	beq.n	8007518 <std+0x48>
 8007512:	33d0      	adds	r3, #208	@ 0xd0
 8007514:	429c      	cmp	r4, r3
 8007516:	d105      	bne.n	8007524 <std+0x54>
 8007518:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800751c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007520:	f000 b99c 	b.w	800785c <__retarget_lock_init_recursive>
 8007524:	bd10      	pop	{r4, pc}
 8007526:	bf00      	nop
 8007528:	080076bd 	.word	0x080076bd
 800752c:	080076df 	.word	0x080076df
 8007530:	08007717 	.word	0x08007717
 8007534:	0800773b 	.word	0x0800773b
 8007538:	20000a18 	.word	0x20000a18

0800753c <stdio_exit_handler>:
 800753c:	4a02      	ldr	r2, [pc, #8]	@ (8007548 <stdio_exit_handler+0xc>)
 800753e:	4903      	ldr	r1, [pc, #12]	@ (800754c <stdio_exit_handler+0x10>)
 8007540:	4803      	ldr	r0, [pc, #12]	@ (8007550 <stdio_exit_handler+0x14>)
 8007542:	f000 b869 	b.w	8007618 <_fwalk_sglue>
 8007546:	bf00      	nop
 8007548:	200006c0 	.word	0x200006c0
 800754c:	08009079 	.word	0x08009079
 8007550:	200006d0 	.word	0x200006d0

08007554 <cleanup_stdio>:
 8007554:	6841      	ldr	r1, [r0, #4]
 8007556:	4b0c      	ldr	r3, [pc, #48]	@ (8007588 <cleanup_stdio+0x34>)
 8007558:	4299      	cmp	r1, r3
 800755a:	b510      	push	{r4, lr}
 800755c:	4604      	mov	r4, r0
 800755e:	d001      	beq.n	8007564 <cleanup_stdio+0x10>
 8007560:	f001 fd8a 	bl	8009078 <_fflush_r>
 8007564:	68a1      	ldr	r1, [r4, #8]
 8007566:	4b09      	ldr	r3, [pc, #36]	@ (800758c <cleanup_stdio+0x38>)
 8007568:	4299      	cmp	r1, r3
 800756a:	d002      	beq.n	8007572 <cleanup_stdio+0x1e>
 800756c:	4620      	mov	r0, r4
 800756e:	f001 fd83 	bl	8009078 <_fflush_r>
 8007572:	68e1      	ldr	r1, [r4, #12]
 8007574:	4b06      	ldr	r3, [pc, #24]	@ (8007590 <cleanup_stdio+0x3c>)
 8007576:	4299      	cmp	r1, r3
 8007578:	d004      	beq.n	8007584 <cleanup_stdio+0x30>
 800757a:	4620      	mov	r0, r4
 800757c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007580:	f001 bd7a 	b.w	8009078 <_fflush_r>
 8007584:	bd10      	pop	{r4, pc}
 8007586:	bf00      	nop
 8007588:	20000a18 	.word	0x20000a18
 800758c:	20000a80 	.word	0x20000a80
 8007590:	20000ae8 	.word	0x20000ae8

08007594 <global_stdio_init.part.0>:
 8007594:	b510      	push	{r4, lr}
 8007596:	4b0b      	ldr	r3, [pc, #44]	@ (80075c4 <global_stdio_init.part.0+0x30>)
 8007598:	4c0b      	ldr	r4, [pc, #44]	@ (80075c8 <global_stdio_init.part.0+0x34>)
 800759a:	4a0c      	ldr	r2, [pc, #48]	@ (80075cc <global_stdio_init.part.0+0x38>)
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	4620      	mov	r0, r4
 80075a0:	2200      	movs	r2, #0
 80075a2:	2104      	movs	r1, #4
 80075a4:	f7ff ff94 	bl	80074d0 <std>
 80075a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80075ac:	2201      	movs	r2, #1
 80075ae:	2109      	movs	r1, #9
 80075b0:	f7ff ff8e 	bl	80074d0 <std>
 80075b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80075b8:	2202      	movs	r2, #2
 80075ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075be:	2112      	movs	r1, #18
 80075c0:	f7ff bf86 	b.w	80074d0 <std>
 80075c4:	20000b50 	.word	0x20000b50
 80075c8:	20000a18 	.word	0x20000a18
 80075cc:	0800753d 	.word	0x0800753d

080075d0 <__sfp_lock_acquire>:
 80075d0:	4801      	ldr	r0, [pc, #4]	@ (80075d8 <__sfp_lock_acquire+0x8>)
 80075d2:	f000 b944 	b.w	800785e <__retarget_lock_acquire_recursive>
 80075d6:	bf00      	nop
 80075d8:	20000b59 	.word	0x20000b59

080075dc <__sfp_lock_release>:
 80075dc:	4801      	ldr	r0, [pc, #4]	@ (80075e4 <__sfp_lock_release+0x8>)
 80075de:	f000 b93f 	b.w	8007860 <__retarget_lock_release_recursive>
 80075e2:	bf00      	nop
 80075e4:	20000b59 	.word	0x20000b59

080075e8 <__sinit>:
 80075e8:	b510      	push	{r4, lr}
 80075ea:	4604      	mov	r4, r0
 80075ec:	f7ff fff0 	bl	80075d0 <__sfp_lock_acquire>
 80075f0:	6a23      	ldr	r3, [r4, #32]
 80075f2:	b11b      	cbz	r3, 80075fc <__sinit+0x14>
 80075f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075f8:	f7ff bff0 	b.w	80075dc <__sfp_lock_release>
 80075fc:	4b04      	ldr	r3, [pc, #16]	@ (8007610 <__sinit+0x28>)
 80075fe:	6223      	str	r3, [r4, #32]
 8007600:	4b04      	ldr	r3, [pc, #16]	@ (8007614 <__sinit+0x2c>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1f5      	bne.n	80075f4 <__sinit+0xc>
 8007608:	f7ff ffc4 	bl	8007594 <global_stdio_init.part.0>
 800760c:	e7f2      	b.n	80075f4 <__sinit+0xc>
 800760e:	bf00      	nop
 8007610:	08007555 	.word	0x08007555
 8007614:	20000b50 	.word	0x20000b50

08007618 <_fwalk_sglue>:
 8007618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800761c:	4607      	mov	r7, r0
 800761e:	4688      	mov	r8, r1
 8007620:	4614      	mov	r4, r2
 8007622:	2600      	movs	r6, #0
 8007624:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007628:	f1b9 0901 	subs.w	r9, r9, #1
 800762c:	d505      	bpl.n	800763a <_fwalk_sglue+0x22>
 800762e:	6824      	ldr	r4, [r4, #0]
 8007630:	2c00      	cmp	r4, #0
 8007632:	d1f7      	bne.n	8007624 <_fwalk_sglue+0xc>
 8007634:	4630      	mov	r0, r6
 8007636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800763a:	89ab      	ldrh	r3, [r5, #12]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d907      	bls.n	8007650 <_fwalk_sglue+0x38>
 8007640:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007644:	3301      	adds	r3, #1
 8007646:	d003      	beq.n	8007650 <_fwalk_sglue+0x38>
 8007648:	4629      	mov	r1, r5
 800764a:	4638      	mov	r0, r7
 800764c:	47c0      	blx	r8
 800764e:	4306      	orrs	r6, r0
 8007650:	3568      	adds	r5, #104	@ 0x68
 8007652:	e7e9      	b.n	8007628 <_fwalk_sglue+0x10>

08007654 <sniprintf>:
 8007654:	b40c      	push	{r2, r3}
 8007656:	b530      	push	{r4, r5, lr}
 8007658:	4b17      	ldr	r3, [pc, #92]	@ (80076b8 <sniprintf+0x64>)
 800765a:	1e0c      	subs	r4, r1, #0
 800765c:	681d      	ldr	r5, [r3, #0]
 800765e:	b09d      	sub	sp, #116	@ 0x74
 8007660:	da08      	bge.n	8007674 <sniprintf+0x20>
 8007662:	238b      	movs	r3, #139	@ 0x8b
 8007664:	602b      	str	r3, [r5, #0]
 8007666:	f04f 30ff 	mov.w	r0, #4294967295
 800766a:	b01d      	add	sp, #116	@ 0x74
 800766c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007670:	b002      	add	sp, #8
 8007672:	4770      	bx	lr
 8007674:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007678:	f8ad 3014 	strh.w	r3, [sp, #20]
 800767c:	bf14      	ite	ne
 800767e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007682:	4623      	moveq	r3, r4
 8007684:	9304      	str	r3, [sp, #16]
 8007686:	9307      	str	r3, [sp, #28]
 8007688:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800768c:	9002      	str	r0, [sp, #8]
 800768e:	9006      	str	r0, [sp, #24]
 8007690:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007694:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007696:	ab21      	add	r3, sp, #132	@ 0x84
 8007698:	a902      	add	r1, sp, #8
 800769a:	4628      	mov	r0, r5
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	f001 fb6b 	bl	8008d78 <_svfiprintf_r>
 80076a2:	1c43      	adds	r3, r0, #1
 80076a4:	bfbc      	itt	lt
 80076a6:	238b      	movlt	r3, #139	@ 0x8b
 80076a8:	602b      	strlt	r3, [r5, #0]
 80076aa:	2c00      	cmp	r4, #0
 80076ac:	d0dd      	beq.n	800766a <sniprintf+0x16>
 80076ae:	9b02      	ldr	r3, [sp, #8]
 80076b0:	2200      	movs	r2, #0
 80076b2:	701a      	strb	r2, [r3, #0]
 80076b4:	e7d9      	b.n	800766a <sniprintf+0x16>
 80076b6:	bf00      	nop
 80076b8:	200006cc 	.word	0x200006cc

080076bc <__sread>:
 80076bc:	b510      	push	{r4, lr}
 80076be:	460c      	mov	r4, r1
 80076c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076c4:	f000 f86c 	bl	80077a0 <_read_r>
 80076c8:	2800      	cmp	r0, #0
 80076ca:	bfab      	itete	ge
 80076cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80076ce:	89a3      	ldrhlt	r3, [r4, #12]
 80076d0:	181b      	addge	r3, r3, r0
 80076d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80076d6:	bfac      	ite	ge
 80076d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80076da:	81a3      	strhlt	r3, [r4, #12]
 80076dc:	bd10      	pop	{r4, pc}

080076de <__swrite>:
 80076de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e2:	461f      	mov	r7, r3
 80076e4:	898b      	ldrh	r3, [r1, #12]
 80076e6:	05db      	lsls	r3, r3, #23
 80076e8:	4605      	mov	r5, r0
 80076ea:	460c      	mov	r4, r1
 80076ec:	4616      	mov	r6, r2
 80076ee:	d505      	bpl.n	80076fc <__swrite+0x1e>
 80076f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076f4:	2302      	movs	r3, #2
 80076f6:	2200      	movs	r2, #0
 80076f8:	f000 f840 	bl	800777c <_lseek_r>
 80076fc:	89a3      	ldrh	r3, [r4, #12]
 80076fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007702:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007706:	81a3      	strh	r3, [r4, #12]
 8007708:	4632      	mov	r2, r6
 800770a:	463b      	mov	r3, r7
 800770c:	4628      	mov	r0, r5
 800770e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007712:	f000 b867 	b.w	80077e4 <_write_r>

08007716 <__sseek>:
 8007716:	b510      	push	{r4, lr}
 8007718:	460c      	mov	r4, r1
 800771a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800771e:	f000 f82d 	bl	800777c <_lseek_r>
 8007722:	1c43      	adds	r3, r0, #1
 8007724:	89a3      	ldrh	r3, [r4, #12]
 8007726:	bf15      	itete	ne
 8007728:	6560      	strne	r0, [r4, #84]	@ 0x54
 800772a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800772e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007732:	81a3      	strheq	r3, [r4, #12]
 8007734:	bf18      	it	ne
 8007736:	81a3      	strhne	r3, [r4, #12]
 8007738:	bd10      	pop	{r4, pc}

0800773a <__sclose>:
 800773a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800773e:	f000 b80d 	b.w	800775c <_close_r>

08007742 <memset>:
 8007742:	4402      	add	r2, r0
 8007744:	4603      	mov	r3, r0
 8007746:	4293      	cmp	r3, r2
 8007748:	d100      	bne.n	800774c <memset+0xa>
 800774a:	4770      	bx	lr
 800774c:	f803 1b01 	strb.w	r1, [r3], #1
 8007750:	e7f9      	b.n	8007746 <memset+0x4>
	...

08007754 <_localeconv_r>:
 8007754:	4800      	ldr	r0, [pc, #0]	@ (8007758 <_localeconv_r+0x4>)
 8007756:	4770      	bx	lr
 8007758:	2000080c 	.word	0x2000080c

0800775c <_close_r>:
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	4d06      	ldr	r5, [pc, #24]	@ (8007778 <_close_r+0x1c>)
 8007760:	2300      	movs	r3, #0
 8007762:	4604      	mov	r4, r0
 8007764:	4608      	mov	r0, r1
 8007766:	602b      	str	r3, [r5, #0]
 8007768:	f001 ffd0 	bl	800970c <_close>
 800776c:	1c43      	adds	r3, r0, #1
 800776e:	d102      	bne.n	8007776 <_close_r+0x1a>
 8007770:	682b      	ldr	r3, [r5, #0]
 8007772:	b103      	cbz	r3, 8007776 <_close_r+0x1a>
 8007774:	6023      	str	r3, [r4, #0]
 8007776:	bd38      	pop	{r3, r4, r5, pc}
 8007778:	20000b54 	.word	0x20000b54

0800777c <_lseek_r>:
 800777c:	b538      	push	{r3, r4, r5, lr}
 800777e:	4d07      	ldr	r5, [pc, #28]	@ (800779c <_lseek_r+0x20>)
 8007780:	4604      	mov	r4, r0
 8007782:	4608      	mov	r0, r1
 8007784:	4611      	mov	r1, r2
 8007786:	2200      	movs	r2, #0
 8007788:	602a      	str	r2, [r5, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	f001 ffe6 	bl	800975c <_lseek>
 8007790:	1c43      	adds	r3, r0, #1
 8007792:	d102      	bne.n	800779a <_lseek_r+0x1e>
 8007794:	682b      	ldr	r3, [r5, #0]
 8007796:	b103      	cbz	r3, 800779a <_lseek_r+0x1e>
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	bd38      	pop	{r3, r4, r5, pc}
 800779c:	20000b54 	.word	0x20000b54

080077a0 <_read_r>:
 80077a0:	b538      	push	{r3, r4, r5, lr}
 80077a2:	4d07      	ldr	r5, [pc, #28]	@ (80077c0 <_read_r+0x20>)
 80077a4:	4604      	mov	r4, r0
 80077a6:	4608      	mov	r0, r1
 80077a8:	4611      	mov	r1, r2
 80077aa:	2200      	movs	r2, #0
 80077ac:	602a      	str	r2, [r5, #0]
 80077ae:	461a      	mov	r2, r3
 80077b0:	f001 ffdc 	bl	800976c <_read>
 80077b4:	1c43      	adds	r3, r0, #1
 80077b6:	d102      	bne.n	80077be <_read_r+0x1e>
 80077b8:	682b      	ldr	r3, [r5, #0]
 80077ba:	b103      	cbz	r3, 80077be <_read_r+0x1e>
 80077bc:	6023      	str	r3, [r4, #0]
 80077be:	bd38      	pop	{r3, r4, r5, pc}
 80077c0:	20000b54 	.word	0x20000b54

080077c4 <_sbrk_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	4d06      	ldr	r5, [pc, #24]	@ (80077e0 <_sbrk_r+0x1c>)
 80077c8:	2300      	movs	r3, #0
 80077ca:	4604      	mov	r4, r0
 80077cc:	4608      	mov	r0, r1
 80077ce:	602b      	str	r3, [r5, #0]
 80077d0:	f7f9 ff42 	bl	8001658 <_sbrk>
 80077d4:	1c43      	adds	r3, r0, #1
 80077d6:	d102      	bne.n	80077de <_sbrk_r+0x1a>
 80077d8:	682b      	ldr	r3, [r5, #0]
 80077da:	b103      	cbz	r3, 80077de <_sbrk_r+0x1a>
 80077dc:	6023      	str	r3, [r4, #0]
 80077de:	bd38      	pop	{r3, r4, r5, pc}
 80077e0:	20000b54 	.word	0x20000b54

080077e4 <_write_r>:
 80077e4:	b538      	push	{r3, r4, r5, lr}
 80077e6:	4d07      	ldr	r5, [pc, #28]	@ (8007804 <_write_r+0x20>)
 80077e8:	4604      	mov	r4, r0
 80077ea:	4608      	mov	r0, r1
 80077ec:	4611      	mov	r1, r2
 80077ee:	2200      	movs	r2, #0
 80077f0:	602a      	str	r2, [r5, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	f001 ffc2 	bl	800977c <_write>
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	d102      	bne.n	8007802 <_write_r+0x1e>
 80077fc:	682b      	ldr	r3, [r5, #0]
 80077fe:	b103      	cbz	r3, 8007802 <_write_r+0x1e>
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	bd38      	pop	{r3, r4, r5, pc}
 8007804:	20000b54 	.word	0x20000b54

08007808 <__errno>:
 8007808:	4b01      	ldr	r3, [pc, #4]	@ (8007810 <__errno+0x8>)
 800780a:	6818      	ldr	r0, [r3, #0]
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	200006cc 	.word	0x200006cc

08007814 <__libc_init_array>:
 8007814:	b570      	push	{r4, r5, r6, lr}
 8007816:	4d0d      	ldr	r5, [pc, #52]	@ (800784c <__libc_init_array+0x38>)
 8007818:	4c0d      	ldr	r4, [pc, #52]	@ (8007850 <__libc_init_array+0x3c>)
 800781a:	1b64      	subs	r4, r4, r5
 800781c:	10a4      	asrs	r4, r4, #2
 800781e:	2600      	movs	r6, #0
 8007820:	42a6      	cmp	r6, r4
 8007822:	d109      	bne.n	8007838 <__libc_init_array+0x24>
 8007824:	4d0b      	ldr	r5, [pc, #44]	@ (8007854 <__libc_init_array+0x40>)
 8007826:	4c0c      	ldr	r4, [pc, #48]	@ (8007858 <__libc_init_array+0x44>)
 8007828:	f001 ffb2 	bl	8009790 <_init>
 800782c:	1b64      	subs	r4, r4, r5
 800782e:	10a4      	asrs	r4, r4, #2
 8007830:	2600      	movs	r6, #0
 8007832:	42a6      	cmp	r6, r4
 8007834:	d105      	bne.n	8007842 <__libc_init_array+0x2e>
 8007836:	bd70      	pop	{r4, r5, r6, pc}
 8007838:	f855 3b04 	ldr.w	r3, [r5], #4
 800783c:	4798      	blx	r3
 800783e:	3601      	adds	r6, #1
 8007840:	e7ee      	b.n	8007820 <__libc_init_array+0xc>
 8007842:	f855 3b04 	ldr.w	r3, [r5], #4
 8007846:	4798      	blx	r3
 8007848:	3601      	adds	r6, #1
 800784a:	e7f2      	b.n	8007832 <__libc_init_array+0x1e>
 800784c:	0800a160 	.word	0x0800a160
 8007850:	0800a160 	.word	0x0800a160
 8007854:	0800a160 	.word	0x0800a160
 8007858:	0800a164 	.word	0x0800a164

0800785c <__retarget_lock_init_recursive>:
 800785c:	4770      	bx	lr

0800785e <__retarget_lock_acquire_recursive>:
 800785e:	4770      	bx	lr

08007860 <__retarget_lock_release_recursive>:
 8007860:	4770      	bx	lr

08007862 <memcpy>:
 8007862:	440a      	add	r2, r1
 8007864:	4291      	cmp	r1, r2
 8007866:	f100 33ff 	add.w	r3, r0, #4294967295
 800786a:	d100      	bne.n	800786e <memcpy+0xc>
 800786c:	4770      	bx	lr
 800786e:	b510      	push	{r4, lr}
 8007870:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007874:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007878:	4291      	cmp	r1, r2
 800787a:	d1f9      	bne.n	8007870 <memcpy+0xe>
 800787c:	bd10      	pop	{r4, pc}

0800787e <quorem>:
 800787e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007882:	6903      	ldr	r3, [r0, #16]
 8007884:	690c      	ldr	r4, [r1, #16]
 8007886:	42a3      	cmp	r3, r4
 8007888:	4607      	mov	r7, r0
 800788a:	db7e      	blt.n	800798a <quorem+0x10c>
 800788c:	3c01      	subs	r4, #1
 800788e:	f101 0814 	add.w	r8, r1, #20
 8007892:	00a3      	lsls	r3, r4, #2
 8007894:	f100 0514 	add.w	r5, r0, #20
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800789e:	9301      	str	r3, [sp, #4]
 80078a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078a8:	3301      	adds	r3, #1
 80078aa:	429a      	cmp	r2, r3
 80078ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80078b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80078b4:	d32e      	bcc.n	8007914 <quorem+0x96>
 80078b6:	f04f 0a00 	mov.w	sl, #0
 80078ba:	46c4      	mov	ip, r8
 80078bc:	46ae      	mov	lr, r5
 80078be:	46d3      	mov	fp, sl
 80078c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80078c4:	b298      	uxth	r0, r3
 80078c6:	fb06 a000 	mla	r0, r6, r0, sl
 80078ca:	0c02      	lsrs	r2, r0, #16
 80078cc:	0c1b      	lsrs	r3, r3, #16
 80078ce:	fb06 2303 	mla	r3, r6, r3, r2
 80078d2:	f8de 2000 	ldr.w	r2, [lr]
 80078d6:	b280      	uxth	r0, r0
 80078d8:	b292      	uxth	r2, r2
 80078da:	1a12      	subs	r2, r2, r0
 80078dc:	445a      	add	r2, fp
 80078de:	f8de 0000 	ldr.w	r0, [lr]
 80078e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80078ec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80078f0:	b292      	uxth	r2, r2
 80078f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80078f6:	45e1      	cmp	r9, ip
 80078f8:	f84e 2b04 	str.w	r2, [lr], #4
 80078fc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007900:	d2de      	bcs.n	80078c0 <quorem+0x42>
 8007902:	9b00      	ldr	r3, [sp, #0]
 8007904:	58eb      	ldr	r3, [r5, r3]
 8007906:	b92b      	cbnz	r3, 8007914 <quorem+0x96>
 8007908:	9b01      	ldr	r3, [sp, #4]
 800790a:	3b04      	subs	r3, #4
 800790c:	429d      	cmp	r5, r3
 800790e:	461a      	mov	r2, r3
 8007910:	d32f      	bcc.n	8007972 <quorem+0xf4>
 8007912:	613c      	str	r4, [r7, #16]
 8007914:	4638      	mov	r0, r7
 8007916:	f001 f8c3 	bl	8008aa0 <__mcmp>
 800791a:	2800      	cmp	r0, #0
 800791c:	db25      	blt.n	800796a <quorem+0xec>
 800791e:	4629      	mov	r1, r5
 8007920:	2000      	movs	r0, #0
 8007922:	f858 2b04 	ldr.w	r2, [r8], #4
 8007926:	f8d1 c000 	ldr.w	ip, [r1]
 800792a:	fa1f fe82 	uxth.w	lr, r2
 800792e:	fa1f f38c 	uxth.w	r3, ip
 8007932:	eba3 030e 	sub.w	r3, r3, lr
 8007936:	4403      	add	r3, r0
 8007938:	0c12      	lsrs	r2, r2, #16
 800793a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800793e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007942:	b29b      	uxth	r3, r3
 8007944:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007948:	45c1      	cmp	r9, r8
 800794a:	f841 3b04 	str.w	r3, [r1], #4
 800794e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007952:	d2e6      	bcs.n	8007922 <quorem+0xa4>
 8007954:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007958:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800795c:	b922      	cbnz	r2, 8007968 <quorem+0xea>
 800795e:	3b04      	subs	r3, #4
 8007960:	429d      	cmp	r5, r3
 8007962:	461a      	mov	r2, r3
 8007964:	d30b      	bcc.n	800797e <quorem+0x100>
 8007966:	613c      	str	r4, [r7, #16]
 8007968:	3601      	adds	r6, #1
 800796a:	4630      	mov	r0, r6
 800796c:	b003      	add	sp, #12
 800796e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007972:	6812      	ldr	r2, [r2, #0]
 8007974:	3b04      	subs	r3, #4
 8007976:	2a00      	cmp	r2, #0
 8007978:	d1cb      	bne.n	8007912 <quorem+0x94>
 800797a:	3c01      	subs	r4, #1
 800797c:	e7c6      	b.n	800790c <quorem+0x8e>
 800797e:	6812      	ldr	r2, [r2, #0]
 8007980:	3b04      	subs	r3, #4
 8007982:	2a00      	cmp	r2, #0
 8007984:	d1ef      	bne.n	8007966 <quorem+0xe8>
 8007986:	3c01      	subs	r4, #1
 8007988:	e7ea      	b.n	8007960 <quorem+0xe2>
 800798a:	2000      	movs	r0, #0
 800798c:	e7ee      	b.n	800796c <quorem+0xee>
	...

08007990 <_dtoa_r>:
 8007990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007994:	69c7      	ldr	r7, [r0, #28]
 8007996:	b099      	sub	sp, #100	@ 0x64
 8007998:	ed8d 0b02 	vstr	d0, [sp, #8]
 800799c:	ec55 4b10 	vmov	r4, r5, d0
 80079a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80079a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80079a4:	4683      	mov	fp, r0
 80079a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80079a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80079aa:	b97f      	cbnz	r7, 80079cc <_dtoa_r+0x3c>
 80079ac:	2010      	movs	r0, #16
 80079ae:	f7ff f853 	bl	8006a58 <malloc>
 80079b2:	4602      	mov	r2, r0
 80079b4:	f8cb 001c 	str.w	r0, [fp, #28]
 80079b8:	b920      	cbnz	r0, 80079c4 <_dtoa_r+0x34>
 80079ba:	4ba7      	ldr	r3, [pc, #668]	@ (8007c58 <_dtoa_r+0x2c8>)
 80079bc:	21ef      	movs	r1, #239	@ 0xef
 80079be:	48a7      	ldr	r0, [pc, #668]	@ (8007c5c <_dtoa_r+0x2cc>)
 80079c0:	f001 fb9c 	bl	80090fc <__assert_func>
 80079c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80079c8:	6007      	str	r7, [r0, #0]
 80079ca:	60c7      	str	r7, [r0, #12]
 80079cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80079d0:	6819      	ldr	r1, [r3, #0]
 80079d2:	b159      	cbz	r1, 80079ec <_dtoa_r+0x5c>
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	604a      	str	r2, [r1, #4]
 80079d8:	2301      	movs	r3, #1
 80079da:	4093      	lsls	r3, r2
 80079dc:	608b      	str	r3, [r1, #8]
 80079de:	4658      	mov	r0, fp
 80079e0:	f000 fe24 	bl	800862c <_Bfree>
 80079e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80079e8:	2200      	movs	r2, #0
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	1e2b      	subs	r3, r5, #0
 80079ee:	bfb9      	ittee	lt
 80079f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80079f4:	9303      	strlt	r3, [sp, #12]
 80079f6:	2300      	movge	r3, #0
 80079f8:	6033      	strge	r3, [r6, #0]
 80079fa:	9f03      	ldr	r7, [sp, #12]
 80079fc:	4b98      	ldr	r3, [pc, #608]	@ (8007c60 <_dtoa_r+0x2d0>)
 80079fe:	bfbc      	itt	lt
 8007a00:	2201      	movlt	r2, #1
 8007a02:	6032      	strlt	r2, [r6, #0]
 8007a04:	43bb      	bics	r3, r7
 8007a06:	d112      	bne.n	8007a2e <_dtoa_r+0x9e>
 8007a08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007a0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007a0e:	6013      	str	r3, [r2, #0]
 8007a10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a14:	4323      	orrs	r3, r4
 8007a16:	f000 854d 	beq.w	80084b4 <_dtoa_r+0xb24>
 8007a1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007c74 <_dtoa_r+0x2e4>
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 854f 	beq.w	80084c4 <_dtoa_r+0xb34>
 8007a26:	f10a 0303 	add.w	r3, sl, #3
 8007a2a:	f000 bd49 	b.w	80084c0 <_dtoa_r+0xb30>
 8007a2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a32:	2200      	movs	r2, #0
 8007a34:	ec51 0b17 	vmov	r0, r1, d7
 8007a38:	2300      	movs	r3, #0
 8007a3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007a3e:	f7f9 f843 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a42:	4680      	mov	r8, r0
 8007a44:	b158      	cbz	r0, 8007a5e <_dtoa_r+0xce>
 8007a46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007a48:	2301      	movs	r3, #1
 8007a4a:	6013      	str	r3, [r2, #0]
 8007a4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a4e:	b113      	cbz	r3, 8007a56 <_dtoa_r+0xc6>
 8007a50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007a52:	4b84      	ldr	r3, [pc, #528]	@ (8007c64 <_dtoa_r+0x2d4>)
 8007a54:	6013      	str	r3, [r2, #0]
 8007a56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007c78 <_dtoa_r+0x2e8>
 8007a5a:	f000 bd33 	b.w	80084c4 <_dtoa_r+0xb34>
 8007a5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007a62:	aa16      	add	r2, sp, #88	@ 0x58
 8007a64:	a917      	add	r1, sp, #92	@ 0x5c
 8007a66:	4658      	mov	r0, fp
 8007a68:	f001 f8ca 	bl	8008c00 <__d2b>
 8007a6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007a70:	4681      	mov	r9, r0
 8007a72:	2e00      	cmp	r6, #0
 8007a74:	d077      	beq.n	8007b66 <_dtoa_r+0x1d6>
 8007a76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007a7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007a88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007a8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007a90:	4619      	mov	r1, r3
 8007a92:	2200      	movs	r2, #0
 8007a94:	4b74      	ldr	r3, [pc, #464]	@ (8007c68 <_dtoa_r+0x2d8>)
 8007a96:	f7f8 fbf7 	bl	8000288 <__aeabi_dsub>
 8007a9a:	a369      	add	r3, pc, #420	@ (adr r3, 8007c40 <_dtoa_r+0x2b0>)
 8007a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa0:	f7f8 fdaa 	bl	80005f8 <__aeabi_dmul>
 8007aa4:	a368      	add	r3, pc, #416	@ (adr r3, 8007c48 <_dtoa_r+0x2b8>)
 8007aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aaa:	f7f8 fbef 	bl	800028c <__adddf3>
 8007aae:	4604      	mov	r4, r0
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	460d      	mov	r5, r1
 8007ab4:	f7f8 fd36 	bl	8000524 <__aeabi_i2d>
 8007ab8:	a365      	add	r3, pc, #404	@ (adr r3, 8007c50 <_dtoa_r+0x2c0>)
 8007aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abe:	f7f8 fd9b 	bl	80005f8 <__aeabi_dmul>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	4629      	mov	r1, r5
 8007aca:	f7f8 fbdf 	bl	800028c <__adddf3>
 8007ace:	4604      	mov	r4, r0
 8007ad0:	460d      	mov	r5, r1
 8007ad2:	f7f9 f841 	bl	8000b58 <__aeabi_d2iz>
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	4607      	mov	r7, r0
 8007ada:	2300      	movs	r3, #0
 8007adc:	4620      	mov	r0, r4
 8007ade:	4629      	mov	r1, r5
 8007ae0:	f7f8 fffc 	bl	8000adc <__aeabi_dcmplt>
 8007ae4:	b140      	cbz	r0, 8007af8 <_dtoa_r+0x168>
 8007ae6:	4638      	mov	r0, r7
 8007ae8:	f7f8 fd1c 	bl	8000524 <__aeabi_i2d>
 8007aec:	4622      	mov	r2, r4
 8007aee:	462b      	mov	r3, r5
 8007af0:	f7f8 ffea 	bl	8000ac8 <__aeabi_dcmpeq>
 8007af4:	b900      	cbnz	r0, 8007af8 <_dtoa_r+0x168>
 8007af6:	3f01      	subs	r7, #1
 8007af8:	2f16      	cmp	r7, #22
 8007afa:	d851      	bhi.n	8007ba0 <_dtoa_r+0x210>
 8007afc:	4b5b      	ldr	r3, [pc, #364]	@ (8007c6c <_dtoa_r+0x2dc>)
 8007afe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b0a:	f7f8 ffe7 	bl	8000adc <__aeabi_dcmplt>
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	d048      	beq.n	8007ba4 <_dtoa_r+0x214>
 8007b12:	3f01      	subs	r7, #1
 8007b14:	2300      	movs	r3, #0
 8007b16:	9312      	str	r3, [sp, #72]	@ 0x48
 8007b18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007b1a:	1b9b      	subs	r3, r3, r6
 8007b1c:	1e5a      	subs	r2, r3, #1
 8007b1e:	bf44      	itt	mi
 8007b20:	f1c3 0801 	rsbmi	r8, r3, #1
 8007b24:	2300      	movmi	r3, #0
 8007b26:	9208      	str	r2, [sp, #32]
 8007b28:	bf54      	ite	pl
 8007b2a:	f04f 0800 	movpl.w	r8, #0
 8007b2e:	9308      	strmi	r3, [sp, #32]
 8007b30:	2f00      	cmp	r7, #0
 8007b32:	db39      	blt.n	8007ba8 <_dtoa_r+0x218>
 8007b34:	9b08      	ldr	r3, [sp, #32]
 8007b36:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007b38:	443b      	add	r3, r7
 8007b3a:	9308      	str	r3, [sp, #32]
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b42:	2b09      	cmp	r3, #9
 8007b44:	d864      	bhi.n	8007c10 <_dtoa_r+0x280>
 8007b46:	2b05      	cmp	r3, #5
 8007b48:	bfc4      	itt	gt
 8007b4a:	3b04      	subgt	r3, #4
 8007b4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b50:	f1a3 0302 	sub.w	r3, r3, #2
 8007b54:	bfcc      	ite	gt
 8007b56:	2400      	movgt	r4, #0
 8007b58:	2401      	movle	r4, #1
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	d863      	bhi.n	8007c26 <_dtoa_r+0x296>
 8007b5e:	e8df f003 	tbb	[pc, r3]
 8007b62:	372a      	.short	0x372a
 8007b64:	5535      	.short	0x5535
 8007b66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007b6a:	441e      	add	r6, r3
 8007b6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007b70:	2b20      	cmp	r3, #32
 8007b72:	bfc1      	itttt	gt
 8007b74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007b78:	409f      	lslgt	r7, r3
 8007b7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007b7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007b82:	bfd6      	itet	le
 8007b84:	f1c3 0320 	rsble	r3, r3, #32
 8007b88:	ea47 0003 	orrgt.w	r0, r7, r3
 8007b8c:	fa04 f003 	lslle.w	r0, r4, r3
 8007b90:	f7f8 fcb8 	bl	8000504 <__aeabi_ui2d>
 8007b94:	2201      	movs	r2, #1
 8007b96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007b9a:	3e01      	subs	r6, #1
 8007b9c:	9214      	str	r2, [sp, #80]	@ 0x50
 8007b9e:	e777      	b.n	8007a90 <_dtoa_r+0x100>
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e7b8      	b.n	8007b16 <_dtoa_r+0x186>
 8007ba4:	9012      	str	r0, [sp, #72]	@ 0x48
 8007ba6:	e7b7      	b.n	8007b18 <_dtoa_r+0x188>
 8007ba8:	427b      	negs	r3, r7
 8007baa:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bac:	2300      	movs	r3, #0
 8007bae:	eba8 0807 	sub.w	r8, r8, r7
 8007bb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007bb4:	e7c4      	b.n	8007b40 <_dtoa_r+0x1b0>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	dc35      	bgt.n	8007c2c <_dtoa_r+0x29c>
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	9300      	str	r3, [sp, #0]
 8007bc4:	9307      	str	r3, [sp, #28]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007bca:	e00b      	b.n	8007be4 <_dtoa_r+0x254>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e7f3      	b.n	8007bb8 <_dtoa_r+0x228>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bd6:	18fb      	adds	r3, r7, r3
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	9307      	str	r3, [sp, #28]
 8007be0:	bfb8      	it	lt
 8007be2:	2301      	movlt	r3, #1
 8007be4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007be8:	2100      	movs	r1, #0
 8007bea:	2204      	movs	r2, #4
 8007bec:	f102 0514 	add.w	r5, r2, #20
 8007bf0:	429d      	cmp	r5, r3
 8007bf2:	d91f      	bls.n	8007c34 <_dtoa_r+0x2a4>
 8007bf4:	6041      	str	r1, [r0, #4]
 8007bf6:	4658      	mov	r0, fp
 8007bf8:	f000 fcd8 	bl	80085ac <_Balloc>
 8007bfc:	4682      	mov	sl, r0
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	d13c      	bne.n	8007c7c <_dtoa_r+0x2ec>
 8007c02:	4b1b      	ldr	r3, [pc, #108]	@ (8007c70 <_dtoa_r+0x2e0>)
 8007c04:	4602      	mov	r2, r0
 8007c06:	f240 11af 	movw	r1, #431	@ 0x1af
 8007c0a:	e6d8      	b.n	80079be <_dtoa_r+0x2e>
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e7e0      	b.n	8007bd2 <_dtoa_r+0x242>
 8007c10:	2401      	movs	r4, #1
 8007c12:	2300      	movs	r3, #0
 8007c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c16:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007c18:	f04f 33ff 	mov.w	r3, #4294967295
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	9307      	str	r3, [sp, #28]
 8007c20:	2200      	movs	r2, #0
 8007c22:	2312      	movs	r3, #18
 8007c24:	e7d0      	b.n	8007bc8 <_dtoa_r+0x238>
 8007c26:	2301      	movs	r3, #1
 8007c28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c2a:	e7f5      	b.n	8007c18 <_dtoa_r+0x288>
 8007c2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	9307      	str	r3, [sp, #28]
 8007c32:	e7d7      	b.n	8007be4 <_dtoa_r+0x254>
 8007c34:	3101      	adds	r1, #1
 8007c36:	0052      	lsls	r2, r2, #1
 8007c38:	e7d8      	b.n	8007bec <_dtoa_r+0x25c>
 8007c3a:	bf00      	nop
 8007c3c:	f3af 8000 	nop.w
 8007c40:	636f4361 	.word	0x636f4361
 8007c44:	3fd287a7 	.word	0x3fd287a7
 8007c48:	8b60c8b3 	.word	0x8b60c8b3
 8007c4c:	3fc68a28 	.word	0x3fc68a28
 8007c50:	509f79fb 	.word	0x509f79fb
 8007c54:	3fd34413 	.word	0x3fd34413
 8007c58:	08009e29 	.word	0x08009e29
 8007c5c:	08009e40 	.word	0x08009e40
 8007c60:	7ff00000 	.word	0x7ff00000
 8007c64:	08009df9 	.word	0x08009df9
 8007c68:	3ff80000 	.word	0x3ff80000
 8007c6c:	08009f38 	.word	0x08009f38
 8007c70:	08009e98 	.word	0x08009e98
 8007c74:	08009e25 	.word	0x08009e25
 8007c78:	08009df8 	.word	0x08009df8
 8007c7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c80:	6018      	str	r0, [r3, #0]
 8007c82:	9b07      	ldr	r3, [sp, #28]
 8007c84:	2b0e      	cmp	r3, #14
 8007c86:	f200 80a4 	bhi.w	8007dd2 <_dtoa_r+0x442>
 8007c8a:	2c00      	cmp	r4, #0
 8007c8c:	f000 80a1 	beq.w	8007dd2 <_dtoa_r+0x442>
 8007c90:	2f00      	cmp	r7, #0
 8007c92:	dd33      	ble.n	8007cfc <_dtoa_r+0x36c>
 8007c94:	4bad      	ldr	r3, [pc, #692]	@ (8007f4c <_dtoa_r+0x5bc>)
 8007c96:	f007 020f 	and.w	r2, r7, #15
 8007c9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c9e:	ed93 7b00 	vldr	d7, [r3]
 8007ca2:	05f8      	lsls	r0, r7, #23
 8007ca4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007ca8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007cac:	d516      	bpl.n	8007cdc <_dtoa_r+0x34c>
 8007cae:	4ba8      	ldr	r3, [pc, #672]	@ (8007f50 <_dtoa_r+0x5c0>)
 8007cb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007cb8:	f7f8 fdc8 	bl	800084c <__aeabi_ddiv>
 8007cbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cc0:	f004 040f 	and.w	r4, r4, #15
 8007cc4:	2603      	movs	r6, #3
 8007cc6:	4da2      	ldr	r5, [pc, #648]	@ (8007f50 <_dtoa_r+0x5c0>)
 8007cc8:	b954      	cbnz	r4, 8007ce0 <_dtoa_r+0x350>
 8007cca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cd2:	f7f8 fdbb 	bl	800084c <__aeabi_ddiv>
 8007cd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cda:	e028      	b.n	8007d2e <_dtoa_r+0x39e>
 8007cdc:	2602      	movs	r6, #2
 8007cde:	e7f2      	b.n	8007cc6 <_dtoa_r+0x336>
 8007ce0:	07e1      	lsls	r1, r4, #31
 8007ce2:	d508      	bpl.n	8007cf6 <_dtoa_r+0x366>
 8007ce4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ce8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007cec:	f7f8 fc84 	bl	80005f8 <__aeabi_dmul>
 8007cf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cf4:	3601      	adds	r6, #1
 8007cf6:	1064      	asrs	r4, r4, #1
 8007cf8:	3508      	adds	r5, #8
 8007cfa:	e7e5      	b.n	8007cc8 <_dtoa_r+0x338>
 8007cfc:	f000 80d2 	beq.w	8007ea4 <_dtoa_r+0x514>
 8007d00:	427c      	negs	r4, r7
 8007d02:	4b92      	ldr	r3, [pc, #584]	@ (8007f4c <_dtoa_r+0x5bc>)
 8007d04:	4d92      	ldr	r5, [pc, #584]	@ (8007f50 <_dtoa_r+0x5c0>)
 8007d06:	f004 020f 	and.w	r2, r4, #15
 8007d0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d16:	f7f8 fc6f 	bl	80005f8 <__aeabi_dmul>
 8007d1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d1e:	1124      	asrs	r4, r4, #4
 8007d20:	2300      	movs	r3, #0
 8007d22:	2602      	movs	r6, #2
 8007d24:	2c00      	cmp	r4, #0
 8007d26:	f040 80b2 	bne.w	8007e8e <_dtoa_r+0x4fe>
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1d3      	bne.n	8007cd6 <_dtoa_r+0x346>
 8007d2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007d30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f000 80b7 	beq.w	8007ea8 <_dtoa_r+0x518>
 8007d3a:	4b86      	ldr	r3, [pc, #536]	@ (8007f54 <_dtoa_r+0x5c4>)
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	4620      	mov	r0, r4
 8007d40:	4629      	mov	r1, r5
 8007d42:	f7f8 fecb 	bl	8000adc <__aeabi_dcmplt>
 8007d46:	2800      	cmp	r0, #0
 8007d48:	f000 80ae 	beq.w	8007ea8 <_dtoa_r+0x518>
 8007d4c:	9b07      	ldr	r3, [sp, #28]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 80aa 	beq.w	8007ea8 <_dtoa_r+0x518>
 8007d54:	9b00      	ldr	r3, [sp, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	dd37      	ble.n	8007dca <_dtoa_r+0x43a>
 8007d5a:	1e7b      	subs	r3, r7, #1
 8007d5c:	9304      	str	r3, [sp, #16]
 8007d5e:	4620      	mov	r0, r4
 8007d60:	4b7d      	ldr	r3, [pc, #500]	@ (8007f58 <_dtoa_r+0x5c8>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	4629      	mov	r1, r5
 8007d66:	f7f8 fc47 	bl	80005f8 <__aeabi_dmul>
 8007d6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d6e:	9c00      	ldr	r4, [sp, #0]
 8007d70:	3601      	adds	r6, #1
 8007d72:	4630      	mov	r0, r6
 8007d74:	f7f8 fbd6 	bl	8000524 <__aeabi_i2d>
 8007d78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d7c:	f7f8 fc3c 	bl	80005f8 <__aeabi_dmul>
 8007d80:	4b76      	ldr	r3, [pc, #472]	@ (8007f5c <_dtoa_r+0x5cc>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	f7f8 fa82 	bl	800028c <__adddf3>
 8007d88:	4605      	mov	r5, r0
 8007d8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007d8e:	2c00      	cmp	r4, #0
 8007d90:	f040 808d 	bne.w	8007eae <_dtoa_r+0x51e>
 8007d94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d98:	4b71      	ldr	r3, [pc, #452]	@ (8007f60 <_dtoa_r+0x5d0>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f7f8 fa74 	bl	8000288 <__aeabi_dsub>
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007da8:	462a      	mov	r2, r5
 8007daa:	4633      	mov	r3, r6
 8007dac:	f7f8 feb4 	bl	8000b18 <__aeabi_dcmpgt>
 8007db0:	2800      	cmp	r0, #0
 8007db2:	f040 828b 	bne.w	80082cc <_dtoa_r+0x93c>
 8007db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dba:	462a      	mov	r2, r5
 8007dbc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007dc0:	f7f8 fe8c 	bl	8000adc <__aeabi_dcmplt>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	f040 8128 	bne.w	800801a <_dtoa_r+0x68a>
 8007dca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007dce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007dd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f2c0 815a 	blt.w	800808e <_dtoa_r+0x6fe>
 8007dda:	2f0e      	cmp	r7, #14
 8007ddc:	f300 8157 	bgt.w	800808e <_dtoa_r+0x6fe>
 8007de0:	4b5a      	ldr	r3, [pc, #360]	@ (8007f4c <_dtoa_r+0x5bc>)
 8007de2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007de6:	ed93 7b00 	vldr	d7, [r3]
 8007dea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	ed8d 7b00 	vstr	d7, [sp]
 8007df2:	da03      	bge.n	8007dfc <_dtoa_r+0x46c>
 8007df4:	9b07      	ldr	r3, [sp, #28]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f340 8101 	ble.w	8007ffe <_dtoa_r+0x66e>
 8007dfc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e00:	4656      	mov	r6, sl
 8007e02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e06:	4620      	mov	r0, r4
 8007e08:	4629      	mov	r1, r5
 8007e0a:	f7f8 fd1f 	bl	800084c <__aeabi_ddiv>
 8007e0e:	f7f8 fea3 	bl	8000b58 <__aeabi_d2iz>
 8007e12:	4680      	mov	r8, r0
 8007e14:	f7f8 fb86 	bl	8000524 <__aeabi_i2d>
 8007e18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e1c:	f7f8 fbec 	bl	80005f8 <__aeabi_dmul>
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	4620      	mov	r0, r4
 8007e26:	4629      	mov	r1, r5
 8007e28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007e2c:	f7f8 fa2c 	bl	8000288 <__aeabi_dsub>
 8007e30:	f806 4b01 	strb.w	r4, [r6], #1
 8007e34:	9d07      	ldr	r5, [sp, #28]
 8007e36:	eba6 040a 	sub.w	r4, r6, sl
 8007e3a:	42a5      	cmp	r5, r4
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	f040 8117 	bne.w	8008072 <_dtoa_r+0x6e2>
 8007e44:	f7f8 fa22 	bl	800028c <__adddf3>
 8007e48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	460d      	mov	r5, r1
 8007e50:	f7f8 fe62 	bl	8000b18 <__aeabi_dcmpgt>
 8007e54:	2800      	cmp	r0, #0
 8007e56:	f040 80f9 	bne.w	800804c <_dtoa_r+0x6bc>
 8007e5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e5e:	4620      	mov	r0, r4
 8007e60:	4629      	mov	r1, r5
 8007e62:	f7f8 fe31 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e66:	b118      	cbz	r0, 8007e70 <_dtoa_r+0x4e0>
 8007e68:	f018 0f01 	tst.w	r8, #1
 8007e6c:	f040 80ee 	bne.w	800804c <_dtoa_r+0x6bc>
 8007e70:	4649      	mov	r1, r9
 8007e72:	4658      	mov	r0, fp
 8007e74:	f000 fbda 	bl	800862c <_Bfree>
 8007e78:	2300      	movs	r3, #0
 8007e7a:	7033      	strb	r3, [r6, #0]
 8007e7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007e7e:	3701      	adds	r7, #1
 8007e80:	601f      	str	r7, [r3, #0]
 8007e82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 831d 	beq.w	80084c4 <_dtoa_r+0xb34>
 8007e8a:	601e      	str	r6, [r3, #0]
 8007e8c:	e31a      	b.n	80084c4 <_dtoa_r+0xb34>
 8007e8e:	07e2      	lsls	r2, r4, #31
 8007e90:	d505      	bpl.n	8007e9e <_dtoa_r+0x50e>
 8007e92:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e96:	f7f8 fbaf 	bl	80005f8 <__aeabi_dmul>
 8007e9a:	3601      	adds	r6, #1
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	1064      	asrs	r4, r4, #1
 8007ea0:	3508      	adds	r5, #8
 8007ea2:	e73f      	b.n	8007d24 <_dtoa_r+0x394>
 8007ea4:	2602      	movs	r6, #2
 8007ea6:	e742      	b.n	8007d2e <_dtoa_r+0x39e>
 8007ea8:	9c07      	ldr	r4, [sp, #28]
 8007eaa:	9704      	str	r7, [sp, #16]
 8007eac:	e761      	b.n	8007d72 <_dtoa_r+0x3e2>
 8007eae:	4b27      	ldr	r3, [pc, #156]	@ (8007f4c <_dtoa_r+0x5bc>)
 8007eb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007eb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007eb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007eba:	4454      	add	r4, sl
 8007ebc:	2900      	cmp	r1, #0
 8007ebe:	d053      	beq.n	8007f68 <_dtoa_r+0x5d8>
 8007ec0:	4928      	ldr	r1, [pc, #160]	@ (8007f64 <_dtoa_r+0x5d4>)
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	f7f8 fcc2 	bl	800084c <__aeabi_ddiv>
 8007ec8:	4633      	mov	r3, r6
 8007eca:	462a      	mov	r2, r5
 8007ecc:	f7f8 f9dc 	bl	8000288 <__aeabi_dsub>
 8007ed0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ed4:	4656      	mov	r6, sl
 8007ed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eda:	f7f8 fe3d 	bl	8000b58 <__aeabi_d2iz>
 8007ede:	4605      	mov	r5, r0
 8007ee0:	f7f8 fb20 	bl	8000524 <__aeabi_i2d>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eec:	f7f8 f9cc 	bl	8000288 <__aeabi_dsub>
 8007ef0:	3530      	adds	r5, #48	@ 0x30
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007efa:	f806 5b01 	strb.w	r5, [r6], #1
 8007efe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f02:	f7f8 fdeb 	bl	8000adc <__aeabi_dcmplt>
 8007f06:	2800      	cmp	r0, #0
 8007f08:	d171      	bne.n	8007fee <_dtoa_r+0x65e>
 8007f0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f0e:	4911      	ldr	r1, [pc, #68]	@ (8007f54 <_dtoa_r+0x5c4>)
 8007f10:	2000      	movs	r0, #0
 8007f12:	f7f8 f9b9 	bl	8000288 <__aeabi_dsub>
 8007f16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f1a:	f7f8 fddf 	bl	8000adc <__aeabi_dcmplt>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	f040 8095 	bne.w	800804e <_dtoa_r+0x6be>
 8007f24:	42a6      	cmp	r6, r4
 8007f26:	f43f af50 	beq.w	8007dca <_dtoa_r+0x43a>
 8007f2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8007f58 <_dtoa_r+0x5c8>)
 8007f30:	2200      	movs	r2, #0
 8007f32:	f7f8 fb61 	bl	80005f8 <__aeabi_dmul>
 8007f36:	4b08      	ldr	r3, [pc, #32]	@ (8007f58 <_dtoa_r+0x5c8>)
 8007f38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f42:	f7f8 fb59 	bl	80005f8 <__aeabi_dmul>
 8007f46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f4a:	e7c4      	b.n	8007ed6 <_dtoa_r+0x546>
 8007f4c:	08009f38 	.word	0x08009f38
 8007f50:	08009f10 	.word	0x08009f10
 8007f54:	3ff00000 	.word	0x3ff00000
 8007f58:	40240000 	.word	0x40240000
 8007f5c:	401c0000 	.word	0x401c0000
 8007f60:	40140000 	.word	0x40140000
 8007f64:	3fe00000 	.word	0x3fe00000
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	f7f8 fb44 	bl	80005f8 <__aeabi_dmul>
 8007f70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f74:	9415      	str	r4, [sp, #84]	@ 0x54
 8007f76:	4656      	mov	r6, sl
 8007f78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f7c:	f7f8 fdec 	bl	8000b58 <__aeabi_d2iz>
 8007f80:	4605      	mov	r5, r0
 8007f82:	f7f8 facf 	bl	8000524 <__aeabi_i2d>
 8007f86:	4602      	mov	r2, r0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f8e:	f7f8 f97b 	bl	8000288 <__aeabi_dsub>
 8007f92:	3530      	adds	r5, #48	@ 0x30
 8007f94:	f806 5b01 	strb.w	r5, [r6], #1
 8007f98:	4602      	mov	r2, r0
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	42a6      	cmp	r6, r4
 8007f9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fa2:	f04f 0200 	mov.w	r2, #0
 8007fa6:	d124      	bne.n	8007ff2 <_dtoa_r+0x662>
 8007fa8:	4bac      	ldr	r3, [pc, #688]	@ (800825c <_dtoa_r+0x8cc>)
 8007faa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007fae:	f7f8 f96d 	bl	800028c <__adddf3>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fba:	f7f8 fdad 	bl	8000b18 <__aeabi_dcmpgt>
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	d145      	bne.n	800804e <_dtoa_r+0x6be>
 8007fc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007fc6:	49a5      	ldr	r1, [pc, #660]	@ (800825c <_dtoa_r+0x8cc>)
 8007fc8:	2000      	movs	r0, #0
 8007fca:	f7f8 f95d 	bl	8000288 <__aeabi_dsub>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fd6:	f7f8 fd81 	bl	8000adc <__aeabi_dcmplt>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	f43f aef5 	beq.w	8007dca <_dtoa_r+0x43a>
 8007fe0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007fe2:	1e73      	subs	r3, r6, #1
 8007fe4:	9315      	str	r3, [sp, #84]	@ 0x54
 8007fe6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007fea:	2b30      	cmp	r3, #48	@ 0x30
 8007fec:	d0f8      	beq.n	8007fe0 <_dtoa_r+0x650>
 8007fee:	9f04      	ldr	r7, [sp, #16]
 8007ff0:	e73e      	b.n	8007e70 <_dtoa_r+0x4e0>
 8007ff2:	4b9b      	ldr	r3, [pc, #620]	@ (8008260 <_dtoa_r+0x8d0>)
 8007ff4:	f7f8 fb00 	bl	80005f8 <__aeabi_dmul>
 8007ff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ffc:	e7bc      	b.n	8007f78 <_dtoa_r+0x5e8>
 8007ffe:	d10c      	bne.n	800801a <_dtoa_r+0x68a>
 8008000:	4b98      	ldr	r3, [pc, #608]	@ (8008264 <_dtoa_r+0x8d4>)
 8008002:	2200      	movs	r2, #0
 8008004:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008008:	f7f8 faf6 	bl	80005f8 <__aeabi_dmul>
 800800c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008010:	f7f8 fd78 	bl	8000b04 <__aeabi_dcmpge>
 8008014:	2800      	cmp	r0, #0
 8008016:	f000 8157 	beq.w	80082c8 <_dtoa_r+0x938>
 800801a:	2400      	movs	r4, #0
 800801c:	4625      	mov	r5, r4
 800801e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008020:	43db      	mvns	r3, r3
 8008022:	9304      	str	r3, [sp, #16]
 8008024:	4656      	mov	r6, sl
 8008026:	2700      	movs	r7, #0
 8008028:	4621      	mov	r1, r4
 800802a:	4658      	mov	r0, fp
 800802c:	f000 fafe 	bl	800862c <_Bfree>
 8008030:	2d00      	cmp	r5, #0
 8008032:	d0dc      	beq.n	8007fee <_dtoa_r+0x65e>
 8008034:	b12f      	cbz	r7, 8008042 <_dtoa_r+0x6b2>
 8008036:	42af      	cmp	r7, r5
 8008038:	d003      	beq.n	8008042 <_dtoa_r+0x6b2>
 800803a:	4639      	mov	r1, r7
 800803c:	4658      	mov	r0, fp
 800803e:	f000 faf5 	bl	800862c <_Bfree>
 8008042:	4629      	mov	r1, r5
 8008044:	4658      	mov	r0, fp
 8008046:	f000 faf1 	bl	800862c <_Bfree>
 800804a:	e7d0      	b.n	8007fee <_dtoa_r+0x65e>
 800804c:	9704      	str	r7, [sp, #16]
 800804e:	4633      	mov	r3, r6
 8008050:	461e      	mov	r6, r3
 8008052:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008056:	2a39      	cmp	r2, #57	@ 0x39
 8008058:	d107      	bne.n	800806a <_dtoa_r+0x6da>
 800805a:	459a      	cmp	sl, r3
 800805c:	d1f8      	bne.n	8008050 <_dtoa_r+0x6c0>
 800805e:	9a04      	ldr	r2, [sp, #16]
 8008060:	3201      	adds	r2, #1
 8008062:	9204      	str	r2, [sp, #16]
 8008064:	2230      	movs	r2, #48	@ 0x30
 8008066:	f88a 2000 	strb.w	r2, [sl]
 800806a:	781a      	ldrb	r2, [r3, #0]
 800806c:	3201      	adds	r2, #1
 800806e:	701a      	strb	r2, [r3, #0]
 8008070:	e7bd      	b.n	8007fee <_dtoa_r+0x65e>
 8008072:	4b7b      	ldr	r3, [pc, #492]	@ (8008260 <_dtoa_r+0x8d0>)
 8008074:	2200      	movs	r2, #0
 8008076:	f7f8 fabf 	bl	80005f8 <__aeabi_dmul>
 800807a:	2200      	movs	r2, #0
 800807c:	2300      	movs	r3, #0
 800807e:	4604      	mov	r4, r0
 8008080:	460d      	mov	r5, r1
 8008082:	f7f8 fd21 	bl	8000ac8 <__aeabi_dcmpeq>
 8008086:	2800      	cmp	r0, #0
 8008088:	f43f aebb 	beq.w	8007e02 <_dtoa_r+0x472>
 800808c:	e6f0      	b.n	8007e70 <_dtoa_r+0x4e0>
 800808e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008090:	2a00      	cmp	r2, #0
 8008092:	f000 80db 	beq.w	800824c <_dtoa_r+0x8bc>
 8008096:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008098:	2a01      	cmp	r2, #1
 800809a:	f300 80bf 	bgt.w	800821c <_dtoa_r+0x88c>
 800809e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80080a0:	2a00      	cmp	r2, #0
 80080a2:	f000 80b7 	beq.w	8008214 <_dtoa_r+0x884>
 80080a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80080aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80080ac:	4646      	mov	r6, r8
 80080ae:	9a08      	ldr	r2, [sp, #32]
 80080b0:	2101      	movs	r1, #1
 80080b2:	441a      	add	r2, r3
 80080b4:	4658      	mov	r0, fp
 80080b6:	4498      	add	r8, r3
 80080b8:	9208      	str	r2, [sp, #32]
 80080ba:	f000 fb6b 	bl	8008794 <__i2b>
 80080be:	4605      	mov	r5, r0
 80080c0:	b15e      	cbz	r6, 80080da <_dtoa_r+0x74a>
 80080c2:	9b08      	ldr	r3, [sp, #32]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	dd08      	ble.n	80080da <_dtoa_r+0x74a>
 80080c8:	42b3      	cmp	r3, r6
 80080ca:	9a08      	ldr	r2, [sp, #32]
 80080cc:	bfa8      	it	ge
 80080ce:	4633      	movge	r3, r6
 80080d0:	eba8 0803 	sub.w	r8, r8, r3
 80080d4:	1af6      	subs	r6, r6, r3
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	9308      	str	r3, [sp, #32]
 80080da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080dc:	b1f3      	cbz	r3, 800811c <_dtoa_r+0x78c>
 80080de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f000 80b7 	beq.w	8008254 <_dtoa_r+0x8c4>
 80080e6:	b18c      	cbz	r4, 800810c <_dtoa_r+0x77c>
 80080e8:	4629      	mov	r1, r5
 80080ea:	4622      	mov	r2, r4
 80080ec:	4658      	mov	r0, fp
 80080ee:	f000 fc11 	bl	8008914 <__pow5mult>
 80080f2:	464a      	mov	r2, r9
 80080f4:	4601      	mov	r1, r0
 80080f6:	4605      	mov	r5, r0
 80080f8:	4658      	mov	r0, fp
 80080fa:	f000 fb61 	bl	80087c0 <__multiply>
 80080fe:	4649      	mov	r1, r9
 8008100:	9004      	str	r0, [sp, #16]
 8008102:	4658      	mov	r0, fp
 8008104:	f000 fa92 	bl	800862c <_Bfree>
 8008108:	9b04      	ldr	r3, [sp, #16]
 800810a:	4699      	mov	r9, r3
 800810c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800810e:	1b1a      	subs	r2, r3, r4
 8008110:	d004      	beq.n	800811c <_dtoa_r+0x78c>
 8008112:	4649      	mov	r1, r9
 8008114:	4658      	mov	r0, fp
 8008116:	f000 fbfd 	bl	8008914 <__pow5mult>
 800811a:	4681      	mov	r9, r0
 800811c:	2101      	movs	r1, #1
 800811e:	4658      	mov	r0, fp
 8008120:	f000 fb38 	bl	8008794 <__i2b>
 8008124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008126:	4604      	mov	r4, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 81cf 	beq.w	80084cc <_dtoa_r+0xb3c>
 800812e:	461a      	mov	r2, r3
 8008130:	4601      	mov	r1, r0
 8008132:	4658      	mov	r0, fp
 8008134:	f000 fbee 	bl	8008914 <__pow5mult>
 8008138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800813a:	2b01      	cmp	r3, #1
 800813c:	4604      	mov	r4, r0
 800813e:	f300 8095 	bgt.w	800826c <_dtoa_r+0x8dc>
 8008142:	9b02      	ldr	r3, [sp, #8]
 8008144:	2b00      	cmp	r3, #0
 8008146:	f040 8087 	bne.w	8008258 <_dtoa_r+0x8c8>
 800814a:	9b03      	ldr	r3, [sp, #12]
 800814c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008150:	2b00      	cmp	r3, #0
 8008152:	f040 8089 	bne.w	8008268 <_dtoa_r+0x8d8>
 8008156:	9b03      	ldr	r3, [sp, #12]
 8008158:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800815c:	0d1b      	lsrs	r3, r3, #20
 800815e:	051b      	lsls	r3, r3, #20
 8008160:	b12b      	cbz	r3, 800816e <_dtoa_r+0x7de>
 8008162:	9b08      	ldr	r3, [sp, #32]
 8008164:	3301      	adds	r3, #1
 8008166:	9308      	str	r3, [sp, #32]
 8008168:	f108 0801 	add.w	r8, r8, #1
 800816c:	2301      	movs	r3, #1
 800816e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008170:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 81b0 	beq.w	80084d8 <_dtoa_r+0xb48>
 8008178:	6923      	ldr	r3, [r4, #16]
 800817a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800817e:	6918      	ldr	r0, [r3, #16]
 8008180:	f000 fabc 	bl	80086fc <__hi0bits>
 8008184:	f1c0 0020 	rsb	r0, r0, #32
 8008188:	9b08      	ldr	r3, [sp, #32]
 800818a:	4418      	add	r0, r3
 800818c:	f010 001f 	ands.w	r0, r0, #31
 8008190:	d077      	beq.n	8008282 <_dtoa_r+0x8f2>
 8008192:	f1c0 0320 	rsb	r3, r0, #32
 8008196:	2b04      	cmp	r3, #4
 8008198:	dd6b      	ble.n	8008272 <_dtoa_r+0x8e2>
 800819a:	9b08      	ldr	r3, [sp, #32]
 800819c:	f1c0 001c 	rsb	r0, r0, #28
 80081a0:	4403      	add	r3, r0
 80081a2:	4480      	add	r8, r0
 80081a4:	4406      	add	r6, r0
 80081a6:	9308      	str	r3, [sp, #32]
 80081a8:	f1b8 0f00 	cmp.w	r8, #0
 80081ac:	dd05      	ble.n	80081ba <_dtoa_r+0x82a>
 80081ae:	4649      	mov	r1, r9
 80081b0:	4642      	mov	r2, r8
 80081b2:	4658      	mov	r0, fp
 80081b4:	f000 fc08 	bl	80089c8 <__lshift>
 80081b8:	4681      	mov	r9, r0
 80081ba:	9b08      	ldr	r3, [sp, #32]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	dd05      	ble.n	80081cc <_dtoa_r+0x83c>
 80081c0:	4621      	mov	r1, r4
 80081c2:	461a      	mov	r2, r3
 80081c4:	4658      	mov	r0, fp
 80081c6:	f000 fbff 	bl	80089c8 <__lshift>
 80081ca:	4604      	mov	r4, r0
 80081cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d059      	beq.n	8008286 <_dtoa_r+0x8f6>
 80081d2:	4621      	mov	r1, r4
 80081d4:	4648      	mov	r0, r9
 80081d6:	f000 fc63 	bl	8008aa0 <__mcmp>
 80081da:	2800      	cmp	r0, #0
 80081dc:	da53      	bge.n	8008286 <_dtoa_r+0x8f6>
 80081de:	1e7b      	subs	r3, r7, #1
 80081e0:	9304      	str	r3, [sp, #16]
 80081e2:	4649      	mov	r1, r9
 80081e4:	2300      	movs	r3, #0
 80081e6:	220a      	movs	r2, #10
 80081e8:	4658      	mov	r0, fp
 80081ea:	f000 fa41 	bl	8008670 <__multadd>
 80081ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081f0:	4681      	mov	r9, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 8172 	beq.w	80084dc <_dtoa_r+0xb4c>
 80081f8:	2300      	movs	r3, #0
 80081fa:	4629      	mov	r1, r5
 80081fc:	220a      	movs	r2, #10
 80081fe:	4658      	mov	r0, fp
 8008200:	f000 fa36 	bl	8008670 <__multadd>
 8008204:	9b00      	ldr	r3, [sp, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	4605      	mov	r5, r0
 800820a:	dc67      	bgt.n	80082dc <_dtoa_r+0x94c>
 800820c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800820e:	2b02      	cmp	r3, #2
 8008210:	dc41      	bgt.n	8008296 <_dtoa_r+0x906>
 8008212:	e063      	b.n	80082dc <_dtoa_r+0x94c>
 8008214:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008216:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800821a:	e746      	b.n	80080aa <_dtoa_r+0x71a>
 800821c:	9b07      	ldr	r3, [sp, #28]
 800821e:	1e5c      	subs	r4, r3, #1
 8008220:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008222:	42a3      	cmp	r3, r4
 8008224:	bfbf      	itttt	lt
 8008226:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008228:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800822a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800822c:	1ae3      	sublt	r3, r4, r3
 800822e:	bfb4      	ite	lt
 8008230:	18d2      	addlt	r2, r2, r3
 8008232:	1b1c      	subge	r4, r3, r4
 8008234:	9b07      	ldr	r3, [sp, #28]
 8008236:	bfbc      	itt	lt
 8008238:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800823a:	2400      	movlt	r4, #0
 800823c:	2b00      	cmp	r3, #0
 800823e:	bfb5      	itete	lt
 8008240:	eba8 0603 	sublt.w	r6, r8, r3
 8008244:	9b07      	ldrge	r3, [sp, #28]
 8008246:	2300      	movlt	r3, #0
 8008248:	4646      	movge	r6, r8
 800824a:	e730      	b.n	80080ae <_dtoa_r+0x71e>
 800824c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800824e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008250:	4646      	mov	r6, r8
 8008252:	e735      	b.n	80080c0 <_dtoa_r+0x730>
 8008254:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008256:	e75c      	b.n	8008112 <_dtoa_r+0x782>
 8008258:	2300      	movs	r3, #0
 800825a:	e788      	b.n	800816e <_dtoa_r+0x7de>
 800825c:	3fe00000 	.word	0x3fe00000
 8008260:	40240000 	.word	0x40240000
 8008264:	40140000 	.word	0x40140000
 8008268:	9b02      	ldr	r3, [sp, #8]
 800826a:	e780      	b.n	800816e <_dtoa_r+0x7de>
 800826c:	2300      	movs	r3, #0
 800826e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008270:	e782      	b.n	8008178 <_dtoa_r+0x7e8>
 8008272:	d099      	beq.n	80081a8 <_dtoa_r+0x818>
 8008274:	9a08      	ldr	r2, [sp, #32]
 8008276:	331c      	adds	r3, #28
 8008278:	441a      	add	r2, r3
 800827a:	4498      	add	r8, r3
 800827c:	441e      	add	r6, r3
 800827e:	9208      	str	r2, [sp, #32]
 8008280:	e792      	b.n	80081a8 <_dtoa_r+0x818>
 8008282:	4603      	mov	r3, r0
 8008284:	e7f6      	b.n	8008274 <_dtoa_r+0x8e4>
 8008286:	9b07      	ldr	r3, [sp, #28]
 8008288:	9704      	str	r7, [sp, #16]
 800828a:	2b00      	cmp	r3, #0
 800828c:	dc20      	bgt.n	80082d0 <_dtoa_r+0x940>
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008292:	2b02      	cmp	r3, #2
 8008294:	dd1e      	ble.n	80082d4 <_dtoa_r+0x944>
 8008296:	9b00      	ldr	r3, [sp, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	f47f aec0 	bne.w	800801e <_dtoa_r+0x68e>
 800829e:	4621      	mov	r1, r4
 80082a0:	2205      	movs	r2, #5
 80082a2:	4658      	mov	r0, fp
 80082a4:	f000 f9e4 	bl	8008670 <__multadd>
 80082a8:	4601      	mov	r1, r0
 80082aa:	4604      	mov	r4, r0
 80082ac:	4648      	mov	r0, r9
 80082ae:	f000 fbf7 	bl	8008aa0 <__mcmp>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	f77f aeb3 	ble.w	800801e <_dtoa_r+0x68e>
 80082b8:	4656      	mov	r6, sl
 80082ba:	2331      	movs	r3, #49	@ 0x31
 80082bc:	f806 3b01 	strb.w	r3, [r6], #1
 80082c0:	9b04      	ldr	r3, [sp, #16]
 80082c2:	3301      	adds	r3, #1
 80082c4:	9304      	str	r3, [sp, #16]
 80082c6:	e6ae      	b.n	8008026 <_dtoa_r+0x696>
 80082c8:	9c07      	ldr	r4, [sp, #28]
 80082ca:	9704      	str	r7, [sp, #16]
 80082cc:	4625      	mov	r5, r4
 80082ce:	e7f3      	b.n	80082b8 <_dtoa_r+0x928>
 80082d0:	9b07      	ldr	r3, [sp, #28]
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f000 8104 	beq.w	80084e4 <_dtoa_r+0xb54>
 80082dc:	2e00      	cmp	r6, #0
 80082de:	dd05      	ble.n	80082ec <_dtoa_r+0x95c>
 80082e0:	4629      	mov	r1, r5
 80082e2:	4632      	mov	r2, r6
 80082e4:	4658      	mov	r0, fp
 80082e6:	f000 fb6f 	bl	80089c8 <__lshift>
 80082ea:	4605      	mov	r5, r0
 80082ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d05a      	beq.n	80083a8 <_dtoa_r+0xa18>
 80082f2:	6869      	ldr	r1, [r5, #4]
 80082f4:	4658      	mov	r0, fp
 80082f6:	f000 f959 	bl	80085ac <_Balloc>
 80082fa:	4606      	mov	r6, r0
 80082fc:	b928      	cbnz	r0, 800830a <_dtoa_r+0x97a>
 80082fe:	4b84      	ldr	r3, [pc, #528]	@ (8008510 <_dtoa_r+0xb80>)
 8008300:	4602      	mov	r2, r0
 8008302:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008306:	f7ff bb5a 	b.w	80079be <_dtoa_r+0x2e>
 800830a:	692a      	ldr	r2, [r5, #16]
 800830c:	3202      	adds	r2, #2
 800830e:	0092      	lsls	r2, r2, #2
 8008310:	f105 010c 	add.w	r1, r5, #12
 8008314:	300c      	adds	r0, #12
 8008316:	f7ff faa4 	bl	8007862 <memcpy>
 800831a:	2201      	movs	r2, #1
 800831c:	4631      	mov	r1, r6
 800831e:	4658      	mov	r0, fp
 8008320:	f000 fb52 	bl	80089c8 <__lshift>
 8008324:	f10a 0301 	add.w	r3, sl, #1
 8008328:	9307      	str	r3, [sp, #28]
 800832a:	9b00      	ldr	r3, [sp, #0]
 800832c:	4453      	add	r3, sl
 800832e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008330:	9b02      	ldr	r3, [sp, #8]
 8008332:	f003 0301 	and.w	r3, r3, #1
 8008336:	462f      	mov	r7, r5
 8008338:	930a      	str	r3, [sp, #40]	@ 0x28
 800833a:	4605      	mov	r5, r0
 800833c:	9b07      	ldr	r3, [sp, #28]
 800833e:	4621      	mov	r1, r4
 8008340:	3b01      	subs	r3, #1
 8008342:	4648      	mov	r0, r9
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	f7ff fa9a 	bl	800787e <quorem>
 800834a:	4639      	mov	r1, r7
 800834c:	9002      	str	r0, [sp, #8]
 800834e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008352:	4648      	mov	r0, r9
 8008354:	f000 fba4 	bl	8008aa0 <__mcmp>
 8008358:	462a      	mov	r2, r5
 800835a:	9008      	str	r0, [sp, #32]
 800835c:	4621      	mov	r1, r4
 800835e:	4658      	mov	r0, fp
 8008360:	f000 fbba 	bl	8008ad8 <__mdiff>
 8008364:	68c2      	ldr	r2, [r0, #12]
 8008366:	4606      	mov	r6, r0
 8008368:	bb02      	cbnz	r2, 80083ac <_dtoa_r+0xa1c>
 800836a:	4601      	mov	r1, r0
 800836c:	4648      	mov	r0, r9
 800836e:	f000 fb97 	bl	8008aa0 <__mcmp>
 8008372:	4602      	mov	r2, r0
 8008374:	4631      	mov	r1, r6
 8008376:	4658      	mov	r0, fp
 8008378:	920e      	str	r2, [sp, #56]	@ 0x38
 800837a:	f000 f957 	bl	800862c <_Bfree>
 800837e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008380:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008382:	9e07      	ldr	r6, [sp, #28]
 8008384:	ea43 0102 	orr.w	r1, r3, r2
 8008388:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800838a:	4319      	orrs	r1, r3
 800838c:	d110      	bne.n	80083b0 <_dtoa_r+0xa20>
 800838e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008392:	d029      	beq.n	80083e8 <_dtoa_r+0xa58>
 8008394:	9b08      	ldr	r3, [sp, #32]
 8008396:	2b00      	cmp	r3, #0
 8008398:	dd02      	ble.n	80083a0 <_dtoa_r+0xa10>
 800839a:	9b02      	ldr	r3, [sp, #8]
 800839c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80083a0:	9b00      	ldr	r3, [sp, #0]
 80083a2:	f883 8000 	strb.w	r8, [r3]
 80083a6:	e63f      	b.n	8008028 <_dtoa_r+0x698>
 80083a8:	4628      	mov	r0, r5
 80083aa:	e7bb      	b.n	8008324 <_dtoa_r+0x994>
 80083ac:	2201      	movs	r2, #1
 80083ae:	e7e1      	b.n	8008374 <_dtoa_r+0x9e4>
 80083b0:	9b08      	ldr	r3, [sp, #32]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	db04      	blt.n	80083c0 <_dtoa_r+0xa30>
 80083b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083b8:	430b      	orrs	r3, r1
 80083ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80083bc:	430b      	orrs	r3, r1
 80083be:	d120      	bne.n	8008402 <_dtoa_r+0xa72>
 80083c0:	2a00      	cmp	r2, #0
 80083c2:	dded      	ble.n	80083a0 <_dtoa_r+0xa10>
 80083c4:	4649      	mov	r1, r9
 80083c6:	2201      	movs	r2, #1
 80083c8:	4658      	mov	r0, fp
 80083ca:	f000 fafd 	bl	80089c8 <__lshift>
 80083ce:	4621      	mov	r1, r4
 80083d0:	4681      	mov	r9, r0
 80083d2:	f000 fb65 	bl	8008aa0 <__mcmp>
 80083d6:	2800      	cmp	r0, #0
 80083d8:	dc03      	bgt.n	80083e2 <_dtoa_r+0xa52>
 80083da:	d1e1      	bne.n	80083a0 <_dtoa_r+0xa10>
 80083dc:	f018 0f01 	tst.w	r8, #1
 80083e0:	d0de      	beq.n	80083a0 <_dtoa_r+0xa10>
 80083e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80083e6:	d1d8      	bne.n	800839a <_dtoa_r+0xa0a>
 80083e8:	9a00      	ldr	r2, [sp, #0]
 80083ea:	2339      	movs	r3, #57	@ 0x39
 80083ec:	7013      	strb	r3, [r2, #0]
 80083ee:	4633      	mov	r3, r6
 80083f0:	461e      	mov	r6, r3
 80083f2:	3b01      	subs	r3, #1
 80083f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80083f8:	2a39      	cmp	r2, #57	@ 0x39
 80083fa:	d052      	beq.n	80084a2 <_dtoa_r+0xb12>
 80083fc:	3201      	adds	r2, #1
 80083fe:	701a      	strb	r2, [r3, #0]
 8008400:	e612      	b.n	8008028 <_dtoa_r+0x698>
 8008402:	2a00      	cmp	r2, #0
 8008404:	dd07      	ble.n	8008416 <_dtoa_r+0xa86>
 8008406:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800840a:	d0ed      	beq.n	80083e8 <_dtoa_r+0xa58>
 800840c:	9a00      	ldr	r2, [sp, #0]
 800840e:	f108 0301 	add.w	r3, r8, #1
 8008412:	7013      	strb	r3, [r2, #0]
 8008414:	e608      	b.n	8008028 <_dtoa_r+0x698>
 8008416:	9b07      	ldr	r3, [sp, #28]
 8008418:	9a07      	ldr	r2, [sp, #28]
 800841a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800841e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008420:	4293      	cmp	r3, r2
 8008422:	d028      	beq.n	8008476 <_dtoa_r+0xae6>
 8008424:	4649      	mov	r1, r9
 8008426:	2300      	movs	r3, #0
 8008428:	220a      	movs	r2, #10
 800842a:	4658      	mov	r0, fp
 800842c:	f000 f920 	bl	8008670 <__multadd>
 8008430:	42af      	cmp	r7, r5
 8008432:	4681      	mov	r9, r0
 8008434:	f04f 0300 	mov.w	r3, #0
 8008438:	f04f 020a 	mov.w	r2, #10
 800843c:	4639      	mov	r1, r7
 800843e:	4658      	mov	r0, fp
 8008440:	d107      	bne.n	8008452 <_dtoa_r+0xac2>
 8008442:	f000 f915 	bl	8008670 <__multadd>
 8008446:	4607      	mov	r7, r0
 8008448:	4605      	mov	r5, r0
 800844a:	9b07      	ldr	r3, [sp, #28]
 800844c:	3301      	adds	r3, #1
 800844e:	9307      	str	r3, [sp, #28]
 8008450:	e774      	b.n	800833c <_dtoa_r+0x9ac>
 8008452:	f000 f90d 	bl	8008670 <__multadd>
 8008456:	4629      	mov	r1, r5
 8008458:	4607      	mov	r7, r0
 800845a:	2300      	movs	r3, #0
 800845c:	220a      	movs	r2, #10
 800845e:	4658      	mov	r0, fp
 8008460:	f000 f906 	bl	8008670 <__multadd>
 8008464:	4605      	mov	r5, r0
 8008466:	e7f0      	b.n	800844a <_dtoa_r+0xaba>
 8008468:	9b00      	ldr	r3, [sp, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	bfcc      	ite	gt
 800846e:	461e      	movgt	r6, r3
 8008470:	2601      	movle	r6, #1
 8008472:	4456      	add	r6, sl
 8008474:	2700      	movs	r7, #0
 8008476:	4649      	mov	r1, r9
 8008478:	2201      	movs	r2, #1
 800847a:	4658      	mov	r0, fp
 800847c:	f000 faa4 	bl	80089c8 <__lshift>
 8008480:	4621      	mov	r1, r4
 8008482:	4681      	mov	r9, r0
 8008484:	f000 fb0c 	bl	8008aa0 <__mcmp>
 8008488:	2800      	cmp	r0, #0
 800848a:	dcb0      	bgt.n	80083ee <_dtoa_r+0xa5e>
 800848c:	d102      	bne.n	8008494 <_dtoa_r+0xb04>
 800848e:	f018 0f01 	tst.w	r8, #1
 8008492:	d1ac      	bne.n	80083ee <_dtoa_r+0xa5e>
 8008494:	4633      	mov	r3, r6
 8008496:	461e      	mov	r6, r3
 8008498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800849c:	2a30      	cmp	r2, #48	@ 0x30
 800849e:	d0fa      	beq.n	8008496 <_dtoa_r+0xb06>
 80084a0:	e5c2      	b.n	8008028 <_dtoa_r+0x698>
 80084a2:	459a      	cmp	sl, r3
 80084a4:	d1a4      	bne.n	80083f0 <_dtoa_r+0xa60>
 80084a6:	9b04      	ldr	r3, [sp, #16]
 80084a8:	3301      	adds	r3, #1
 80084aa:	9304      	str	r3, [sp, #16]
 80084ac:	2331      	movs	r3, #49	@ 0x31
 80084ae:	f88a 3000 	strb.w	r3, [sl]
 80084b2:	e5b9      	b.n	8008028 <_dtoa_r+0x698>
 80084b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80084b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008514 <_dtoa_r+0xb84>
 80084ba:	b11b      	cbz	r3, 80084c4 <_dtoa_r+0xb34>
 80084bc:	f10a 0308 	add.w	r3, sl, #8
 80084c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80084c2:	6013      	str	r3, [r2, #0]
 80084c4:	4650      	mov	r0, sl
 80084c6:	b019      	add	sp, #100	@ 0x64
 80084c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	f77f ae37 	ble.w	8008142 <_dtoa_r+0x7b2>
 80084d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80084d8:	2001      	movs	r0, #1
 80084da:	e655      	b.n	8008188 <_dtoa_r+0x7f8>
 80084dc:	9b00      	ldr	r3, [sp, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f77f aed6 	ble.w	8008290 <_dtoa_r+0x900>
 80084e4:	4656      	mov	r6, sl
 80084e6:	4621      	mov	r1, r4
 80084e8:	4648      	mov	r0, r9
 80084ea:	f7ff f9c8 	bl	800787e <quorem>
 80084ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80084f2:	f806 8b01 	strb.w	r8, [r6], #1
 80084f6:	9b00      	ldr	r3, [sp, #0]
 80084f8:	eba6 020a 	sub.w	r2, r6, sl
 80084fc:	4293      	cmp	r3, r2
 80084fe:	ddb3      	ble.n	8008468 <_dtoa_r+0xad8>
 8008500:	4649      	mov	r1, r9
 8008502:	2300      	movs	r3, #0
 8008504:	220a      	movs	r2, #10
 8008506:	4658      	mov	r0, fp
 8008508:	f000 f8b2 	bl	8008670 <__multadd>
 800850c:	4681      	mov	r9, r0
 800850e:	e7ea      	b.n	80084e6 <_dtoa_r+0xb56>
 8008510:	08009e98 	.word	0x08009e98
 8008514:	08009e1c 	.word	0x08009e1c

08008518 <_free_r>:
 8008518:	b538      	push	{r3, r4, r5, lr}
 800851a:	4605      	mov	r5, r0
 800851c:	2900      	cmp	r1, #0
 800851e:	d041      	beq.n	80085a4 <_free_r+0x8c>
 8008520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008524:	1f0c      	subs	r4, r1, #4
 8008526:	2b00      	cmp	r3, #0
 8008528:	bfb8      	it	lt
 800852a:	18e4      	addlt	r4, r4, r3
 800852c:	f7fe fb3e 	bl	8006bac <__malloc_lock>
 8008530:	4a1d      	ldr	r2, [pc, #116]	@ (80085a8 <_free_r+0x90>)
 8008532:	6813      	ldr	r3, [r2, #0]
 8008534:	b933      	cbnz	r3, 8008544 <_free_r+0x2c>
 8008536:	6063      	str	r3, [r4, #4]
 8008538:	6014      	str	r4, [r2, #0]
 800853a:	4628      	mov	r0, r5
 800853c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008540:	f7fe bb3a 	b.w	8006bb8 <__malloc_unlock>
 8008544:	42a3      	cmp	r3, r4
 8008546:	d908      	bls.n	800855a <_free_r+0x42>
 8008548:	6820      	ldr	r0, [r4, #0]
 800854a:	1821      	adds	r1, r4, r0
 800854c:	428b      	cmp	r3, r1
 800854e:	bf01      	itttt	eq
 8008550:	6819      	ldreq	r1, [r3, #0]
 8008552:	685b      	ldreq	r3, [r3, #4]
 8008554:	1809      	addeq	r1, r1, r0
 8008556:	6021      	streq	r1, [r4, #0]
 8008558:	e7ed      	b.n	8008536 <_free_r+0x1e>
 800855a:	461a      	mov	r2, r3
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	b10b      	cbz	r3, 8008564 <_free_r+0x4c>
 8008560:	42a3      	cmp	r3, r4
 8008562:	d9fa      	bls.n	800855a <_free_r+0x42>
 8008564:	6811      	ldr	r1, [r2, #0]
 8008566:	1850      	adds	r0, r2, r1
 8008568:	42a0      	cmp	r0, r4
 800856a:	d10b      	bne.n	8008584 <_free_r+0x6c>
 800856c:	6820      	ldr	r0, [r4, #0]
 800856e:	4401      	add	r1, r0
 8008570:	1850      	adds	r0, r2, r1
 8008572:	4283      	cmp	r3, r0
 8008574:	6011      	str	r1, [r2, #0]
 8008576:	d1e0      	bne.n	800853a <_free_r+0x22>
 8008578:	6818      	ldr	r0, [r3, #0]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	6053      	str	r3, [r2, #4]
 800857e:	4408      	add	r0, r1
 8008580:	6010      	str	r0, [r2, #0]
 8008582:	e7da      	b.n	800853a <_free_r+0x22>
 8008584:	d902      	bls.n	800858c <_free_r+0x74>
 8008586:	230c      	movs	r3, #12
 8008588:	602b      	str	r3, [r5, #0]
 800858a:	e7d6      	b.n	800853a <_free_r+0x22>
 800858c:	6820      	ldr	r0, [r4, #0]
 800858e:	1821      	adds	r1, r4, r0
 8008590:	428b      	cmp	r3, r1
 8008592:	bf04      	itt	eq
 8008594:	6819      	ldreq	r1, [r3, #0]
 8008596:	685b      	ldreq	r3, [r3, #4]
 8008598:	6063      	str	r3, [r4, #4]
 800859a:	bf04      	itt	eq
 800859c:	1809      	addeq	r1, r1, r0
 800859e:	6021      	streq	r1, [r4, #0]
 80085a0:	6054      	str	r4, [r2, #4]
 80085a2:	e7ca      	b.n	800853a <_free_r+0x22>
 80085a4:	bd38      	pop	{r3, r4, r5, pc}
 80085a6:	bf00      	nop
 80085a8:	20000a14 	.word	0x20000a14

080085ac <_Balloc>:
 80085ac:	b570      	push	{r4, r5, r6, lr}
 80085ae:	69c6      	ldr	r6, [r0, #28]
 80085b0:	4604      	mov	r4, r0
 80085b2:	460d      	mov	r5, r1
 80085b4:	b976      	cbnz	r6, 80085d4 <_Balloc+0x28>
 80085b6:	2010      	movs	r0, #16
 80085b8:	f7fe fa4e 	bl	8006a58 <malloc>
 80085bc:	4602      	mov	r2, r0
 80085be:	61e0      	str	r0, [r4, #28]
 80085c0:	b920      	cbnz	r0, 80085cc <_Balloc+0x20>
 80085c2:	4b18      	ldr	r3, [pc, #96]	@ (8008624 <_Balloc+0x78>)
 80085c4:	4818      	ldr	r0, [pc, #96]	@ (8008628 <_Balloc+0x7c>)
 80085c6:	216b      	movs	r1, #107	@ 0x6b
 80085c8:	f000 fd98 	bl	80090fc <__assert_func>
 80085cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085d0:	6006      	str	r6, [r0, #0]
 80085d2:	60c6      	str	r6, [r0, #12]
 80085d4:	69e6      	ldr	r6, [r4, #28]
 80085d6:	68f3      	ldr	r3, [r6, #12]
 80085d8:	b183      	cbz	r3, 80085fc <_Balloc+0x50>
 80085da:	69e3      	ldr	r3, [r4, #28]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085e2:	b9b8      	cbnz	r0, 8008614 <_Balloc+0x68>
 80085e4:	2101      	movs	r1, #1
 80085e6:	fa01 f605 	lsl.w	r6, r1, r5
 80085ea:	1d72      	adds	r2, r6, #5
 80085ec:	0092      	lsls	r2, r2, #2
 80085ee:	4620      	mov	r0, r4
 80085f0:	f000 fda2 	bl	8009138 <_calloc_r>
 80085f4:	b160      	cbz	r0, 8008610 <_Balloc+0x64>
 80085f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085fa:	e00e      	b.n	800861a <_Balloc+0x6e>
 80085fc:	2221      	movs	r2, #33	@ 0x21
 80085fe:	2104      	movs	r1, #4
 8008600:	4620      	mov	r0, r4
 8008602:	f000 fd99 	bl	8009138 <_calloc_r>
 8008606:	69e3      	ldr	r3, [r4, #28]
 8008608:	60f0      	str	r0, [r6, #12]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1e4      	bne.n	80085da <_Balloc+0x2e>
 8008610:	2000      	movs	r0, #0
 8008612:	bd70      	pop	{r4, r5, r6, pc}
 8008614:	6802      	ldr	r2, [r0, #0]
 8008616:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800861a:	2300      	movs	r3, #0
 800861c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008620:	e7f7      	b.n	8008612 <_Balloc+0x66>
 8008622:	bf00      	nop
 8008624:	08009e29 	.word	0x08009e29
 8008628:	08009ea9 	.word	0x08009ea9

0800862c <_Bfree>:
 800862c:	b570      	push	{r4, r5, r6, lr}
 800862e:	69c6      	ldr	r6, [r0, #28]
 8008630:	4605      	mov	r5, r0
 8008632:	460c      	mov	r4, r1
 8008634:	b976      	cbnz	r6, 8008654 <_Bfree+0x28>
 8008636:	2010      	movs	r0, #16
 8008638:	f7fe fa0e 	bl	8006a58 <malloc>
 800863c:	4602      	mov	r2, r0
 800863e:	61e8      	str	r0, [r5, #28]
 8008640:	b920      	cbnz	r0, 800864c <_Bfree+0x20>
 8008642:	4b09      	ldr	r3, [pc, #36]	@ (8008668 <_Bfree+0x3c>)
 8008644:	4809      	ldr	r0, [pc, #36]	@ (800866c <_Bfree+0x40>)
 8008646:	218f      	movs	r1, #143	@ 0x8f
 8008648:	f000 fd58 	bl	80090fc <__assert_func>
 800864c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008650:	6006      	str	r6, [r0, #0]
 8008652:	60c6      	str	r6, [r0, #12]
 8008654:	b13c      	cbz	r4, 8008666 <_Bfree+0x3a>
 8008656:	69eb      	ldr	r3, [r5, #28]
 8008658:	6862      	ldr	r2, [r4, #4]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008660:	6021      	str	r1, [r4, #0]
 8008662:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008666:	bd70      	pop	{r4, r5, r6, pc}
 8008668:	08009e29 	.word	0x08009e29
 800866c:	08009ea9 	.word	0x08009ea9

08008670 <__multadd>:
 8008670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008674:	690d      	ldr	r5, [r1, #16]
 8008676:	4607      	mov	r7, r0
 8008678:	460c      	mov	r4, r1
 800867a:	461e      	mov	r6, r3
 800867c:	f101 0c14 	add.w	ip, r1, #20
 8008680:	2000      	movs	r0, #0
 8008682:	f8dc 3000 	ldr.w	r3, [ip]
 8008686:	b299      	uxth	r1, r3
 8008688:	fb02 6101 	mla	r1, r2, r1, r6
 800868c:	0c1e      	lsrs	r6, r3, #16
 800868e:	0c0b      	lsrs	r3, r1, #16
 8008690:	fb02 3306 	mla	r3, r2, r6, r3
 8008694:	b289      	uxth	r1, r1
 8008696:	3001      	adds	r0, #1
 8008698:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800869c:	4285      	cmp	r5, r0
 800869e:	f84c 1b04 	str.w	r1, [ip], #4
 80086a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086a6:	dcec      	bgt.n	8008682 <__multadd+0x12>
 80086a8:	b30e      	cbz	r6, 80086ee <__multadd+0x7e>
 80086aa:	68a3      	ldr	r3, [r4, #8]
 80086ac:	42ab      	cmp	r3, r5
 80086ae:	dc19      	bgt.n	80086e4 <__multadd+0x74>
 80086b0:	6861      	ldr	r1, [r4, #4]
 80086b2:	4638      	mov	r0, r7
 80086b4:	3101      	adds	r1, #1
 80086b6:	f7ff ff79 	bl	80085ac <_Balloc>
 80086ba:	4680      	mov	r8, r0
 80086bc:	b928      	cbnz	r0, 80086ca <__multadd+0x5a>
 80086be:	4602      	mov	r2, r0
 80086c0:	4b0c      	ldr	r3, [pc, #48]	@ (80086f4 <__multadd+0x84>)
 80086c2:	480d      	ldr	r0, [pc, #52]	@ (80086f8 <__multadd+0x88>)
 80086c4:	21ba      	movs	r1, #186	@ 0xba
 80086c6:	f000 fd19 	bl	80090fc <__assert_func>
 80086ca:	6922      	ldr	r2, [r4, #16]
 80086cc:	3202      	adds	r2, #2
 80086ce:	f104 010c 	add.w	r1, r4, #12
 80086d2:	0092      	lsls	r2, r2, #2
 80086d4:	300c      	adds	r0, #12
 80086d6:	f7ff f8c4 	bl	8007862 <memcpy>
 80086da:	4621      	mov	r1, r4
 80086dc:	4638      	mov	r0, r7
 80086de:	f7ff ffa5 	bl	800862c <_Bfree>
 80086e2:	4644      	mov	r4, r8
 80086e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086e8:	3501      	adds	r5, #1
 80086ea:	615e      	str	r6, [r3, #20]
 80086ec:	6125      	str	r5, [r4, #16]
 80086ee:	4620      	mov	r0, r4
 80086f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f4:	08009e98 	.word	0x08009e98
 80086f8:	08009ea9 	.word	0x08009ea9

080086fc <__hi0bits>:
 80086fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008700:	4603      	mov	r3, r0
 8008702:	bf36      	itet	cc
 8008704:	0403      	lslcc	r3, r0, #16
 8008706:	2000      	movcs	r0, #0
 8008708:	2010      	movcc	r0, #16
 800870a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800870e:	bf3c      	itt	cc
 8008710:	021b      	lslcc	r3, r3, #8
 8008712:	3008      	addcc	r0, #8
 8008714:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008718:	bf3c      	itt	cc
 800871a:	011b      	lslcc	r3, r3, #4
 800871c:	3004      	addcc	r0, #4
 800871e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008722:	bf3c      	itt	cc
 8008724:	009b      	lslcc	r3, r3, #2
 8008726:	3002      	addcc	r0, #2
 8008728:	2b00      	cmp	r3, #0
 800872a:	db05      	blt.n	8008738 <__hi0bits+0x3c>
 800872c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008730:	f100 0001 	add.w	r0, r0, #1
 8008734:	bf08      	it	eq
 8008736:	2020      	moveq	r0, #32
 8008738:	4770      	bx	lr

0800873a <__lo0bits>:
 800873a:	6803      	ldr	r3, [r0, #0]
 800873c:	4602      	mov	r2, r0
 800873e:	f013 0007 	ands.w	r0, r3, #7
 8008742:	d00b      	beq.n	800875c <__lo0bits+0x22>
 8008744:	07d9      	lsls	r1, r3, #31
 8008746:	d421      	bmi.n	800878c <__lo0bits+0x52>
 8008748:	0798      	lsls	r0, r3, #30
 800874a:	bf49      	itett	mi
 800874c:	085b      	lsrmi	r3, r3, #1
 800874e:	089b      	lsrpl	r3, r3, #2
 8008750:	2001      	movmi	r0, #1
 8008752:	6013      	strmi	r3, [r2, #0]
 8008754:	bf5c      	itt	pl
 8008756:	6013      	strpl	r3, [r2, #0]
 8008758:	2002      	movpl	r0, #2
 800875a:	4770      	bx	lr
 800875c:	b299      	uxth	r1, r3
 800875e:	b909      	cbnz	r1, 8008764 <__lo0bits+0x2a>
 8008760:	0c1b      	lsrs	r3, r3, #16
 8008762:	2010      	movs	r0, #16
 8008764:	b2d9      	uxtb	r1, r3
 8008766:	b909      	cbnz	r1, 800876c <__lo0bits+0x32>
 8008768:	3008      	adds	r0, #8
 800876a:	0a1b      	lsrs	r3, r3, #8
 800876c:	0719      	lsls	r1, r3, #28
 800876e:	bf04      	itt	eq
 8008770:	091b      	lsreq	r3, r3, #4
 8008772:	3004      	addeq	r0, #4
 8008774:	0799      	lsls	r1, r3, #30
 8008776:	bf04      	itt	eq
 8008778:	089b      	lsreq	r3, r3, #2
 800877a:	3002      	addeq	r0, #2
 800877c:	07d9      	lsls	r1, r3, #31
 800877e:	d403      	bmi.n	8008788 <__lo0bits+0x4e>
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	f100 0001 	add.w	r0, r0, #1
 8008786:	d003      	beq.n	8008790 <__lo0bits+0x56>
 8008788:	6013      	str	r3, [r2, #0]
 800878a:	4770      	bx	lr
 800878c:	2000      	movs	r0, #0
 800878e:	4770      	bx	lr
 8008790:	2020      	movs	r0, #32
 8008792:	4770      	bx	lr

08008794 <__i2b>:
 8008794:	b510      	push	{r4, lr}
 8008796:	460c      	mov	r4, r1
 8008798:	2101      	movs	r1, #1
 800879a:	f7ff ff07 	bl	80085ac <_Balloc>
 800879e:	4602      	mov	r2, r0
 80087a0:	b928      	cbnz	r0, 80087ae <__i2b+0x1a>
 80087a2:	4b05      	ldr	r3, [pc, #20]	@ (80087b8 <__i2b+0x24>)
 80087a4:	4805      	ldr	r0, [pc, #20]	@ (80087bc <__i2b+0x28>)
 80087a6:	f240 1145 	movw	r1, #325	@ 0x145
 80087aa:	f000 fca7 	bl	80090fc <__assert_func>
 80087ae:	2301      	movs	r3, #1
 80087b0:	6144      	str	r4, [r0, #20]
 80087b2:	6103      	str	r3, [r0, #16]
 80087b4:	bd10      	pop	{r4, pc}
 80087b6:	bf00      	nop
 80087b8:	08009e98 	.word	0x08009e98
 80087bc:	08009ea9 	.word	0x08009ea9

080087c0 <__multiply>:
 80087c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c4:	4614      	mov	r4, r2
 80087c6:	690a      	ldr	r2, [r1, #16]
 80087c8:	6923      	ldr	r3, [r4, #16]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	bfa8      	it	ge
 80087ce:	4623      	movge	r3, r4
 80087d0:	460f      	mov	r7, r1
 80087d2:	bfa4      	itt	ge
 80087d4:	460c      	movge	r4, r1
 80087d6:	461f      	movge	r7, r3
 80087d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80087dc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80087e0:	68a3      	ldr	r3, [r4, #8]
 80087e2:	6861      	ldr	r1, [r4, #4]
 80087e4:	eb0a 0609 	add.w	r6, sl, r9
 80087e8:	42b3      	cmp	r3, r6
 80087ea:	b085      	sub	sp, #20
 80087ec:	bfb8      	it	lt
 80087ee:	3101      	addlt	r1, #1
 80087f0:	f7ff fedc 	bl	80085ac <_Balloc>
 80087f4:	b930      	cbnz	r0, 8008804 <__multiply+0x44>
 80087f6:	4602      	mov	r2, r0
 80087f8:	4b44      	ldr	r3, [pc, #272]	@ (800890c <__multiply+0x14c>)
 80087fa:	4845      	ldr	r0, [pc, #276]	@ (8008910 <__multiply+0x150>)
 80087fc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008800:	f000 fc7c 	bl	80090fc <__assert_func>
 8008804:	f100 0514 	add.w	r5, r0, #20
 8008808:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800880c:	462b      	mov	r3, r5
 800880e:	2200      	movs	r2, #0
 8008810:	4543      	cmp	r3, r8
 8008812:	d321      	bcc.n	8008858 <__multiply+0x98>
 8008814:	f107 0114 	add.w	r1, r7, #20
 8008818:	f104 0214 	add.w	r2, r4, #20
 800881c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008820:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008824:	9302      	str	r3, [sp, #8]
 8008826:	1b13      	subs	r3, r2, r4
 8008828:	3b15      	subs	r3, #21
 800882a:	f023 0303 	bic.w	r3, r3, #3
 800882e:	3304      	adds	r3, #4
 8008830:	f104 0715 	add.w	r7, r4, #21
 8008834:	42ba      	cmp	r2, r7
 8008836:	bf38      	it	cc
 8008838:	2304      	movcc	r3, #4
 800883a:	9301      	str	r3, [sp, #4]
 800883c:	9b02      	ldr	r3, [sp, #8]
 800883e:	9103      	str	r1, [sp, #12]
 8008840:	428b      	cmp	r3, r1
 8008842:	d80c      	bhi.n	800885e <__multiply+0x9e>
 8008844:	2e00      	cmp	r6, #0
 8008846:	dd03      	ble.n	8008850 <__multiply+0x90>
 8008848:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800884c:	2b00      	cmp	r3, #0
 800884e:	d05b      	beq.n	8008908 <__multiply+0x148>
 8008850:	6106      	str	r6, [r0, #16]
 8008852:	b005      	add	sp, #20
 8008854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008858:	f843 2b04 	str.w	r2, [r3], #4
 800885c:	e7d8      	b.n	8008810 <__multiply+0x50>
 800885e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008862:	f1ba 0f00 	cmp.w	sl, #0
 8008866:	d024      	beq.n	80088b2 <__multiply+0xf2>
 8008868:	f104 0e14 	add.w	lr, r4, #20
 800886c:	46a9      	mov	r9, r5
 800886e:	f04f 0c00 	mov.w	ip, #0
 8008872:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008876:	f8d9 3000 	ldr.w	r3, [r9]
 800887a:	fa1f fb87 	uxth.w	fp, r7
 800887e:	b29b      	uxth	r3, r3
 8008880:	fb0a 330b 	mla	r3, sl, fp, r3
 8008884:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008888:	f8d9 7000 	ldr.w	r7, [r9]
 800888c:	4463      	add	r3, ip
 800888e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008892:	fb0a c70b 	mla	r7, sl, fp, ip
 8008896:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800889a:	b29b      	uxth	r3, r3
 800889c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80088a0:	4572      	cmp	r2, lr
 80088a2:	f849 3b04 	str.w	r3, [r9], #4
 80088a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80088aa:	d8e2      	bhi.n	8008872 <__multiply+0xb2>
 80088ac:	9b01      	ldr	r3, [sp, #4]
 80088ae:	f845 c003 	str.w	ip, [r5, r3]
 80088b2:	9b03      	ldr	r3, [sp, #12]
 80088b4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80088b8:	3104      	adds	r1, #4
 80088ba:	f1b9 0f00 	cmp.w	r9, #0
 80088be:	d021      	beq.n	8008904 <__multiply+0x144>
 80088c0:	682b      	ldr	r3, [r5, #0]
 80088c2:	f104 0c14 	add.w	ip, r4, #20
 80088c6:	46ae      	mov	lr, r5
 80088c8:	f04f 0a00 	mov.w	sl, #0
 80088cc:	f8bc b000 	ldrh.w	fp, [ip]
 80088d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80088d4:	fb09 770b 	mla	r7, r9, fp, r7
 80088d8:	4457      	add	r7, sl
 80088da:	b29b      	uxth	r3, r3
 80088dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80088e0:	f84e 3b04 	str.w	r3, [lr], #4
 80088e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80088e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088ec:	f8be 3000 	ldrh.w	r3, [lr]
 80088f0:	fb09 330a 	mla	r3, r9, sl, r3
 80088f4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80088f8:	4562      	cmp	r2, ip
 80088fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088fe:	d8e5      	bhi.n	80088cc <__multiply+0x10c>
 8008900:	9f01      	ldr	r7, [sp, #4]
 8008902:	51eb      	str	r3, [r5, r7]
 8008904:	3504      	adds	r5, #4
 8008906:	e799      	b.n	800883c <__multiply+0x7c>
 8008908:	3e01      	subs	r6, #1
 800890a:	e79b      	b.n	8008844 <__multiply+0x84>
 800890c:	08009e98 	.word	0x08009e98
 8008910:	08009ea9 	.word	0x08009ea9

08008914 <__pow5mult>:
 8008914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008918:	4615      	mov	r5, r2
 800891a:	f012 0203 	ands.w	r2, r2, #3
 800891e:	4607      	mov	r7, r0
 8008920:	460e      	mov	r6, r1
 8008922:	d007      	beq.n	8008934 <__pow5mult+0x20>
 8008924:	4c25      	ldr	r4, [pc, #148]	@ (80089bc <__pow5mult+0xa8>)
 8008926:	3a01      	subs	r2, #1
 8008928:	2300      	movs	r3, #0
 800892a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800892e:	f7ff fe9f 	bl	8008670 <__multadd>
 8008932:	4606      	mov	r6, r0
 8008934:	10ad      	asrs	r5, r5, #2
 8008936:	d03d      	beq.n	80089b4 <__pow5mult+0xa0>
 8008938:	69fc      	ldr	r4, [r7, #28]
 800893a:	b97c      	cbnz	r4, 800895c <__pow5mult+0x48>
 800893c:	2010      	movs	r0, #16
 800893e:	f7fe f88b 	bl	8006a58 <malloc>
 8008942:	4602      	mov	r2, r0
 8008944:	61f8      	str	r0, [r7, #28]
 8008946:	b928      	cbnz	r0, 8008954 <__pow5mult+0x40>
 8008948:	4b1d      	ldr	r3, [pc, #116]	@ (80089c0 <__pow5mult+0xac>)
 800894a:	481e      	ldr	r0, [pc, #120]	@ (80089c4 <__pow5mult+0xb0>)
 800894c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008950:	f000 fbd4 	bl	80090fc <__assert_func>
 8008954:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008958:	6004      	str	r4, [r0, #0]
 800895a:	60c4      	str	r4, [r0, #12]
 800895c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008960:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008964:	b94c      	cbnz	r4, 800897a <__pow5mult+0x66>
 8008966:	f240 2171 	movw	r1, #625	@ 0x271
 800896a:	4638      	mov	r0, r7
 800896c:	f7ff ff12 	bl	8008794 <__i2b>
 8008970:	2300      	movs	r3, #0
 8008972:	f8c8 0008 	str.w	r0, [r8, #8]
 8008976:	4604      	mov	r4, r0
 8008978:	6003      	str	r3, [r0, #0]
 800897a:	f04f 0900 	mov.w	r9, #0
 800897e:	07eb      	lsls	r3, r5, #31
 8008980:	d50a      	bpl.n	8008998 <__pow5mult+0x84>
 8008982:	4631      	mov	r1, r6
 8008984:	4622      	mov	r2, r4
 8008986:	4638      	mov	r0, r7
 8008988:	f7ff ff1a 	bl	80087c0 <__multiply>
 800898c:	4631      	mov	r1, r6
 800898e:	4680      	mov	r8, r0
 8008990:	4638      	mov	r0, r7
 8008992:	f7ff fe4b 	bl	800862c <_Bfree>
 8008996:	4646      	mov	r6, r8
 8008998:	106d      	asrs	r5, r5, #1
 800899a:	d00b      	beq.n	80089b4 <__pow5mult+0xa0>
 800899c:	6820      	ldr	r0, [r4, #0]
 800899e:	b938      	cbnz	r0, 80089b0 <__pow5mult+0x9c>
 80089a0:	4622      	mov	r2, r4
 80089a2:	4621      	mov	r1, r4
 80089a4:	4638      	mov	r0, r7
 80089a6:	f7ff ff0b 	bl	80087c0 <__multiply>
 80089aa:	6020      	str	r0, [r4, #0]
 80089ac:	f8c0 9000 	str.w	r9, [r0]
 80089b0:	4604      	mov	r4, r0
 80089b2:	e7e4      	b.n	800897e <__pow5mult+0x6a>
 80089b4:	4630      	mov	r0, r6
 80089b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ba:	bf00      	nop
 80089bc:	08009f04 	.word	0x08009f04
 80089c0:	08009e29 	.word	0x08009e29
 80089c4:	08009ea9 	.word	0x08009ea9

080089c8 <__lshift>:
 80089c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089cc:	460c      	mov	r4, r1
 80089ce:	6849      	ldr	r1, [r1, #4]
 80089d0:	6923      	ldr	r3, [r4, #16]
 80089d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089d6:	68a3      	ldr	r3, [r4, #8]
 80089d8:	4607      	mov	r7, r0
 80089da:	4691      	mov	r9, r2
 80089dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089e0:	f108 0601 	add.w	r6, r8, #1
 80089e4:	42b3      	cmp	r3, r6
 80089e6:	db0b      	blt.n	8008a00 <__lshift+0x38>
 80089e8:	4638      	mov	r0, r7
 80089ea:	f7ff fddf 	bl	80085ac <_Balloc>
 80089ee:	4605      	mov	r5, r0
 80089f0:	b948      	cbnz	r0, 8008a06 <__lshift+0x3e>
 80089f2:	4602      	mov	r2, r0
 80089f4:	4b28      	ldr	r3, [pc, #160]	@ (8008a98 <__lshift+0xd0>)
 80089f6:	4829      	ldr	r0, [pc, #164]	@ (8008a9c <__lshift+0xd4>)
 80089f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80089fc:	f000 fb7e 	bl	80090fc <__assert_func>
 8008a00:	3101      	adds	r1, #1
 8008a02:	005b      	lsls	r3, r3, #1
 8008a04:	e7ee      	b.n	80089e4 <__lshift+0x1c>
 8008a06:	2300      	movs	r3, #0
 8008a08:	f100 0114 	add.w	r1, r0, #20
 8008a0c:	f100 0210 	add.w	r2, r0, #16
 8008a10:	4618      	mov	r0, r3
 8008a12:	4553      	cmp	r3, sl
 8008a14:	db33      	blt.n	8008a7e <__lshift+0xb6>
 8008a16:	6920      	ldr	r0, [r4, #16]
 8008a18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a1c:	f104 0314 	add.w	r3, r4, #20
 8008a20:	f019 091f 	ands.w	r9, r9, #31
 8008a24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a2c:	d02b      	beq.n	8008a86 <__lshift+0xbe>
 8008a2e:	f1c9 0e20 	rsb	lr, r9, #32
 8008a32:	468a      	mov	sl, r1
 8008a34:	2200      	movs	r2, #0
 8008a36:	6818      	ldr	r0, [r3, #0]
 8008a38:	fa00 f009 	lsl.w	r0, r0, r9
 8008a3c:	4310      	orrs	r0, r2
 8008a3e:	f84a 0b04 	str.w	r0, [sl], #4
 8008a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a46:	459c      	cmp	ip, r3
 8008a48:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a4c:	d8f3      	bhi.n	8008a36 <__lshift+0x6e>
 8008a4e:	ebac 0304 	sub.w	r3, ip, r4
 8008a52:	3b15      	subs	r3, #21
 8008a54:	f023 0303 	bic.w	r3, r3, #3
 8008a58:	3304      	adds	r3, #4
 8008a5a:	f104 0015 	add.w	r0, r4, #21
 8008a5e:	4584      	cmp	ip, r0
 8008a60:	bf38      	it	cc
 8008a62:	2304      	movcc	r3, #4
 8008a64:	50ca      	str	r2, [r1, r3]
 8008a66:	b10a      	cbz	r2, 8008a6c <__lshift+0xa4>
 8008a68:	f108 0602 	add.w	r6, r8, #2
 8008a6c:	3e01      	subs	r6, #1
 8008a6e:	4638      	mov	r0, r7
 8008a70:	612e      	str	r6, [r5, #16]
 8008a72:	4621      	mov	r1, r4
 8008a74:	f7ff fdda 	bl	800862c <_Bfree>
 8008a78:	4628      	mov	r0, r5
 8008a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a82:	3301      	adds	r3, #1
 8008a84:	e7c5      	b.n	8008a12 <__lshift+0x4a>
 8008a86:	3904      	subs	r1, #4
 8008a88:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a90:	459c      	cmp	ip, r3
 8008a92:	d8f9      	bhi.n	8008a88 <__lshift+0xc0>
 8008a94:	e7ea      	b.n	8008a6c <__lshift+0xa4>
 8008a96:	bf00      	nop
 8008a98:	08009e98 	.word	0x08009e98
 8008a9c:	08009ea9 	.word	0x08009ea9

08008aa0 <__mcmp>:
 8008aa0:	690a      	ldr	r2, [r1, #16]
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	6900      	ldr	r0, [r0, #16]
 8008aa6:	1a80      	subs	r0, r0, r2
 8008aa8:	b530      	push	{r4, r5, lr}
 8008aaa:	d10e      	bne.n	8008aca <__mcmp+0x2a>
 8008aac:	3314      	adds	r3, #20
 8008aae:	3114      	adds	r1, #20
 8008ab0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008ab4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ab8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008abc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ac0:	4295      	cmp	r5, r2
 8008ac2:	d003      	beq.n	8008acc <__mcmp+0x2c>
 8008ac4:	d205      	bcs.n	8008ad2 <__mcmp+0x32>
 8008ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8008aca:	bd30      	pop	{r4, r5, pc}
 8008acc:	42a3      	cmp	r3, r4
 8008ace:	d3f3      	bcc.n	8008ab8 <__mcmp+0x18>
 8008ad0:	e7fb      	b.n	8008aca <__mcmp+0x2a>
 8008ad2:	2001      	movs	r0, #1
 8008ad4:	e7f9      	b.n	8008aca <__mcmp+0x2a>
	...

08008ad8 <__mdiff>:
 8008ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008adc:	4689      	mov	r9, r1
 8008ade:	4606      	mov	r6, r0
 8008ae0:	4611      	mov	r1, r2
 8008ae2:	4648      	mov	r0, r9
 8008ae4:	4614      	mov	r4, r2
 8008ae6:	f7ff ffdb 	bl	8008aa0 <__mcmp>
 8008aea:	1e05      	subs	r5, r0, #0
 8008aec:	d112      	bne.n	8008b14 <__mdiff+0x3c>
 8008aee:	4629      	mov	r1, r5
 8008af0:	4630      	mov	r0, r6
 8008af2:	f7ff fd5b 	bl	80085ac <_Balloc>
 8008af6:	4602      	mov	r2, r0
 8008af8:	b928      	cbnz	r0, 8008b06 <__mdiff+0x2e>
 8008afa:	4b3f      	ldr	r3, [pc, #252]	@ (8008bf8 <__mdiff+0x120>)
 8008afc:	f240 2137 	movw	r1, #567	@ 0x237
 8008b00:	483e      	ldr	r0, [pc, #248]	@ (8008bfc <__mdiff+0x124>)
 8008b02:	f000 fafb 	bl	80090fc <__assert_func>
 8008b06:	2301      	movs	r3, #1
 8008b08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b0c:	4610      	mov	r0, r2
 8008b0e:	b003      	add	sp, #12
 8008b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b14:	bfbc      	itt	lt
 8008b16:	464b      	movlt	r3, r9
 8008b18:	46a1      	movlt	r9, r4
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008b20:	bfba      	itte	lt
 8008b22:	461c      	movlt	r4, r3
 8008b24:	2501      	movlt	r5, #1
 8008b26:	2500      	movge	r5, #0
 8008b28:	f7ff fd40 	bl	80085ac <_Balloc>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	b918      	cbnz	r0, 8008b38 <__mdiff+0x60>
 8008b30:	4b31      	ldr	r3, [pc, #196]	@ (8008bf8 <__mdiff+0x120>)
 8008b32:	f240 2145 	movw	r1, #581	@ 0x245
 8008b36:	e7e3      	b.n	8008b00 <__mdiff+0x28>
 8008b38:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008b3c:	6926      	ldr	r6, [r4, #16]
 8008b3e:	60c5      	str	r5, [r0, #12]
 8008b40:	f109 0310 	add.w	r3, r9, #16
 8008b44:	f109 0514 	add.w	r5, r9, #20
 8008b48:	f104 0e14 	add.w	lr, r4, #20
 8008b4c:	f100 0b14 	add.w	fp, r0, #20
 8008b50:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008b54:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008b58:	9301      	str	r3, [sp, #4]
 8008b5a:	46d9      	mov	r9, fp
 8008b5c:	f04f 0c00 	mov.w	ip, #0
 8008b60:	9b01      	ldr	r3, [sp, #4]
 8008b62:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b66:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b6a:	9301      	str	r3, [sp, #4]
 8008b6c:	fa1f f38a 	uxth.w	r3, sl
 8008b70:	4619      	mov	r1, r3
 8008b72:	b283      	uxth	r3, r0
 8008b74:	1acb      	subs	r3, r1, r3
 8008b76:	0c00      	lsrs	r0, r0, #16
 8008b78:	4463      	add	r3, ip
 8008b7a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b7e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b88:	4576      	cmp	r6, lr
 8008b8a:	f849 3b04 	str.w	r3, [r9], #4
 8008b8e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b92:	d8e5      	bhi.n	8008b60 <__mdiff+0x88>
 8008b94:	1b33      	subs	r3, r6, r4
 8008b96:	3b15      	subs	r3, #21
 8008b98:	f023 0303 	bic.w	r3, r3, #3
 8008b9c:	3415      	adds	r4, #21
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	42a6      	cmp	r6, r4
 8008ba2:	bf38      	it	cc
 8008ba4:	2304      	movcc	r3, #4
 8008ba6:	441d      	add	r5, r3
 8008ba8:	445b      	add	r3, fp
 8008baa:	461e      	mov	r6, r3
 8008bac:	462c      	mov	r4, r5
 8008bae:	4544      	cmp	r4, r8
 8008bb0:	d30e      	bcc.n	8008bd0 <__mdiff+0xf8>
 8008bb2:	f108 0103 	add.w	r1, r8, #3
 8008bb6:	1b49      	subs	r1, r1, r5
 8008bb8:	f021 0103 	bic.w	r1, r1, #3
 8008bbc:	3d03      	subs	r5, #3
 8008bbe:	45a8      	cmp	r8, r5
 8008bc0:	bf38      	it	cc
 8008bc2:	2100      	movcc	r1, #0
 8008bc4:	440b      	add	r3, r1
 8008bc6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008bca:	b191      	cbz	r1, 8008bf2 <__mdiff+0x11a>
 8008bcc:	6117      	str	r7, [r2, #16]
 8008bce:	e79d      	b.n	8008b0c <__mdiff+0x34>
 8008bd0:	f854 1b04 	ldr.w	r1, [r4], #4
 8008bd4:	46e6      	mov	lr, ip
 8008bd6:	0c08      	lsrs	r0, r1, #16
 8008bd8:	fa1c fc81 	uxtah	ip, ip, r1
 8008bdc:	4471      	add	r1, lr
 8008bde:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008be2:	b289      	uxth	r1, r1
 8008be4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008be8:	f846 1b04 	str.w	r1, [r6], #4
 8008bec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008bf0:	e7dd      	b.n	8008bae <__mdiff+0xd6>
 8008bf2:	3f01      	subs	r7, #1
 8008bf4:	e7e7      	b.n	8008bc6 <__mdiff+0xee>
 8008bf6:	bf00      	nop
 8008bf8:	08009e98 	.word	0x08009e98
 8008bfc:	08009ea9 	.word	0x08009ea9

08008c00 <__d2b>:
 8008c00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c04:	460f      	mov	r7, r1
 8008c06:	2101      	movs	r1, #1
 8008c08:	ec59 8b10 	vmov	r8, r9, d0
 8008c0c:	4616      	mov	r6, r2
 8008c0e:	f7ff fccd 	bl	80085ac <_Balloc>
 8008c12:	4604      	mov	r4, r0
 8008c14:	b930      	cbnz	r0, 8008c24 <__d2b+0x24>
 8008c16:	4602      	mov	r2, r0
 8008c18:	4b23      	ldr	r3, [pc, #140]	@ (8008ca8 <__d2b+0xa8>)
 8008c1a:	4824      	ldr	r0, [pc, #144]	@ (8008cac <__d2b+0xac>)
 8008c1c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008c20:	f000 fa6c 	bl	80090fc <__assert_func>
 8008c24:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c2c:	b10d      	cbz	r5, 8008c32 <__d2b+0x32>
 8008c2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c32:	9301      	str	r3, [sp, #4]
 8008c34:	f1b8 0300 	subs.w	r3, r8, #0
 8008c38:	d023      	beq.n	8008c82 <__d2b+0x82>
 8008c3a:	4668      	mov	r0, sp
 8008c3c:	9300      	str	r3, [sp, #0]
 8008c3e:	f7ff fd7c 	bl	800873a <__lo0bits>
 8008c42:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c46:	b1d0      	cbz	r0, 8008c7e <__d2b+0x7e>
 8008c48:	f1c0 0320 	rsb	r3, r0, #32
 8008c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c50:	430b      	orrs	r3, r1
 8008c52:	40c2      	lsrs	r2, r0
 8008c54:	6163      	str	r3, [r4, #20]
 8008c56:	9201      	str	r2, [sp, #4]
 8008c58:	9b01      	ldr	r3, [sp, #4]
 8008c5a:	61a3      	str	r3, [r4, #24]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	bf0c      	ite	eq
 8008c60:	2201      	moveq	r2, #1
 8008c62:	2202      	movne	r2, #2
 8008c64:	6122      	str	r2, [r4, #16]
 8008c66:	b1a5      	cbz	r5, 8008c92 <__d2b+0x92>
 8008c68:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008c6c:	4405      	add	r5, r0
 8008c6e:	603d      	str	r5, [r7, #0]
 8008c70:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008c74:	6030      	str	r0, [r6, #0]
 8008c76:	4620      	mov	r0, r4
 8008c78:	b003      	add	sp, #12
 8008c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c7e:	6161      	str	r1, [r4, #20]
 8008c80:	e7ea      	b.n	8008c58 <__d2b+0x58>
 8008c82:	a801      	add	r0, sp, #4
 8008c84:	f7ff fd59 	bl	800873a <__lo0bits>
 8008c88:	9b01      	ldr	r3, [sp, #4]
 8008c8a:	6163      	str	r3, [r4, #20]
 8008c8c:	3020      	adds	r0, #32
 8008c8e:	2201      	movs	r2, #1
 8008c90:	e7e8      	b.n	8008c64 <__d2b+0x64>
 8008c92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008c9a:	6038      	str	r0, [r7, #0]
 8008c9c:	6918      	ldr	r0, [r3, #16]
 8008c9e:	f7ff fd2d 	bl	80086fc <__hi0bits>
 8008ca2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ca6:	e7e5      	b.n	8008c74 <__d2b+0x74>
 8008ca8:	08009e98 	.word	0x08009e98
 8008cac:	08009ea9 	.word	0x08009ea9

08008cb0 <_malloc_usable_size_r>:
 8008cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cb4:	1f18      	subs	r0, r3, #4
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	bfbc      	itt	lt
 8008cba:	580b      	ldrlt	r3, [r1, r0]
 8008cbc:	18c0      	addlt	r0, r0, r3
 8008cbe:	4770      	bx	lr

08008cc0 <__ssputs_r>:
 8008cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc4:	688e      	ldr	r6, [r1, #8]
 8008cc6:	461f      	mov	r7, r3
 8008cc8:	42be      	cmp	r6, r7
 8008cca:	680b      	ldr	r3, [r1, #0]
 8008ccc:	4682      	mov	sl, r0
 8008cce:	460c      	mov	r4, r1
 8008cd0:	4690      	mov	r8, r2
 8008cd2:	d82d      	bhi.n	8008d30 <__ssputs_r+0x70>
 8008cd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008cd8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008cdc:	d026      	beq.n	8008d2c <__ssputs_r+0x6c>
 8008cde:	6965      	ldr	r5, [r4, #20]
 8008ce0:	6909      	ldr	r1, [r1, #16]
 8008ce2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ce6:	eba3 0901 	sub.w	r9, r3, r1
 8008cea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cee:	1c7b      	adds	r3, r7, #1
 8008cf0:	444b      	add	r3, r9
 8008cf2:	106d      	asrs	r5, r5, #1
 8008cf4:	429d      	cmp	r5, r3
 8008cf6:	bf38      	it	cc
 8008cf8:	461d      	movcc	r5, r3
 8008cfa:	0553      	lsls	r3, r2, #21
 8008cfc:	d527      	bpl.n	8008d4e <__ssputs_r+0x8e>
 8008cfe:	4629      	mov	r1, r5
 8008d00:	f7fd fed4 	bl	8006aac <_malloc_r>
 8008d04:	4606      	mov	r6, r0
 8008d06:	b360      	cbz	r0, 8008d62 <__ssputs_r+0xa2>
 8008d08:	6921      	ldr	r1, [r4, #16]
 8008d0a:	464a      	mov	r2, r9
 8008d0c:	f7fe fda9 	bl	8007862 <memcpy>
 8008d10:	89a3      	ldrh	r3, [r4, #12]
 8008d12:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d1a:	81a3      	strh	r3, [r4, #12]
 8008d1c:	6126      	str	r6, [r4, #16]
 8008d1e:	6165      	str	r5, [r4, #20]
 8008d20:	444e      	add	r6, r9
 8008d22:	eba5 0509 	sub.w	r5, r5, r9
 8008d26:	6026      	str	r6, [r4, #0]
 8008d28:	60a5      	str	r5, [r4, #8]
 8008d2a:	463e      	mov	r6, r7
 8008d2c:	42be      	cmp	r6, r7
 8008d2e:	d900      	bls.n	8008d32 <__ssputs_r+0x72>
 8008d30:	463e      	mov	r6, r7
 8008d32:	6820      	ldr	r0, [r4, #0]
 8008d34:	4632      	mov	r2, r6
 8008d36:	4641      	mov	r1, r8
 8008d38:	f000 f9c6 	bl	80090c8 <memmove>
 8008d3c:	68a3      	ldr	r3, [r4, #8]
 8008d3e:	1b9b      	subs	r3, r3, r6
 8008d40:	60a3      	str	r3, [r4, #8]
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	4433      	add	r3, r6
 8008d46:	6023      	str	r3, [r4, #0]
 8008d48:	2000      	movs	r0, #0
 8008d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d4e:	462a      	mov	r2, r5
 8008d50:	f7fd ff38 	bl	8006bc4 <_realloc_r>
 8008d54:	4606      	mov	r6, r0
 8008d56:	2800      	cmp	r0, #0
 8008d58:	d1e0      	bne.n	8008d1c <__ssputs_r+0x5c>
 8008d5a:	6921      	ldr	r1, [r4, #16]
 8008d5c:	4650      	mov	r0, sl
 8008d5e:	f7ff fbdb 	bl	8008518 <_free_r>
 8008d62:	230c      	movs	r3, #12
 8008d64:	f8ca 3000 	str.w	r3, [sl]
 8008d68:	89a3      	ldrh	r3, [r4, #12]
 8008d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d6e:	81a3      	strh	r3, [r4, #12]
 8008d70:	f04f 30ff 	mov.w	r0, #4294967295
 8008d74:	e7e9      	b.n	8008d4a <__ssputs_r+0x8a>
	...

08008d78 <_svfiprintf_r>:
 8008d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d7c:	4698      	mov	r8, r3
 8008d7e:	898b      	ldrh	r3, [r1, #12]
 8008d80:	061b      	lsls	r3, r3, #24
 8008d82:	b09d      	sub	sp, #116	@ 0x74
 8008d84:	4607      	mov	r7, r0
 8008d86:	460d      	mov	r5, r1
 8008d88:	4614      	mov	r4, r2
 8008d8a:	d510      	bpl.n	8008dae <_svfiprintf_r+0x36>
 8008d8c:	690b      	ldr	r3, [r1, #16]
 8008d8e:	b973      	cbnz	r3, 8008dae <_svfiprintf_r+0x36>
 8008d90:	2140      	movs	r1, #64	@ 0x40
 8008d92:	f7fd fe8b 	bl	8006aac <_malloc_r>
 8008d96:	6028      	str	r0, [r5, #0]
 8008d98:	6128      	str	r0, [r5, #16]
 8008d9a:	b930      	cbnz	r0, 8008daa <_svfiprintf_r+0x32>
 8008d9c:	230c      	movs	r3, #12
 8008d9e:	603b      	str	r3, [r7, #0]
 8008da0:	f04f 30ff 	mov.w	r0, #4294967295
 8008da4:	b01d      	add	sp, #116	@ 0x74
 8008da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008daa:	2340      	movs	r3, #64	@ 0x40
 8008dac:	616b      	str	r3, [r5, #20]
 8008dae:	2300      	movs	r3, #0
 8008db0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008db2:	2320      	movs	r3, #32
 8008db4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008db8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dbc:	2330      	movs	r3, #48	@ 0x30
 8008dbe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f5c <_svfiprintf_r+0x1e4>
 8008dc2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008dc6:	f04f 0901 	mov.w	r9, #1
 8008dca:	4623      	mov	r3, r4
 8008dcc:	469a      	mov	sl, r3
 8008dce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dd2:	b10a      	cbz	r2, 8008dd8 <_svfiprintf_r+0x60>
 8008dd4:	2a25      	cmp	r2, #37	@ 0x25
 8008dd6:	d1f9      	bne.n	8008dcc <_svfiprintf_r+0x54>
 8008dd8:	ebba 0b04 	subs.w	fp, sl, r4
 8008ddc:	d00b      	beq.n	8008df6 <_svfiprintf_r+0x7e>
 8008dde:	465b      	mov	r3, fp
 8008de0:	4622      	mov	r2, r4
 8008de2:	4629      	mov	r1, r5
 8008de4:	4638      	mov	r0, r7
 8008de6:	f7ff ff6b 	bl	8008cc0 <__ssputs_r>
 8008dea:	3001      	adds	r0, #1
 8008dec:	f000 80a7 	beq.w	8008f3e <_svfiprintf_r+0x1c6>
 8008df0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008df2:	445a      	add	r2, fp
 8008df4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008df6:	f89a 3000 	ldrb.w	r3, [sl]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	f000 809f 	beq.w	8008f3e <_svfiprintf_r+0x1c6>
 8008e00:	2300      	movs	r3, #0
 8008e02:	f04f 32ff 	mov.w	r2, #4294967295
 8008e06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e0a:	f10a 0a01 	add.w	sl, sl, #1
 8008e0e:	9304      	str	r3, [sp, #16]
 8008e10:	9307      	str	r3, [sp, #28]
 8008e12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e16:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e18:	4654      	mov	r4, sl
 8008e1a:	2205      	movs	r2, #5
 8008e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e20:	484e      	ldr	r0, [pc, #312]	@ (8008f5c <_svfiprintf_r+0x1e4>)
 8008e22:	f7f7 f9d5 	bl	80001d0 <memchr>
 8008e26:	9a04      	ldr	r2, [sp, #16]
 8008e28:	b9d8      	cbnz	r0, 8008e62 <_svfiprintf_r+0xea>
 8008e2a:	06d0      	lsls	r0, r2, #27
 8008e2c:	bf44      	itt	mi
 8008e2e:	2320      	movmi	r3, #32
 8008e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e34:	0711      	lsls	r1, r2, #28
 8008e36:	bf44      	itt	mi
 8008e38:	232b      	movmi	r3, #43	@ 0x2b
 8008e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8008e42:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e44:	d015      	beq.n	8008e72 <_svfiprintf_r+0xfa>
 8008e46:	9a07      	ldr	r2, [sp, #28]
 8008e48:	4654      	mov	r4, sl
 8008e4a:	2000      	movs	r0, #0
 8008e4c:	f04f 0c0a 	mov.w	ip, #10
 8008e50:	4621      	mov	r1, r4
 8008e52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e56:	3b30      	subs	r3, #48	@ 0x30
 8008e58:	2b09      	cmp	r3, #9
 8008e5a:	d94b      	bls.n	8008ef4 <_svfiprintf_r+0x17c>
 8008e5c:	b1b0      	cbz	r0, 8008e8c <_svfiprintf_r+0x114>
 8008e5e:	9207      	str	r2, [sp, #28]
 8008e60:	e014      	b.n	8008e8c <_svfiprintf_r+0x114>
 8008e62:	eba0 0308 	sub.w	r3, r0, r8
 8008e66:	fa09 f303 	lsl.w	r3, r9, r3
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	9304      	str	r3, [sp, #16]
 8008e6e:	46a2      	mov	sl, r4
 8008e70:	e7d2      	b.n	8008e18 <_svfiprintf_r+0xa0>
 8008e72:	9b03      	ldr	r3, [sp, #12]
 8008e74:	1d19      	adds	r1, r3, #4
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	9103      	str	r1, [sp, #12]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	bfbb      	ittet	lt
 8008e7e:	425b      	neglt	r3, r3
 8008e80:	f042 0202 	orrlt.w	r2, r2, #2
 8008e84:	9307      	strge	r3, [sp, #28]
 8008e86:	9307      	strlt	r3, [sp, #28]
 8008e88:	bfb8      	it	lt
 8008e8a:	9204      	strlt	r2, [sp, #16]
 8008e8c:	7823      	ldrb	r3, [r4, #0]
 8008e8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e90:	d10a      	bne.n	8008ea8 <_svfiprintf_r+0x130>
 8008e92:	7863      	ldrb	r3, [r4, #1]
 8008e94:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e96:	d132      	bne.n	8008efe <_svfiprintf_r+0x186>
 8008e98:	9b03      	ldr	r3, [sp, #12]
 8008e9a:	1d1a      	adds	r2, r3, #4
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	9203      	str	r2, [sp, #12]
 8008ea0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ea4:	3402      	adds	r4, #2
 8008ea6:	9305      	str	r3, [sp, #20]
 8008ea8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f6c <_svfiprintf_r+0x1f4>
 8008eac:	7821      	ldrb	r1, [r4, #0]
 8008eae:	2203      	movs	r2, #3
 8008eb0:	4650      	mov	r0, sl
 8008eb2:	f7f7 f98d 	bl	80001d0 <memchr>
 8008eb6:	b138      	cbz	r0, 8008ec8 <_svfiprintf_r+0x150>
 8008eb8:	9b04      	ldr	r3, [sp, #16]
 8008eba:	eba0 000a 	sub.w	r0, r0, sl
 8008ebe:	2240      	movs	r2, #64	@ 0x40
 8008ec0:	4082      	lsls	r2, r0
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	3401      	adds	r4, #1
 8008ec6:	9304      	str	r3, [sp, #16]
 8008ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ecc:	4824      	ldr	r0, [pc, #144]	@ (8008f60 <_svfiprintf_r+0x1e8>)
 8008ece:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ed2:	2206      	movs	r2, #6
 8008ed4:	f7f7 f97c 	bl	80001d0 <memchr>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d036      	beq.n	8008f4a <_svfiprintf_r+0x1d2>
 8008edc:	4b21      	ldr	r3, [pc, #132]	@ (8008f64 <_svfiprintf_r+0x1ec>)
 8008ede:	bb1b      	cbnz	r3, 8008f28 <_svfiprintf_r+0x1b0>
 8008ee0:	9b03      	ldr	r3, [sp, #12]
 8008ee2:	3307      	adds	r3, #7
 8008ee4:	f023 0307 	bic.w	r3, r3, #7
 8008ee8:	3308      	adds	r3, #8
 8008eea:	9303      	str	r3, [sp, #12]
 8008eec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eee:	4433      	add	r3, r6
 8008ef0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ef2:	e76a      	b.n	8008dca <_svfiprintf_r+0x52>
 8008ef4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ef8:	460c      	mov	r4, r1
 8008efa:	2001      	movs	r0, #1
 8008efc:	e7a8      	b.n	8008e50 <_svfiprintf_r+0xd8>
 8008efe:	2300      	movs	r3, #0
 8008f00:	3401      	adds	r4, #1
 8008f02:	9305      	str	r3, [sp, #20]
 8008f04:	4619      	mov	r1, r3
 8008f06:	f04f 0c0a 	mov.w	ip, #10
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f10:	3a30      	subs	r2, #48	@ 0x30
 8008f12:	2a09      	cmp	r2, #9
 8008f14:	d903      	bls.n	8008f1e <_svfiprintf_r+0x1a6>
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d0c6      	beq.n	8008ea8 <_svfiprintf_r+0x130>
 8008f1a:	9105      	str	r1, [sp, #20]
 8008f1c:	e7c4      	b.n	8008ea8 <_svfiprintf_r+0x130>
 8008f1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f22:	4604      	mov	r4, r0
 8008f24:	2301      	movs	r3, #1
 8008f26:	e7f0      	b.n	8008f0a <_svfiprintf_r+0x192>
 8008f28:	ab03      	add	r3, sp, #12
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	462a      	mov	r2, r5
 8008f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8008f68 <_svfiprintf_r+0x1f0>)
 8008f30:	a904      	add	r1, sp, #16
 8008f32:	4638      	mov	r0, r7
 8008f34:	f7fd ff14 	bl	8006d60 <_printf_float>
 8008f38:	1c42      	adds	r2, r0, #1
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	d1d6      	bne.n	8008eec <_svfiprintf_r+0x174>
 8008f3e:	89ab      	ldrh	r3, [r5, #12]
 8008f40:	065b      	lsls	r3, r3, #25
 8008f42:	f53f af2d 	bmi.w	8008da0 <_svfiprintf_r+0x28>
 8008f46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f48:	e72c      	b.n	8008da4 <_svfiprintf_r+0x2c>
 8008f4a:	ab03      	add	r3, sp, #12
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	462a      	mov	r2, r5
 8008f50:	4b05      	ldr	r3, [pc, #20]	@ (8008f68 <_svfiprintf_r+0x1f0>)
 8008f52:	a904      	add	r1, sp, #16
 8008f54:	4638      	mov	r0, r7
 8008f56:	f7fe f99b 	bl	8007290 <_printf_i>
 8008f5a:	e7ed      	b.n	8008f38 <_svfiprintf_r+0x1c0>
 8008f5c:	0800a000 	.word	0x0800a000
 8008f60:	0800a00a 	.word	0x0800a00a
 8008f64:	08006d61 	.word	0x08006d61
 8008f68:	08008cc1 	.word	0x08008cc1
 8008f6c:	0800a006 	.word	0x0800a006

08008f70 <__sflush_r>:
 8008f70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f78:	0716      	lsls	r6, r2, #28
 8008f7a:	4605      	mov	r5, r0
 8008f7c:	460c      	mov	r4, r1
 8008f7e:	d454      	bmi.n	800902a <__sflush_r+0xba>
 8008f80:	684b      	ldr	r3, [r1, #4]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	dc02      	bgt.n	8008f8c <__sflush_r+0x1c>
 8008f86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	dd48      	ble.n	800901e <__sflush_r+0xae>
 8008f8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f8e:	2e00      	cmp	r6, #0
 8008f90:	d045      	beq.n	800901e <__sflush_r+0xae>
 8008f92:	2300      	movs	r3, #0
 8008f94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f98:	682f      	ldr	r7, [r5, #0]
 8008f9a:	6a21      	ldr	r1, [r4, #32]
 8008f9c:	602b      	str	r3, [r5, #0]
 8008f9e:	d030      	beq.n	8009002 <__sflush_r+0x92>
 8008fa0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	0759      	lsls	r1, r3, #29
 8008fa6:	d505      	bpl.n	8008fb4 <__sflush_r+0x44>
 8008fa8:	6863      	ldr	r3, [r4, #4]
 8008faa:	1ad2      	subs	r2, r2, r3
 8008fac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008fae:	b10b      	cbz	r3, 8008fb4 <__sflush_r+0x44>
 8008fb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008fb2:	1ad2      	subs	r2, r2, r3
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fb8:	6a21      	ldr	r1, [r4, #32]
 8008fba:	4628      	mov	r0, r5
 8008fbc:	47b0      	blx	r6
 8008fbe:	1c43      	adds	r3, r0, #1
 8008fc0:	89a3      	ldrh	r3, [r4, #12]
 8008fc2:	d106      	bne.n	8008fd2 <__sflush_r+0x62>
 8008fc4:	6829      	ldr	r1, [r5, #0]
 8008fc6:	291d      	cmp	r1, #29
 8008fc8:	d82b      	bhi.n	8009022 <__sflush_r+0xb2>
 8008fca:	4a2a      	ldr	r2, [pc, #168]	@ (8009074 <__sflush_r+0x104>)
 8008fcc:	410a      	asrs	r2, r1
 8008fce:	07d6      	lsls	r6, r2, #31
 8008fd0:	d427      	bmi.n	8009022 <__sflush_r+0xb2>
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	6062      	str	r2, [r4, #4]
 8008fd6:	04d9      	lsls	r1, r3, #19
 8008fd8:	6922      	ldr	r2, [r4, #16]
 8008fda:	6022      	str	r2, [r4, #0]
 8008fdc:	d504      	bpl.n	8008fe8 <__sflush_r+0x78>
 8008fde:	1c42      	adds	r2, r0, #1
 8008fe0:	d101      	bne.n	8008fe6 <__sflush_r+0x76>
 8008fe2:	682b      	ldr	r3, [r5, #0]
 8008fe4:	b903      	cbnz	r3, 8008fe8 <__sflush_r+0x78>
 8008fe6:	6560      	str	r0, [r4, #84]	@ 0x54
 8008fe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fea:	602f      	str	r7, [r5, #0]
 8008fec:	b1b9      	cbz	r1, 800901e <__sflush_r+0xae>
 8008fee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ff2:	4299      	cmp	r1, r3
 8008ff4:	d002      	beq.n	8008ffc <__sflush_r+0x8c>
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	f7ff fa8e 	bl	8008518 <_free_r>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	6363      	str	r3, [r4, #52]	@ 0x34
 8009000:	e00d      	b.n	800901e <__sflush_r+0xae>
 8009002:	2301      	movs	r3, #1
 8009004:	4628      	mov	r0, r5
 8009006:	47b0      	blx	r6
 8009008:	4602      	mov	r2, r0
 800900a:	1c50      	adds	r0, r2, #1
 800900c:	d1c9      	bne.n	8008fa2 <__sflush_r+0x32>
 800900e:	682b      	ldr	r3, [r5, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d0c6      	beq.n	8008fa2 <__sflush_r+0x32>
 8009014:	2b1d      	cmp	r3, #29
 8009016:	d001      	beq.n	800901c <__sflush_r+0xac>
 8009018:	2b16      	cmp	r3, #22
 800901a:	d11e      	bne.n	800905a <__sflush_r+0xea>
 800901c:	602f      	str	r7, [r5, #0]
 800901e:	2000      	movs	r0, #0
 8009020:	e022      	b.n	8009068 <__sflush_r+0xf8>
 8009022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009026:	b21b      	sxth	r3, r3
 8009028:	e01b      	b.n	8009062 <__sflush_r+0xf2>
 800902a:	690f      	ldr	r7, [r1, #16]
 800902c:	2f00      	cmp	r7, #0
 800902e:	d0f6      	beq.n	800901e <__sflush_r+0xae>
 8009030:	0793      	lsls	r3, r2, #30
 8009032:	680e      	ldr	r6, [r1, #0]
 8009034:	bf08      	it	eq
 8009036:	694b      	ldreq	r3, [r1, #20]
 8009038:	600f      	str	r7, [r1, #0]
 800903a:	bf18      	it	ne
 800903c:	2300      	movne	r3, #0
 800903e:	eba6 0807 	sub.w	r8, r6, r7
 8009042:	608b      	str	r3, [r1, #8]
 8009044:	f1b8 0f00 	cmp.w	r8, #0
 8009048:	dde9      	ble.n	800901e <__sflush_r+0xae>
 800904a:	6a21      	ldr	r1, [r4, #32]
 800904c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800904e:	4643      	mov	r3, r8
 8009050:	463a      	mov	r2, r7
 8009052:	4628      	mov	r0, r5
 8009054:	47b0      	blx	r6
 8009056:	2800      	cmp	r0, #0
 8009058:	dc08      	bgt.n	800906c <__sflush_r+0xfc>
 800905a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800905e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009062:	81a3      	strh	r3, [r4, #12]
 8009064:	f04f 30ff 	mov.w	r0, #4294967295
 8009068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800906c:	4407      	add	r7, r0
 800906e:	eba8 0800 	sub.w	r8, r8, r0
 8009072:	e7e7      	b.n	8009044 <__sflush_r+0xd4>
 8009074:	dfbffffe 	.word	0xdfbffffe

08009078 <_fflush_r>:
 8009078:	b538      	push	{r3, r4, r5, lr}
 800907a:	690b      	ldr	r3, [r1, #16]
 800907c:	4605      	mov	r5, r0
 800907e:	460c      	mov	r4, r1
 8009080:	b913      	cbnz	r3, 8009088 <_fflush_r+0x10>
 8009082:	2500      	movs	r5, #0
 8009084:	4628      	mov	r0, r5
 8009086:	bd38      	pop	{r3, r4, r5, pc}
 8009088:	b118      	cbz	r0, 8009092 <_fflush_r+0x1a>
 800908a:	6a03      	ldr	r3, [r0, #32]
 800908c:	b90b      	cbnz	r3, 8009092 <_fflush_r+0x1a>
 800908e:	f7fe faab 	bl	80075e8 <__sinit>
 8009092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d0f3      	beq.n	8009082 <_fflush_r+0xa>
 800909a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800909c:	07d0      	lsls	r0, r2, #31
 800909e:	d404      	bmi.n	80090aa <_fflush_r+0x32>
 80090a0:	0599      	lsls	r1, r3, #22
 80090a2:	d402      	bmi.n	80090aa <_fflush_r+0x32>
 80090a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090a6:	f7fe fbda 	bl	800785e <__retarget_lock_acquire_recursive>
 80090aa:	4628      	mov	r0, r5
 80090ac:	4621      	mov	r1, r4
 80090ae:	f7ff ff5f 	bl	8008f70 <__sflush_r>
 80090b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80090b4:	07da      	lsls	r2, r3, #31
 80090b6:	4605      	mov	r5, r0
 80090b8:	d4e4      	bmi.n	8009084 <_fflush_r+0xc>
 80090ba:	89a3      	ldrh	r3, [r4, #12]
 80090bc:	059b      	lsls	r3, r3, #22
 80090be:	d4e1      	bmi.n	8009084 <_fflush_r+0xc>
 80090c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090c2:	f7fe fbcd 	bl	8007860 <__retarget_lock_release_recursive>
 80090c6:	e7dd      	b.n	8009084 <_fflush_r+0xc>

080090c8 <memmove>:
 80090c8:	4288      	cmp	r0, r1
 80090ca:	b510      	push	{r4, lr}
 80090cc:	eb01 0402 	add.w	r4, r1, r2
 80090d0:	d902      	bls.n	80090d8 <memmove+0x10>
 80090d2:	4284      	cmp	r4, r0
 80090d4:	4623      	mov	r3, r4
 80090d6:	d807      	bhi.n	80090e8 <memmove+0x20>
 80090d8:	1e43      	subs	r3, r0, #1
 80090da:	42a1      	cmp	r1, r4
 80090dc:	d008      	beq.n	80090f0 <memmove+0x28>
 80090de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090e6:	e7f8      	b.n	80090da <memmove+0x12>
 80090e8:	4402      	add	r2, r0
 80090ea:	4601      	mov	r1, r0
 80090ec:	428a      	cmp	r2, r1
 80090ee:	d100      	bne.n	80090f2 <memmove+0x2a>
 80090f0:	bd10      	pop	{r4, pc}
 80090f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090fa:	e7f7      	b.n	80090ec <memmove+0x24>

080090fc <__assert_func>:
 80090fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090fe:	4614      	mov	r4, r2
 8009100:	461a      	mov	r2, r3
 8009102:	4b09      	ldr	r3, [pc, #36]	@ (8009128 <__assert_func+0x2c>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4605      	mov	r5, r0
 8009108:	68d8      	ldr	r0, [r3, #12]
 800910a:	b954      	cbnz	r4, 8009122 <__assert_func+0x26>
 800910c:	4b07      	ldr	r3, [pc, #28]	@ (800912c <__assert_func+0x30>)
 800910e:	461c      	mov	r4, r3
 8009110:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009114:	9100      	str	r1, [sp, #0]
 8009116:	462b      	mov	r3, r5
 8009118:	4905      	ldr	r1, [pc, #20]	@ (8009130 <__assert_func+0x34>)
 800911a:	f000 f841 	bl	80091a0 <fiprintf>
 800911e:	f000 f851 	bl	80091c4 <abort>
 8009122:	4b04      	ldr	r3, [pc, #16]	@ (8009134 <__assert_func+0x38>)
 8009124:	e7f4      	b.n	8009110 <__assert_func+0x14>
 8009126:	bf00      	nop
 8009128:	200006cc 	.word	0x200006cc
 800912c:	0800a056 	.word	0x0800a056
 8009130:	0800a028 	.word	0x0800a028
 8009134:	0800a01b 	.word	0x0800a01b

08009138 <_calloc_r>:
 8009138:	b570      	push	{r4, r5, r6, lr}
 800913a:	fba1 5402 	umull	r5, r4, r1, r2
 800913e:	b93c      	cbnz	r4, 8009150 <_calloc_r+0x18>
 8009140:	4629      	mov	r1, r5
 8009142:	f7fd fcb3 	bl	8006aac <_malloc_r>
 8009146:	4606      	mov	r6, r0
 8009148:	b928      	cbnz	r0, 8009156 <_calloc_r+0x1e>
 800914a:	2600      	movs	r6, #0
 800914c:	4630      	mov	r0, r6
 800914e:	bd70      	pop	{r4, r5, r6, pc}
 8009150:	220c      	movs	r2, #12
 8009152:	6002      	str	r2, [r0, #0]
 8009154:	e7f9      	b.n	800914a <_calloc_r+0x12>
 8009156:	462a      	mov	r2, r5
 8009158:	4621      	mov	r1, r4
 800915a:	f7fe faf2 	bl	8007742 <memset>
 800915e:	e7f5      	b.n	800914c <_calloc_r+0x14>

08009160 <__ascii_mbtowc>:
 8009160:	b082      	sub	sp, #8
 8009162:	b901      	cbnz	r1, 8009166 <__ascii_mbtowc+0x6>
 8009164:	a901      	add	r1, sp, #4
 8009166:	b142      	cbz	r2, 800917a <__ascii_mbtowc+0x1a>
 8009168:	b14b      	cbz	r3, 800917e <__ascii_mbtowc+0x1e>
 800916a:	7813      	ldrb	r3, [r2, #0]
 800916c:	600b      	str	r3, [r1, #0]
 800916e:	7812      	ldrb	r2, [r2, #0]
 8009170:	1e10      	subs	r0, r2, #0
 8009172:	bf18      	it	ne
 8009174:	2001      	movne	r0, #1
 8009176:	b002      	add	sp, #8
 8009178:	4770      	bx	lr
 800917a:	4610      	mov	r0, r2
 800917c:	e7fb      	b.n	8009176 <__ascii_mbtowc+0x16>
 800917e:	f06f 0001 	mvn.w	r0, #1
 8009182:	e7f8      	b.n	8009176 <__ascii_mbtowc+0x16>

08009184 <__ascii_wctomb>:
 8009184:	4603      	mov	r3, r0
 8009186:	4608      	mov	r0, r1
 8009188:	b141      	cbz	r1, 800919c <__ascii_wctomb+0x18>
 800918a:	2aff      	cmp	r2, #255	@ 0xff
 800918c:	d904      	bls.n	8009198 <__ascii_wctomb+0x14>
 800918e:	228a      	movs	r2, #138	@ 0x8a
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	f04f 30ff 	mov.w	r0, #4294967295
 8009196:	4770      	bx	lr
 8009198:	700a      	strb	r2, [r1, #0]
 800919a:	2001      	movs	r0, #1
 800919c:	4770      	bx	lr
	...

080091a0 <fiprintf>:
 80091a0:	b40e      	push	{r1, r2, r3}
 80091a2:	b503      	push	{r0, r1, lr}
 80091a4:	4601      	mov	r1, r0
 80091a6:	ab03      	add	r3, sp, #12
 80091a8:	4805      	ldr	r0, [pc, #20]	@ (80091c0 <fiprintf+0x20>)
 80091aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ae:	6800      	ldr	r0, [r0, #0]
 80091b0:	9301      	str	r3, [sp, #4]
 80091b2:	f000 f837 	bl	8009224 <_vfiprintf_r>
 80091b6:	b002      	add	sp, #8
 80091b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80091bc:	b003      	add	sp, #12
 80091be:	4770      	bx	lr
 80091c0:	200006cc 	.word	0x200006cc

080091c4 <abort>:
 80091c4:	b508      	push	{r3, lr}
 80091c6:	2006      	movs	r0, #6
 80091c8:	f000 fa00 	bl	80095cc <raise>
 80091cc:	2001      	movs	r0, #1
 80091ce:	f000 fadd 	bl	800978c <_exit>

080091d2 <__sfputc_r>:
 80091d2:	6893      	ldr	r3, [r2, #8]
 80091d4:	3b01      	subs	r3, #1
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	b410      	push	{r4}
 80091da:	6093      	str	r3, [r2, #8]
 80091dc:	da08      	bge.n	80091f0 <__sfputc_r+0x1e>
 80091de:	6994      	ldr	r4, [r2, #24]
 80091e0:	42a3      	cmp	r3, r4
 80091e2:	db01      	blt.n	80091e8 <__sfputc_r+0x16>
 80091e4:	290a      	cmp	r1, #10
 80091e6:	d103      	bne.n	80091f0 <__sfputc_r+0x1e>
 80091e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091ec:	f000 b932 	b.w	8009454 <__swbuf_r>
 80091f0:	6813      	ldr	r3, [r2, #0]
 80091f2:	1c58      	adds	r0, r3, #1
 80091f4:	6010      	str	r0, [r2, #0]
 80091f6:	7019      	strb	r1, [r3, #0]
 80091f8:	4608      	mov	r0, r1
 80091fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <__sfputs_r>:
 8009200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009202:	4606      	mov	r6, r0
 8009204:	460f      	mov	r7, r1
 8009206:	4614      	mov	r4, r2
 8009208:	18d5      	adds	r5, r2, r3
 800920a:	42ac      	cmp	r4, r5
 800920c:	d101      	bne.n	8009212 <__sfputs_r+0x12>
 800920e:	2000      	movs	r0, #0
 8009210:	e007      	b.n	8009222 <__sfputs_r+0x22>
 8009212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009216:	463a      	mov	r2, r7
 8009218:	4630      	mov	r0, r6
 800921a:	f7ff ffda 	bl	80091d2 <__sfputc_r>
 800921e:	1c43      	adds	r3, r0, #1
 8009220:	d1f3      	bne.n	800920a <__sfputs_r+0xa>
 8009222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009224 <_vfiprintf_r>:
 8009224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009228:	460d      	mov	r5, r1
 800922a:	b09d      	sub	sp, #116	@ 0x74
 800922c:	4614      	mov	r4, r2
 800922e:	4698      	mov	r8, r3
 8009230:	4606      	mov	r6, r0
 8009232:	b118      	cbz	r0, 800923c <_vfiprintf_r+0x18>
 8009234:	6a03      	ldr	r3, [r0, #32]
 8009236:	b90b      	cbnz	r3, 800923c <_vfiprintf_r+0x18>
 8009238:	f7fe f9d6 	bl	80075e8 <__sinit>
 800923c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800923e:	07d9      	lsls	r1, r3, #31
 8009240:	d405      	bmi.n	800924e <_vfiprintf_r+0x2a>
 8009242:	89ab      	ldrh	r3, [r5, #12]
 8009244:	059a      	lsls	r2, r3, #22
 8009246:	d402      	bmi.n	800924e <_vfiprintf_r+0x2a>
 8009248:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800924a:	f7fe fb08 	bl	800785e <__retarget_lock_acquire_recursive>
 800924e:	89ab      	ldrh	r3, [r5, #12]
 8009250:	071b      	lsls	r3, r3, #28
 8009252:	d501      	bpl.n	8009258 <_vfiprintf_r+0x34>
 8009254:	692b      	ldr	r3, [r5, #16]
 8009256:	b99b      	cbnz	r3, 8009280 <_vfiprintf_r+0x5c>
 8009258:	4629      	mov	r1, r5
 800925a:	4630      	mov	r0, r6
 800925c:	f000 f938 	bl	80094d0 <__swsetup_r>
 8009260:	b170      	cbz	r0, 8009280 <_vfiprintf_r+0x5c>
 8009262:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009264:	07dc      	lsls	r4, r3, #31
 8009266:	d504      	bpl.n	8009272 <_vfiprintf_r+0x4e>
 8009268:	f04f 30ff 	mov.w	r0, #4294967295
 800926c:	b01d      	add	sp, #116	@ 0x74
 800926e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009272:	89ab      	ldrh	r3, [r5, #12]
 8009274:	0598      	lsls	r0, r3, #22
 8009276:	d4f7      	bmi.n	8009268 <_vfiprintf_r+0x44>
 8009278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800927a:	f7fe faf1 	bl	8007860 <__retarget_lock_release_recursive>
 800927e:	e7f3      	b.n	8009268 <_vfiprintf_r+0x44>
 8009280:	2300      	movs	r3, #0
 8009282:	9309      	str	r3, [sp, #36]	@ 0x24
 8009284:	2320      	movs	r3, #32
 8009286:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800928a:	f8cd 800c 	str.w	r8, [sp, #12]
 800928e:	2330      	movs	r3, #48	@ 0x30
 8009290:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009440 <_vfiprintf_r+0x21c>
 8009294:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009298:	f04f 0901 	mov.w	r9, #1
 800929c:	4623      	mov	r3, r4
 800929e:	469a      	mov	sl, r3
 80092a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092a4:	b10a      	cbz	r2, 80092aa <_vfiprintf_r+0x86>
 80092a6:	2a25      	cmp	r2, #37	@ 0x25
 80092a8:	d1f9      	bne.n	800929e <_vfiprintf_r+0x7a>
 80092aa:	ebba 0b04 	subs.w	fp, sl, r4
 80092ae:	d00b      	beq.n	80092c8 <_vfiprintf_r+0xa4>
 80092b0:	465b      	mov	r3, fp
 80092b2:	4622      	mov	r2, r4
 80092b4:	4629      	mov	r1, r5
 80092b6:	4630      	mov	r0, r6
 80092b8:	f7ff ffa2 	bl	8009200 <__sfputs_r>
 80092bc:	3001      	adds	r0, #1
 80092be:	f000 80a7 	beq.w	8009410 <_vfiprintf_r+0x1ec>
 80092c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092c4:	445a      	add	r2, fp
 80092c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80092c8:	f89a 3000 	ldrb.w	r3, [sl]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f000 809f 	beq.w	8009410 <_vfiprintf_r+0x1ec>
 80092d2:	2300      	movs	r3, #0
 80092d4:	f04f 32ff 	mov.w	r2, #4294967295
 80092d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092dc:	f10a 0a01 	add.w	sl, sl, #1
 80092e0:	9304      	str	r3, [sp, #16]
 80092e2:	9307      	str	r3, [sp, #28]
 80092e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80092ea:	4654      	mov	r4, sl
 80092ec:	2205      	movs	r2, #5
 80092ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092f2:	4853      	ldr	r0, [pc, #332]	@ (8009440 <_vfiprintf_r+0x21c>)
 80092f4:	f7f6 ff6c 	bl	80001d0 <memchr>
 80092f8:	9a04      	ldr	r2, [sp, #16]
 80092fa:	b9d8      	cbnz	r0, 8009334 <_vfiprintf_r+0x110>
 80092fc:	06d1      	lsls	r1, r2, #27
 80092fe:	bf44      	itt	mi
 8009300:	2320      	movmi	r3, #32
 8009302:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009306:	0713      	lsls	r3, r2, #28
 8009308:	bf44      	itt	mi
 800930a:	232b      	movmi	r3, #43	@ 0x2b
 800930c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009310:	f89a 3000 	ldrb.w	r3, [sl]
 8009314:	2b2a      	cmp	r3, #42	@ 0x2a
 8009316:	d015      	beq.n	8009344 <_vfiprintf_r+0x120>
 8009318:	9a07      	ldr	r2, [sp, #28]
 800931a:	4654      	mov	r4, sl
 800931c:	2000      	movs	r0, #0
 800931e:	f04f 0c0a 	mov.w	ip, #10
 8009322:	4621      	mov	r1, r4
 8009324:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009328:	3b30      	subs	r3, #48	@ 0x30
 800932a:	2b09      	cmp	r3, #9
 800932c:	d94b      	bls.n	80093c6 <_vfiprintf_r+0x1a2>
 800932e:	b1b0      	cbz	r0, 800935e <_vfiprintf_r+0x13a>
 8009330:	9207      	str	r2, [sp, #28]
 8009332:	e014      	b.n	800935e <_vfiprintf_r+0x13a>
 8009334:	eba0 0308 	sub.w	r3, r0, r8
 8009338:	fa09 f303 	lsl.w	r3, r9, r3
 800933c:	4313      	orrs	r3, r2
 800933e:	9304      	str	r3, [sp, #16]
 8009340:	46a2      	mov	sl, r4
 8009342:	e7d2      	b.n	80092ea <_vfiprintf_r+0xc6>
 8009344:	9b03      	ldr	r3, [sp, #12]
 8009346:	1d19      	adds	r1, r3, #4
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	9103      	str	r1, [sp, #12]
 800934c:	2b00      	cmp	r3, #0
 800934e:	bfbb      	ittet	lt
 8009350:	425b      	neglt	r3, r3
 8009352:	f042 0202 	orrlt.w	r2, r2, #2
 8009356:	9307      	strge	r3, [sp, #28]
 8009358:	9307      	strlt	r3, [sp, #28]
 800935a:	bfb8      	it	lt
 800935c:	9204      	strlt	r2, [sp, #16]
 800935e:	7823      	ldrb	r3, [r4, #0]
 8009360:	2b2e      	cmp	r3, #46	@ 0x2e
 8009362:	d10a      	bne.n	800937a <_vfiprintf_r+0x156>
 8009364:	7863      	ldrb	r3, [r4, #1]
 8009366:	2b2a      	cmp	r3, #42	@ 0x2a
 8009368:	d132      	bne.n	80093d0 <_vfiprintf_r+0x1ac>
 800936a:	9b03      	ldr	r3, [sp, #12]
 800936c:	1d1a      	adds	r2, r3, #4
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	9203      	str	r2, [sp, #12]
 8009372:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009376:	3402      	adds	r4, #2
 8009378:	9305      	str	r3, [sp, #20]
 800937a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009450 <_vfiprintf_r+0x22c>
 800937e:	7821      	ldrb	r1, [r4, #0]
 8009380:	2203      	movs	r2, #3
 8009382:	4650      	mov	r0, sl
 8009384:	f7f6 ff24 	bl	80001d0 <memchr>
 8009388:	b138      	cbz	r0, 800939a <_vfiprintf_r+0x176>
 800938a:	9b04      	ldr	r3, [sp, #16]
 800938c:	eba0 000a 	sub.w	r0, r0, sl
 8009390:	2240      	movs	r2, #64	@ 0x40
 8009392:	4082      	lsls	r2, r0
 8009394:	4313      	orrs	r3, r2
 8009396:	3401      	adds	r4, #1
 8009398:	9304      	str	r3, [sp, #16]
 800939a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800939e:	4829      	ldr	r0, [pc, #164]	@ (8009444 <_vfiprintf_r+0x220>)
 80093a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093a4:	2206      	movs	r2, #6
 80093a6:	f7f6 ff13 	bl	80001d0 <memchr>
 80093aa:	2800      	cmp	r0, #0
 80093ac:	d03f      	beq.n	800942e <_vfiprintf_r+0x20a>
 80093ae:	4b26      	ldr	r3, [pc, #152]	@ (8009448 <_vfiprintf_r+0x224>)
 80093b0:	bb1b      	cbnz	r3, 80093fa <_vfiprintf_r+0x1d6>
 80093b2:	9b03      	ldr	r3, [sp, #12]
 80093b4:	3307      	adds	r3, #7
 80093b6:	f023 0307 	bic.w	r3, r3, #7
 80093ba:	3308      	adds	r3, #8
 80093bc:	9303      	str	r3, [sp, #12]
 80093be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093c0:	443b      	add	r3, r7
 80093c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80093c4:	e76a      	b.n	800929c <_vfiprintf_r+0x78>
 80093c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80093ca:	460c      	mov	r4, r1
 80093cc:	2001      	movs	r0, #1
 80093ce:	e7a8      	b.n	8009322 <_vfiprintf_r+0xfe>
 80093d0:	2300      	movs	r3, #0
 80093d2:	3401      	adds	r4, #1
 80093d4:	9305      	str	r3, [sp, #20]
 80093d6:	4619      	mov	r1, r3
 80093d8:	f04f 0c0a 	mov.w	ip, #10
 80093dc:	4620      	mov	r0, r4
 80093de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093e2:	3a30      	subs	r2, #48	@ 0x30
 80093e4:	2a09      	cmp	r2, #9
 80093e6:	d903      	bls.n	80093f0 <_vfiprintf_r+0x1cc>
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d0c6      	beq.n	800937a <_vfiprintf_r+0x156>
 80093ec:	9105      	str	r1, [sp, #20]
 80093ee:	e7c4      	b.n	800937a <_vfiprintf_r+0x156>
 80093f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80093f4:	4604      	mov	r4, r0
 80093f6:	2301      	movs	r3, #1
 80093f8:	e7f0      	b.n	80093dc <_vfiprintf_r+0x1b8>
 80093fa:	ab03      	add	r3, sp, #12
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	462a      	mov	r2, r5
 8009400:	4b12      	ldr	r3, [pc, #72]	@ (800944c <_vfiprintf_r+0x228>)
 8009402:	a904      	add	r1, sp, #16
 8009404:	4630      	mov	r0, r6
 8009406:	f7fd fcab 	bl	8006d60 <_printf_float>
 800940a:	4607      	mov	r7, r0
 800940c:	1c78      	adds	r0, r7, #1
 800940e:	d1d6      	bne.n	80093be <_vfiprintf_r+0x19a>
 8009410:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009412:	07d9      	lsls	r1, r3, #31
 8009414:	d405      	bmi.n	8009422 <_vfiprintf_r+0x1fe>
 8009416:	89ab      	ldrh	r3, [r5, #12]
 8009418:	059a      	lsls	r2, r3, #22
 800941a:	d402      	bmi.n	8009422 <_vfiprintf_r+0x1fe>
 800941c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800941e:	f7fe fa1f 	bl	8007860 <__retarget_lock_release_recursive>
 8009422:	89ab      	ldrh	r3, [r5, #12]
 8009424:	065b      	lsls	r3, r3, #25
 8009426:	f53f af1f 	bmi.w	8009268 <_vfiprintf_r+0x44>
 800942a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800942c:	e71e      	b.n	800926c <_vfiprintf_r+0x48>
 800942e:	ab03      	add	r3, sp, #12
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	462a      	mov	r2, r5
 8009434:	4b05      	ldr	r3, [pc, #20]	@ (800944c <_vfiprintf_r+0x228>)
 8009436:	a904      	add	r1, sp, #16
 8009438:	4630      	mov	r0, r6
 800943a:	f7fd ff29 	bl	8007290 <_printf_i>
 800943e:	e7e4      	b.n	800940a <_vfiprintf_r+0x1e6>
 8009440:	0800a000 	.word	0x0800a000
 8009444:	0800a00a 	.word	0x0800a00a
 8009448:	08006d61 	.word	0x08006d61
 800944c:	08009201 	.word	0x08009201
 8009450:	0800a006 	.word	0x0800a006

08009454 <__swbuf_r>:
 8009454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009456:	460e      	mov	r6, r1
 8009458:	4614      	mov	r4, r2
 800945a:	4605      	mov	r5, r0
 800945c:	b118      	cbz	r0, 8009466 <__swbuf_r+0x12>
 800945e:	6a03      	ldr	r3, [r0, #32]
 8009460:	b90b      	cbnz	r3, 8009466 <__swbuf_r+0x12>
 8009462:	f7fe f8c1 	bl	80075e8 <__sinit>
 8009466:	69a3      	ldr	r3, [r4, #24]
 8009468:	60a3      	str	r3, [r4, #8]
 800946a:	89a3      	ldrh	r3, [r4, #12]
 800946c:	071a      	lsls	r2, r3, #28
 800946e:	d501      	bpl.n	8009474 <__swbuf_r+0x20>
 8009470:	6923      	ldr	r3, [r4, #16]
 8009472:	b943      	cbnz	r3, 8009486 <__swbuf_r+0x32>
 8009474:	4621      	mov	r1, r4
 8009476:	4628      	mov	r0, r5
 8009478:	f000 f82a 	bl	80094d0 <__swsetup_r>
 800947c:	b118      	cbz	r0, 8009486 <__swbuf_r+0x32>
 800947e:	f04f 37ff 	mov.w	r7, #4294967295
 8009482:	4638      	mov	r0, r7
 8009484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009486:	6823      	ldr	r3, [r4, #0]
 8009488:	6922      	ldr	r2, [r4, #16]
 800948a:	1a98      	subs	r0, r3, r2
 800948c:	6963      	ldr	r3, [r4, #20]
 800948e:	b2f6      	uxtb	r6, r6
 8009490:	4283      	cmp	r3, r0
 8009492:	4637      	mov	r7, r6
 8009494:	dc05      	bgt.n	80094a2 <__swbuf_r+0x4e>
 8009496:	4621      	mov	r1, r4
 8009498:	4628      	mov	r0, r5
 800949a:	f7ff fded 	bl	8009078 <_fflush_r>
 800949e:	2800      	cmp	r0, #0
 80094a0:	d1ed      	bne.n	800947e <__swbuf_r+0x2a>
 80094a2:	68a3      	ldr	r3, [r4, #8]
 80094a4:	3b01      	subs	r3, #1
 80094a6:	60a3      	str	r3, [r4, #8]
 80094a8:	6823      	ldr	r3, [r4, #0]
 80094aa:	1c5a      	adds	r2, r3, #1
 80094ac:	6022      	str	r2, [r4, #0]
 80094ae:	701e      	strb	r6, [r3, #0]
 80094b0:	6962      	ldr	r2, [r4, #20]
 80094b2:	1c43      	adds	r3, r0, #1
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d004      	beq.n	80094c2 <__swbuf_r+0x6e>
 80094b8:	89a3      	ldrh	r3, [r4, #12]
 80094ba:	07db      	lsls	r3, r3, #31
 80094bc:	d5e1      	bpl.n	8009482 <__swbuf_r+0x2e>
 80094be:	2e0a      	cmp	r6, #10
 80094c0:	d1df      	bne.n	8009482 <__swbuf_r+0x2e>
 80094c2:	4621      	mov	r1, r4
 80094c4:	4628      	mov	r0, r5
 80094c6:	f7ff fdd7 	bl	8009078 <_fflush_r>
 80094ca:	2800      	cmp	r0, #0
 80094cc:	d0d9      	beq.n	8009482 <__swbuf_r+0x2e>
 80094ce:	e7d6      	b.n	800947e <__swbuf_r+0x2a>

080094d0 <__swsetup_r>:
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	4b29      	ldr	r3, [pc, #164]	@ (8009578 <__swsetup_r+0xa8>)
 80094d4:	4605      	mov	r5, r0
 80094d6:	6818      	ldr	r0, [r3, #0]
 80094d8:	460c      	mov	r4, r1
 80094da:	b118      	cbz	r0, 80094e4 <__swsetup_r+0x14>
 80094dc:	6a03      	ldr	r3, [r0, #32]
 80094de:	b90b      	cbnz	r3, 80094e4 <__swsetup_r+0x14>
 80094e0:	f7fe f882 	bl	80075e8 <__sinit>
 80094e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094e8:	0719      	lsls	r1, r3, #28
 80094ea:	d422      	bmi.n	8009532 <__swsetup_r+0x62>
 80094ec:	06da      	lsls	r2, r3, #27
 80094ee:	d407      	bmi.n	8009500 <__swsetup_r+0x30>
 80094f0:	2209      	movs	r2, #9
 80094f2:	602a      	str	r2, [r5, #0]
 80094f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094f8:	81a3      	strh	r3, [r4, #12]
 80094fa:	f04f 30ff 	mov.w	r0, #4294967295
 80094fe:	e033      	b.n	8009568 <__swsetup_r+0x98>
 8009500:	0758      	lsls	r0, r3, #29
 8009502:	d512      	bpl.n	800952a <__swsetup_r+0x5a>
 8009504:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009506:	b141      	cbz	r1, 800951a <__swsetup_r+0x4a>
 8009508:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800950c:	4299      	cmp	r1, r3
 800950e:	d002      	beq.n	8009516 <__swsetup_r+0x46>
 8009510:	4628      	mov	r0, r5
 8009512:	f7ff f801 	bl	8008518 <_free_r>
 8009516:	2300      	movs	r3, #0
 8009518:	6363      	str	r3, [r4, #52]	@ 0x34
 800951a:	89a3      	ldrh	r3, [r4, #12]
 800951c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009520:	81a3      	strh	r3, [r4, #12]
 8009522:	2300      	movs	r3, #0
 8009524:	6063      	str	r3, [r4, #4]
 8009526:	6923      	ldr	r3, [r4, #16]
 8009528:	6023      	str	r3, [r4, #0]
 800952a:	89a3      	ldrh	r3, [r4, #12]
 800952c:	f043 0308 	orr.w	r3, r3, #8
 8009530:	81a3      	strh	r3, [r4, #12]
 8009532:	6923      	ldr	r3, [r4, #16]
 8009534:	b94b      	cbnz	r3, 800954a <__swsetup_r+0x7a>
 8009536:	89a3      	ldrh	r3, [r4, #12]
 8009538:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800953c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009540:	d003      	beq.n	800954a <__swsetup_r+0x7a>
 8009542:	4621      	mov	r1, r4
 8009544:	4628      	mov	r0, r5
 8009546:	f000 f883 	bl	8009650 <__smakebuf_r>
 800954a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800954e:	f013 0201 	ands.w	r2, r3, #1
 8009552:	d00a      	beq.n	800956a <__swsetup_r+0x9a>
 8009554:	2200      	movs	r2, #0
 8009556:	60a2      	str	r2, [r4, #8]
 8009558:	6962      	ldr	r2, [r4, #20]
 800955a:	4252      	negs	r2, r2
 800955c:	61a2      	str	r2, [r4, #24]
 800955e:	6922      	ldr	r2, [r4, #16]
 8009560:	b942      	cbnz	r2, 8009574 <__swsetup_r+0xa4>
 8009562:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009566:	d1c5      	bne.n	80094f4 <__swsetup_r+0x24>
 8009568:	bd38      	pop	{r3, r4, r5, pc}
 800956a:	0799      	lsls	r1, r3, #30
 800956c:	bf58      	it	pl
 800956e:	6962      	ldrpl	r2, [r4, #20]
 8009570:	60a2      	str	r2, [r4, #8]
 8009572:	e7f4      	b.n	800955e <__swsetup_r+0x8e>
 8009574:	2000      	movs	r0, #0
 8009576:	e7f7      	b.n	8009568 <__swsetup_r+0x98>
 8009578:	200006cc 	.word	0x200006cc

0800957c <_raise_r>:
 800957c:	291f      	cmp	r1, #31
 800957e:	b538      	push	{r3, r4, r5, lr}
 8009580:	4605      	mov	r5, r0
 8009582:	460c      	mov	r4, r1
 8009584:	d904      	bls.n	8009590 <_raise_r+0x14>
 8009586:	2316      	movs	r3, #22
 8009588:	6003      	str	r3, [r0, #0]
 800958a:	f04f 30ff 	mov.w	r0, #4294967295
 800958e:	bd38      	pop	{r3, r4, r5, pc}
 8009590:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009592:	b112      	cbz	r2, 800959a <_raise_r+0x1e>
 8009594:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009598:	b94b      	cbnz	r3, 80095ae <_raise_r+0x32>
 800959a:	4628      	mov	r0, r5
 800959c:	f000 f830 	bl	8009600 <_getpid_r>
 80095a0:	4622      	mov	r2, r4
 80095a2:	4601      	mov	r1, r0
 80095a4:	4628      	mov	r0, r5
 80095a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095aa:	f000 b817 	b.w	80095dc <_kill_r>
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d00a      	beq.n	80095c8 <_raise_r+0x4c>
 80095b2:	1c59      	adds	r1, r3, #1
 80095b4:	d103      	bne.n	80095be <_raise_r+0x42>
 80095b6:	2316      	movs	r3, #22
 80095b8:	6003      	str	r3, [r0, #0]
 80095ba:	2001      	movs	r0, #1
 80095bc:	e7e7      	b.n	800958e <_raise_r+0x12>
 80095be:	2100      	movs	r1, #0
 80095c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80095c4:	4620      	mov	r0, r4
 80095c6:	4798      	blx	r3
 80095c8:	2000      	movs	r0, #0
 80095ca:	e7e0      	b.n	800958e <_raise_r+0x12>

080095cc <raise>:
 80095cc:	4b02      	ldr	r3, [pc, #8]	@ (80095d8 <raise+0xc>)
 80095ce:	4601      	mov	r1, r0
 80095d0:	6818      	ldr	r0, [r3, #0]
 80095d2:	f7ff bfd3 	b.w	800957c <_raise_r>
 80095d6:	bf00      	nop
 80095d8:	200006cc 	.word	0x200006cc

080095dc <_kill_r>:
 80095dc:	b538      	push	{r3, r4, r5, lr}
 80095de:	4d07      	ldr	r5, [pc, #28]	@ (80095fc <_kill_r+0x20>)
 80095e0:	2300      	movs	r3, #0
 80095e2:	4604      	mov	r4, r0
 80095e4:	4608      	mov	r0, r1
 80095e6:	4611      	mov	r1, r2
 80095e8:	602b      	str	r3, [r5, #0]
 80095ea:	f000 f8af 	bl	800974c <_kill>
 80095ee:	1c43      	adds	r3, r0, #1
 80095f0:	d102      	bne.n	80095f8 <_kill_r+0x1c>
 80095f2:	682b      	ldr	r3, [r5, #0]
 80095f4:	b103      	cbz	r3, 80095f8 <_kill_r+0x1c>
 80095f6:	6023      	str	r3, [r4, #0]
 80095f8:	bd38      	pop	{r3, r4, r5, pc}
 80095fa:	bf00      	nop
 80095fc:	20000b54 	.word	0x20000b54

08009600 <_getpid_r>:
 8009600:	f000 b894 	b.w	800972c <_getpid>

08009604 <__swhatbuf_r>:
 8009604:	b570      	push	{r4, r5, r6, lr}
 8009606:	460c      	mov	r4, r1
 8009608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800960c:	2900      	cmp	r1, #0
 800960e:	b096      	sub	sp, #88	@ 0x58
 8009610:	4615      	mov	r5, r2
 8009612:	461e      	mov	r6, r3
 8009614:	da0d      	bge.n	8009632 <__swhatbuf_r+0x2e>
 8009616:	89a3      	ldrh	r3, [r4, #12]
 8009618:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800961c:	f04f 0100 	mov.w	r1, #0
 8009620:	bf14      	ite	ne
 8009622:	2340      	movne	r3, #64	@ 0x40
 8009624:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009628:	2000      	movs	r0, #0
 800962a:	6031      	str	r1, [r6, #0]
 800962c:	602b      	str	r3, [r5, #0]
 800962e:	b016      	add	sp, #88	@ 0x58
 8009630:	bd70      	pop	{r4, r5, r6, pc}
 8009632:	466a      	mov	r2, sp
 8009634:	f000 f848 	bl	80096c8 <_fstat_r>
 8009638:	2800      	cmp	r0, #0
 800963a:	dbec      	blt.n	8009616 <__swhatbuf_r+0x12>
 800963c:	9901      	ldr	r1, [sp, #4]
 800963e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009642:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009646:	4259      	negs	r1, r3
 8009648:	4159      	adcs	r1, r3
 800964a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800964e:	e7eb      	b.n	8009628 <__swhatbuf_r+0x24>

08009650 <__smakebuf_r>:
 8009650:	898b      	ldrh	r3, [r1, #12]
 8009652:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009654:	079d      	lsls	r5, r3, #30
 8009656:	4606      	mov	r6, r0
 8009658:	460c      	mov	r4, r1
 800965a:	d507      	bpl.n	800966c <__smakebuf_r+0x1c>
 800965c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	6123      	str	r3, [r4, #16]
 8009664:	2301      	movs	r3, #1
 8009666:	6163      	str	r3, [r4, #20]
 8009668:	b003      	add	sp, #12
 800966a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800966c:	ab01      	add	r3, sp, #4
 800966e:	466a      	mov	r2, sp
 8009670:	f7ff ffc8 	bl	8009604 <__swhatbuf_r>
 8009674:	9f00      	ldr	r7, [sp, #0]
 8009676:	4605      	mov	r5, r0
 8009678:	4639      	mov	r1, r7
 800967a:	4630      	mov	r0, r6
 800967c:	f7fd fa16 	bl	8006aac <_malloc_r>
 8009680:	b948      	cbnz	r0, 8009696 <__smakebuf_r+0x46>
 8009682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009686:	059a      	lsls	r2, r3, #22
 8009688:	d4ee      	bmi.n	8009668 <__smakebuf_r+0x18>
 800968a:	f023 0303 	bic.w	r3, r3, #3
 800968e:	f043 0302 	orr.w	r3, r3, #2
 8009692:	81a3      	strh	r3, [r4, #12]
 8009694:	e7e2      	b.n	800965c <__smakebuf_r+0xc>
 8009696:	89a3      	ldrh	r3, [r4, #12]
 8009698:	6020      	str	r0, [r4, #0]
 800969a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800969e:	81a3      	strh	r3, [r4, #12]
 80096a0:	9b01      	ldr	r3, [sp, #4]
 80096a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80096a6:	b15b      	cbz	r3, 80096c0 <__smakebuf_r+0x70>
 80096a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096ac:	4630      	mov	r0, r6
 80096ae:	f000 f81d 	bl	80096ec <_isatty_r>
 80096b2:	b128      	cbz	r0, 80096c0 <__smakebuf_r+0x70>
 80096b4:	89a3      	ldrh	r3, [r4, #12]
 80096b6:	f023 0303 	bic.w	r3, r3, #3
 80096ba:	f043 0301 	orr.w	r3, r3, #1
 80096be:	81a3      	strh	r3, [r4, #12]
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	431d      	orrs	r5, r3
 80096c4:	81a5      	strh	r5, [r4, #12]
 80096c6:	e7cf      	b.n	8009668 <__smakebuf_r+0x18>

080096c8 <_fstat_r>:
 80096c8:	b538      	push	{r3, r4, r5, lr}
 80096ca:	4d07      	ldr	r5, [pc, #28]	@ (80096e8 <_fstat_r+0x20>)
 80096cc:	2300      	movs	r3, #0
 80096ce:	4604      	mov	r4, r0
 80096d0:	4608      	mov	r0, r1
 80096d2:	4611      	mov	r1, r2
 80096d4:	602b      	str	r3, [r5, #0]
 80096d6:	f000 f821 	bl	800971c <_fstat>
 80096da:	1c43      	adds	r3, r0, #1
 80096dc:	d102      	bne.n	80096e4 <_fstat_r+0x1c>
 80096de:	682b      	ldr	r3, [r5, #0]
 80096e0:	b103      	cbz	r3, 80096e4 <_fstat_r+0x1c>
 80096e2:	6023      	str	r3, [r4, #0]
 80096e4:	bd38      	pop	{r3, r4, r5, pc}
 80096e6:	bf00      	nop
 80096e8:	20000b54 	.word	0x20000b54

080096ec <_isatty_r>:
 80096ec:	b538      	push	{r3, r4, r5, lr}
 80096ee:	4d06      	ldr	r5, [pc, #24]	@ (8009708 <_isatty_r+0x1c>)
 80096f0:	2300      	movs	r3, #0
 80096f2:	4604      	mov	r4, r0
 80096f4:	4608      	mov	r0, r1
 80096f6:	602b      	str	r3, [r5, #0]
 80096f8:	f000 f820 	bl	800973c <_isatty>
 80096fc:	1c43      	adds	r3, r0, #1
 80096fe:	d102      	bne.n	8009706 <_isatty_r+0x1a>
 8009700:	682b      	ldr	r3, [r5, #0]
 8009702:	b103      	cbz	r3, 8009706 <_isatty_r+0x1a>
 8009704:	6023      	str	r3, [r4, #0]
 8009706:	bd38      	pop	{r3, r4, r5, pc}
 8009708:	20000b54 	.word	0x20000b54

0800970c <_close>:
 800970c:	4b02      	ldr	r3, [pc, #8]	@ (8009718 <_close+0xc>)
 800970e:	2258      	movs	r2, #88	@ 0x58
 8009710:	601a      	str	r2, [r3, #0]
 8009712:	f04f 30ff 	mov.w	r0, #4294967295
 8009716:	4770      	bx	lr
 8009718:	20000b54 	.word	0x20000b54

0800971c <_fstat>:
 800971c:	4b02      	ldr	r3, [pc, #8]	@ (8009728 <_fstat+0xc>)
 800971e:	2258      	movs	r2, #88	@ 0x58
 8009720:	601a      	str	r2, [r3, #0]
 8009722:	f04f 30ff 	mov.w	r0, #4294967295
 8009726:	4770      	bx	lr
 8009728:	20000b54 	.word	0x20000b54

0800972c <_getpid>:
 800972c:	4b02      	ldr	r3, [pc, #8]	@ (8009738 <_getpid+0xc>)
 800972e:	2258      	movs	r2, #88	@ 0x58
 8009730:	601a      	str	r2, [r3, #0]
 8009732:	f04f 30ff 	mov.w	r0, #4294967295
 8009736:	4770      	bx	lr
 8009738:	20000b54 	.word	0x20000b54

0800973c <_isatty>:
 800973c:	4b02      	ldr	r3, [pc, #8]	@ (8009748 <_isatty+0xc>)
 800973e:	2258      	movs	r2, #88	@ 0x58
 8009740:	601a      	str	r2, [r3, #0]
 8009742:	2000      	movs	r0, #0
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	20000b54 	.word	0x20000b54

0800974c <_kill>:
 800974c:	4b02      	ldr	r3, [pc, #8]	@ (8009758 <_kill+0xc>)
 800974e:	2258      	movs	r2, #88	@ 0x58
 8009750:	601a      	str	r2, [r3, #0]
 8009752:	f04f 30ff 	mov.w	r0, #4294967295
 8009756:	4770      	bx	lr
 8009758:	20000b54 	.word	0x20000b54

0800975c <_lseek>:
 800975c:	4b02      	ldr	r3, [pc, #8]	@ (8009768 <_lseek+0xc>)
 800975e:	2258      	movs	r2, #88	@ 0x58
 8009760:	601a      	str	r2, [r3, #0]
 8009762:	f04f 30ff 	mov.w	r0, #4294967295
 8009766:	4770      	bx	lr
 8009768:	20000b54 	.word	0x20000b54

0800976c <_read>:
 800976c:	4b02      	ldr	r3, [pc, #8]	@ (8009778 <_read+0xc>)
 800976e:	2258      	movs	r2, #88	@ 0x58
 8009770:	601a      	str	r2, [r3, #0]
 8009772:	f04f 30ff 	mov.w	r0, #4294967295
 8009776:	4770      	bx	lr
 8009778:	20000b54 	.word	0x20000b54

0800977c <_write>:
 800977c:	4b02      	ldr	r3, [pc, #8]	@ (8009788 <_write+0xc>)
 800977e:	2258      	movs	r2, #88	@ 0x58
 8009780:	601a      	str	r2, [r3, #0]
 8009782:	f04f 30ff 	mov.w	r0, #4294967295
 8009786:	4770      	bx	lr
 8009788:	20000b54 	.word	0x20000b54

0800978c <_exit>:
 800978c:	e7fe      	b.n	800978c <_exit>
	...

08009790 <_init>:
 8009790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009792:	bf00      	nop
 8009794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009796:	bc08      	pop	{r3}
 8009798:	469e      	mov	lr, r3
 800979a:	4770      	bx	lr

0800979c <_fini>:
 800979c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979e:	bf00      	nop
 80097a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097a2:	bc08      	pop	{r3}
 80097a4:	469e      	mov	lr, r3
 80097a6:	4770      	bx	lr
